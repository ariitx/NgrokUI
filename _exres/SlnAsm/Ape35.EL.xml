<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Ape35.EL</name>
    </assembly>
    <members>
        <member name="P:Ape.EL.App.General.FlushMemoryCount">
            <summary>
 Count number of FlushMemory execution.
 </summary>
        </member>
        <member name="P:Ape.EL.App.General.FlushAllProcesses">
            <summary>
 When using FlushMemory, flushes all processes as well.
 </summary>
        </member>
        <member name="M:Ape.EL.App.General.GetIdle">
            <summary>
 Get application's idle process.
 </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.App.General.FlushMemory(System.String)">
            <summary>
 Flush used memory used by application.
 </summary>
            <param name="strAppName">Application name to find the processes.</param>
            <remarks />
        </member>
        <member name="M:Ape.EL.App.General.FlushMemory(System.Int32)">
            <summary>
 Flush used memory used by application.
 </summary>
            <param name="pid">PID to find the process.</param>
            <remarks />
        </member>
        <member name="M:Ape.EL.App.General.FlushMemory(System.Diagnostics.Process)">
            <summary>
 Flush used memory used by application.
 </summary>
            <param name="p">The process.</param>
            <remarks />
        </member>
        <member name="M:Ape.EL.App.General.DisableSleep">
            <summary>
 Disable device sleeping while running program.
 </summary>
        </member>
        <member name="M:Ape.EL.App.General.KillProgram(System.String)">
            <summary>
 Kill executing program / service.
 </summary>
        </member>
        <member name="M:Ape.EL.App.General.SetMainThreadForm(System.Windows.Forms.Form@)">
            <summary>
 Use this method on main thread's form. When the main thread is closed, all other forms from other threads will be closed as well.
 </summary>
        </member>
        <member name="M:Ape.EL.App.General.SetMainThreadForm_Disposed(System.Object,System.Object)">
            <summary>
 Required by SetMainThreadForm.
 </summary>
        </member>
        <member name="M:Ape.EL.App.General.RunFormOnNewThread(System.Type)">
            <summary>
 Run form in a new thread independent of main form thread. You have to use BeginInvokeIfRequired on the form to use cross-threading functions.
 </summary>
        </member>
        <member name="M:Ape.EL.App.General.RunFormOnNewThread(System.Windows.Forms.Form)">
            <summary>
 Run form in a new thread independent of main form thread. You have to use BeginInvokeIfRequired on the form to use cross-threading functions.
 </summary>
        </member>
        <member name="M:Ape.EL.App.General.RunMethodOnNewThread(System.EventHandler,System.Threading.ThreadPriority)">
            <summary>
 Run method in a new thread independent of main form thread. Thread will be closed once the function is done.
 The provided EventHandler's parameter's sender will receive the thread.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.TypeExtensions.GetInstance(System.Type)">
            <summary>
 Returns an instance of the <paramref name="type" /> on which the method is invoked.
 </summary>
            <param name="type">The type on which the method was invoked.</param>
            <returns>An instance of the <paramref name="type" />.</returns>
        </member>
        <member name="M:Ape.EL.Extensions.TypeExtensions.GetInstance``1(System.Type,``0)">
            <summary>
 Returns an instance of the <paramref name="type" /> on which the method is invoked.
 </summary>
            <typeparam name="TArg">The type of the argument to pass to the constructor.</typeparam>
            <param name="type">The type on which the method was invoked.</param>
            <param name="argument">The argument to pass to the constructor.</param>
            <returns>An instance of the given <paramref name="type" />.</returns>
        </member>
        <member name="M:Ape.EL.Extensions.TypeExtensions.GetInstance``2(System.Type,``0,``1)">
            <summary>
 Returns an instance of the <paramref name="type" /> on which the method is invoked.
 </summary>
            <typeparam name="TArg1">The type of the first argument to pass to the constructor.</typeparam>
            <typeparam name="TArg2">The type of the second argument to pass to the constructor.</typeparam>
            <param name="type">The type on which the method was invoked.</param>
            <param name="argument1">The first argument to pass to the constructor.</param>
            <param name="argument2">The second argument to pass to the constructor.</param>
            <returns>An instance of the given <paramref name="type" />.</returns>
        </member>
        <member name="M:Ape.EL.Extensions.TypeExtensions.GetInstance``3(System.Type,``0,``1,``2)">
            <summary>
 Returns an instance of the <paramref name="type" /> on which the method is invoked.
 </summary>
            <typeparam name="TArg1">The type of the first argument to pass to the constructor.</typeparam>
            <typeparam name="TArg2">The type of the second argument to pass to the constructor.</typeparam>
            <typeparam name="TArg3">The type of the third argument to pass to the constructor.</typeparam>
            <param name="type">The type on which the method was invoked.</param>
            <param name="argument1">The first argument to pass to the constructor.</param>
            <param name="argument2">The second argument to pass to the constructor.</param>
            <param name="argument3">The third argument to pass to the constructor.</param>
            <returns>An instance of the given <paramref name="type" />.</returns>
        </member>
        <member name="T:Ape.EL.Extensions.TypeExtensions">
            <summary>
 This is an extensions module.
 </summary>
        </member>
        <member name="M:Ape.EL.Misc.Email.SendEmail(System.String,System.String,System.String,System.Boolean,System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>
 Wrapper for MailMessage class. Send email to one recipient.
 </summary>
            <param name="strRecipient">Recipient's email address.</param>
            <param name="strSubj">Email subject.</param>
            <param name="strMessage">Email content.</param>
            <returns>Email sending status</returns>
        </member>
        <member name="M:Ape.EL.Misc.Email.SendEmail(System.String,System.String,System.String,System.Boolean,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Net.Mail.Attachment[])">
            <summary>
 Wrapper for MailMessage class. Send email to one recipient.
 </summary>
            <param name="strRecipient">Recipient's email address.</param>
            <param name="strSubj">Email subject.</param>
            <param name="strMessage">Email content.</param>
            <returns>Email sending status</returns>
        </member>
        <member name="M:Ape.EL.Misc.Email.IsValidEmail(System.String)">
            <summary>
 Check if the email is valid.
 </summary>
            <param name="email" />
            <returns />
            <remarks />
        </member>
        <member name="F:Ape.EL.Setting.MySetting._processing">
            <summary>
 Processing read/write IO, must wait for each other. Otherwise it will cause file access lock.
 The functions that use this _processing to lock must not call each other! (eg. ReadFile must not call WriteFile)
 </summary>
        </member>
        <member name="F:Ape.EL.Setting.MySetting.STR_DvEx_Key">
            <summary>
 GetDataViewEx key column fieldname.
 </summary>
        </member>
        <member name="F:Ape.EL.Setting.MySetting.STR_DvEx_Setting">
            <summary>
 GetDataViewEx setting column fieldname.
 </summary>
        </member>
        <member name="F:Ape.EL.Setting.MySetting.AssemblyNamespace">
            <summary>
 Get the namespace for the caller assembly. For external use only! Dont use this on this assembly.
 </summary>
        </member>
        <member name="P:Ape.EL.Setting.MySetting.ConsumeException">
            <summary>
 Consume all exception in this class, no exception will be thrown.
 </summary>
        </member>
        <member name="P:Ape.EL.Setting.MySetting.Path">
            <summary>
 Get path of the setting file.
 </summary>
        </member>
        <member name="M:Ape.EL.Setting.MySetting.ResetPath">
            <summary>
 Reset the folder path of the setting files if Path properties has ever been updated.
 </summary>
            <remarks />
        </member>
        <member name="M:Ape.EL.Setting.MySetting.DeleteSettingEx(System.String,System.String)">
            <summary>
 Delete a section; if key is specified, then only delete the key.
 </summary>
        </member>
        <member name="M:Ape.EL.Setting.MySetting.SaveSettingEx(System.String,System.String,System.String)">
            <summary>
 Save persistent data in a setting file, does not accept chr(3) and chr(2).
 </summary>
        </member>
        <member name="M:Ape.EL.Setting.MySetting.GetDataViewEx(System.String,System.Boolean)">
            <summary>
 Return dataview with following columns: Key, Setting . Delete corrupted file whenever necessary.
 </summary>
        </member>
        <member name="M:Ape.EL.Setting.MySetting.CreateSection">
            <summary>
 Create an empty section and get default section name.
 </summary>
        </member>
        <member name="M:Ape.EL.Setting.MySetting.CreateSection(System.String)">
            <summary>
 Create an empty section with provided Section.
 </summary>
        </member>
        <member name="M:Ape.EL.Setting.MySetting.DeleteSection(System.String)">
            <summary>
 Delete a section / delete the registry file.
 </summary>
        </member>
        <member name="M:Ape.EL.Setting.MySetting.GetSectionListFromPath">
            <summary>
 Get list of string of available sections in Path directory. No test is performed to check whether the sections / files are valid.
 </summary>
        </member>
        <member name="M:Ape.EL.Setting.MySetting.RenameSection(System.String,System.String)">
            <summary>
 Change the section name.
 </summary>
        </member>
        <member name="M:Ape.EL.Setting.MySetting.UpdatePassword(System.String,System.String,System.String)">
            <summary>
 Change encryption password used on a section (file). Use with care!
 </summary>
        </member>
        <member name="T:Ape.EL.Setting.MySetting">
            <summary>
 Registry like setting.
 </summary>
        </member>
        <member name="M:Ape.EL.App.ReportBase.#ctor(System.String)">
            <summary>
 Initialization must include ObjectID.
 </summary>
        </member>
        <member name="P:Ape.EL.App.ReportBase.ObjectGroup">
            <summary>
 Eg. Home, Customer, Vendor, Branch.
 </summary>
        </member>
        <member name="P:Ape.EL.App.ReportBase.ObjectID">
            <summary>
 The module identifier, Eg. ViewSalesOrder, ViewCheckReport, etc.
 </summary>
        </member>
        <member name="P:Ape.EL.App.ReportBase.ObjectDescription">
            <summary>
 The module description, Eg. frmImport.Name &gt;&gt; result as Import.
 </summary>
        </member>
        <member name="P:Ape.EL.App.ReportBase.ObjectTruncated">
            <summary>
 Indicate whether this report is not used.
 </summary>
        </member>
        <member name="P:Ape.EL.Setting.BaseRegistry`1.Instance">
            <summary>
 Create singleton object of descendant class to inherit functions from this class.
 </summary>
            <value />
            <returns />
            <remarks />
        </member>
        <member name="P:Ape.EL.Setting.BaseRegistry`1.Key">
            <summary>
 Get Key of selected registry.
 </summary>
            <value />
            <returns />
            <remarks />
        </member>
        <member name="P:Ape.EL.Setting.BaseRegistry`1.Section">
            <summary>
 Get Section of selected registry.
 </summary>
            <value />
            <returns />
            <remarks />
        </member>
        <member name="P:Ape.EL.Setting.BaseRegistry`1.PathFile">
            <summary>
 Get the path to the registry file.
 </summary>
        </member>
        <member name="P:Ape.EL.Setting.BaseRegistry`1.DefaultValue">
            <summary>
 Get the default value of selected registry.
 </summary>
            <value />
            <returns />
            <remarks />
        </member>
        <member name="P:Ape.EL.Setting.BaseRegistry`1.Value">
            <summary>
 Get or set persistent value to selected registry.
 </summary>
            <value />
            <returns />
            <remarks />
        </member>
        <member name="P:Ape.EL.Setting.BaseRegistry`1.MyDefaultValue">
            <summary>
 Must override value of selected registry's default value in string.
 </summary>
            <value />
            <returns />
            <remarks />
        </member>
        <member name="P:Ape.EL.Setting.BaseRegistry`1.ValBool">
            <summary>
 Get or set Value property as boolean, string must be in "True" or "False" or empty.
 </summary>
        </member>
        <member name="P:Ape.EL.Setting.BaseRegistry`1.ValDec">
            <summary>
 Get or set Value property as decimal.
 </summary>
        </member>
        <member name="P:Ape.EL.Setting.BaseRegistry`1.ValInt">
            <summary>
 Get or set Value property as integer.
 </summary>
        </member>
        <member name="P:Ape.EL.Setting.BaseRegistry`1.ValLong">
            <summary>
 Get or set Value property as Long.
 </summary>
        </member>
        <member name="P:Ape.EL.Setting.BaseRegistry`1.ValDt">
            <summary>
 Get or set Value property as datetime.
 </summary>
        </member>
        <member name="T:Ape.EL.Setting.BaseRegistry`1">
            <summary>
                <para>Base Registry provides generic implementation of new MySetting.</para>
                <para>You can directly access the persistent data in the encrypted MySetting file with the descendant of this class.</para>
            </summary>
            <typeparam name="T">Type of a class, will be MySetting's Key; wherelse the class' Namespace will be MySetting's Section.</typeparam>
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.Network.CheckPingIP(System.String)">
            <summary>
 Check whether targeted IP can be connected.
 </summary>
            <param name="strIP" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.Network.IsPortOpen(System.String,System.Int32)">
            <summary>
 Checks to see if a TCP port is open on a specified device.
 </summary>
            <param name="Host">The name or IP address of the device to check for the open port on</param>
            <param name="PortNumber">The TCP port to test</param>
        </member>
        <member name="M:Ape.EL.Utility.Network.CheckDBStatus(System.String)">
            <summary>
 Check and reset default MSSQL$SQLEXPRESS service if it does not respond.
 </summary>
            <param name="strServiceName">By default is MSSQL$SQLEXPRESS.</param>
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.Network.RestartDBService(System.String)">
            <summary>
 Perform sql instance restart.
 </summary>
            <param name="strServiceName" />
            <remarks />
        </member>
        <member name="M:Ape.EL.Interfaces.IDialogBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
 Displays a message box in front of the specified object and with the specified text, caption, buttons, icon, and default button.
 </summary>
            <param name="owner">An implementation of System.Windows.Forms.IWin32Window that will own the modal dialog box.</param>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the System.Windows.Forms.MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">One of the System.Windows.Forms.MessageBoxDefaultButton values that specifies the default button for the message box.</param>
            <returns />
            <remarks />
        </member>
        <member name="T:Ape.EL.Misc.SingletonFactory`1">
            <summary>
 Wraps method for singleton object of class.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.Data.FileStreamer.ReadFileToByteArray(System.String,System.Int32)">
            <summary>
 Retrieve byte array from file.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.Data.FileStreamer.WriteFileFromByteArray(System.String,System.Byte[],System.Int32)">
            <summary>
 Append byte array as string to file.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.Data.FileStreamer.ReadFile(System.String)">
            <summary>
 Retrieve string from file.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.Data.FileStreamer.WriteFile(System.String,System.String)">
            <summary>
 Append string to file.
 </summary>
        </member>
        <member name="T:Ape.EL.Utility.Data.FileStreamer">
            <summary>
 Provide simple functions to read and write file.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbStandardConnection.#ctor(System.String)">
            <summary>
 Create a new connection based on provided connectionn string.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbStandardConnection.#ctor(System.Data.SqlClient.SqlConnection)">
            <summary>
 Reuse provided connection.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbStandardConnection.Reconnect">
            <summary>
 Renew connection.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbStandardConnection.ClearPool">
            <summary>
 Clear connection from pool to close connection this program has opened, avoiding exclusive lock, then perform Dispose method.
 </summary>
        </member>
        <member name="T:Ape.EL.Data.DbStandardConnection">
            <summary>
 Abstract class to provide SQL connection object.
 </summary>
            <remarks />
        </member>
        <member name="M:Ape.EL.Win32.Helper.GetControlText(System.IntPtr)">
            <summary>
 Get text of a control by pointer.
 </summary>
        </member>
        <member name="F:Ape.EL.App.ErrorLog.Priority.OFF">
            <summary>Off only.</summary>
        </member>
        <member name="F:Ape.EL.App.ErrorLog.Priority.DEBUG">
            <summary>Off, Debug.</summary>
        </member>
        <member name="F:Ape.EL.App.ErrorLog.Priority.INFO">
            <summary>Off, Debug, Info.</summary>
        </member>
        <member name="F:Ape.EL.App.ErrorLog.Priority.WARN">
            <summary>Off, Debug, Info, Warning.</summary>
        </member>
        <member name="F:Ape.EL.App.ErrorLog.Priority.ERROR">
            <summary>Off, Debug, Info, Warning, Error.</summary>
        </member>
        <member name="F:Ape.EL.App.ErrorLog.Priority.FATAL">
            <summary>Off, Debug, Info, Warning, Error, Fatal.</summary>
        </member>
        <member name="P:Ape.EL.App.ErrorLog.BeforeWriteMessageEventHandler">
            <summary>
 Set an event handler before begin WriteMessage routine. Not affected by error log priority.
 </summary>
        </member>
        <member name="P:Ape.EL.App.ErrorLog.Properties">
            <summary>
 Set ErrorLog's settings.
 </summary>
        </member>
        <member name="M:Ape.EL.App.ErrorLog.WriteMessage(System.String,Ape.EL.App.ErrorLog.Priority)">
            <summary>
 Log error to error.log file in "AppData\Local\AppNamespace\error.log."
 </summary>
            <param name="message">String message to be appended to existing log file.</param>
            <param name="level">Priority of the message.</param>
        </member>
        <member name="M:Ape.EL.App.ErrorLog.WriteMessage(System.String)">
            <summary>
 Log error to error.log file in "AppData\Local\AppNamespace\error.log."
 </summary>
        </member>
        <member name="M:Ape.EL.App.ErrorLog.WriteStrings(System.Text.StringBuilder)">
            <summary>
 Log error to error.log file in "AppData\Local\AppNamespace\error.log."
 </summary>
        </member>
        <member name="M:Ape.EL.App.ErrorLog.Debug(System.String)">
            <summary>
 Log error to error.log with DEBUG priority.
 </summary>
        </member>
        <member name="M:Ape.EL.App.ErrorLog.Info(System.String)">
            <summary>
 Log error to error.log with INFO priority.
 </summary>
        </member>
        <member name="M:Ape.EL.App.ErrorLog.Warn(System.String)">
            <summary>
 Log error to error.log with WARN priority.
 </summary>
        </member>
        <member name="M:Ape.EL.App.ErrorLog.Error(System.String)">
            <summary>
 Log error to error.log with ERROR priority.
 </summary>
        </member>
        <member name="M:Ape.EL.App.ErrorLog.Fatal(System.String)">
            <summary>
 Log error to error.log with FATAL priority.
 </summary>
        </member>
        <member name="M:Ape.EL.App.ErrorLog.Debug(System.Exception)">
            <summary>
 Log error to error.log with DEBUG priority.
 </summary>
        </member>
        <member name="M:Ape.EL.App.ErrorLog.Info(System.Exception)">
            <summary>
 Log error to error.log with INFO priority.
 </summary>
        </member>
        <member name="M:Ape.EL.App.ErrorLog.Warn(System.Exception)">
            <summary>
 Log error to error.log with WARN priority.
 </summary>
        </member>
        <member name="M:Ape.EL.App.ErrorLog.Error(System.Exception)">
            <summary>
 Log error to error.log with ERROR priority.
 </summary>
        </member>
        <member name="M:Ape.EL.App.ErrorLog.Fatal(System.Exception)">
            <summary>
 Log error to error.log with FATAL priority.
 </summary>
        </member>
        <member name="M:Ape.EL.App.ErrorLog.OpenLogFile">
            <summary>
 Read the error log and return as string.
 </summary>
        </member>
        <member name="T:Ape.EL.App.ErrorLog">
            <summary>
 Universal error message logger, file will be saved in "C:\Users\[user]\AppData\Local\[root namespace]\error.log."
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.Data.MD5HashGenerator.GenerateKey(System.Object)">
            <summary>
 Generates a hashed - key for an instance of a class.
 The hash is a classic MD5 hash (e.g. BF20EB8D2C4901112179BF5D242D996B). So you can distinguish different 
 instances of a class. Because the object is hashed on the internal state, you can also hash it, then send it to
 someone in a serialized way. Your client can then deserialize it and check if it is in
 the same state.
 The method just just estimates that the object implements the ISerializable interface. What's
 needed to save the state or so, is up to the implementer of the interface.
 <b>The method is thread-safe!</b></summary>
            <param name="sourceObject">The object you'd like to have a key out of it.</param>
            <returns>An string representing a MD5 Hashkey corresponding to the object or null if the object couldn't be serialized.</returns>
            <exception cref="T:System.ApplicationException">Will be thrown if the key cannot be generated.</exception>
        </member>
        <member name="M:Ape.EL.Utility.Data.MD5HashGenerator.ObjectToByteArray(System.Object)">
            <summary>
 Converts an object to an array of bytes. This array is used to hash the object.
 </summary>
            <param name="objectToSerialize">Just an object</param>
            <returns>A byte - array representation of the object.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Is thrown if something went wrong during serialization.</exception>
        </member>
        <member name="M:Ape.EL.Utility.Data.MD5HashGenerator.ComputeHash(System.Byte[])">
            <summary>
 Generates the hashcode of an given byte-array. The byte-array can be an object. Then the
 method "hashes" this object. The hash can then be used e.g. to identify the object.
 </summary>
            <param name="objectAsBytes">bytearray representation of an object.</param>
            <returns>The MD5 hash of the object as a string or null if it couldn't be generated.</returns>
        </member>
        <member name="T:Ape.EL.Utility.Data.MD5HashGenerator">
            <summary>
 This class takes an object, and generates a key to it. There are several possibilities:
 This generator can generate keys of type integer,float,double. The generated key is not necessarily
 unique!
 </summary>
        </member>
        <member name="M:Ape.EL.Misc.ClassHelper.GetStringsFromClassConstants(System.Type)">
 http://weblogs.asp.net/whaggard/2708
 <summary>
 Getting a list of constants using Reflection.
 </summary></member>
        <member name="M:Ape.EL.Misc.SecretCodesHelper.GetSecretCodes(System.String,System.Type)">
            <summary>
                <para>Return matching keyed in secret code.</para>
                <para>CodeList must be a class with constants as its codes.</para>
            </summary>
        </member>
        <member name="M:Ape.EL.Misc.SecretCodesHelper.SetPredictKeyIn(System.String,System.Type)">
            <summary>
 Compare against all possible Half Pyramid Format and find the most matching code.
 </summary>
        </member>
        <member name="M:Ape.EL.Misc.SecretCodesHelper.GetHalfPyramidFormat(System.String)">
            <summary>
                <para>This function returns something like this:</para>
                <para>Input value: ATARI</para>
                <para>Result (in a string array):</para>
                <para>A</para>
                <para>AT</para>
                <para>ATA</para>
                <para>ATAR</para>
                <para>ATARI</para>
            </summary>
        </member>
        <member name="T:Ape.EL.Misc.SecretCodesHelper">
            <summary>
 Perform secret code parsing.
 </summary>
            <remarks>Read CodeList example and usage example in the source code footer note.</remarks>
        </member>
        <member name="M:Ape.EL.Data.DbUtility.GetConnectionString(System.String,System.String,System.Boolean)">
            <summary>
 Create ConnectionString using integrated security.
 </summary>
            <param name="strDataSource">A server name or data source.</param>
            <param name="strInitialCatalog">Database name to be accessed.</param>
            <param name="bMultipleActiveResultSets" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Data.DbUtility.GetConnectionString(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
 Create ConnectionString with username and password.
 </summary>
            <param name="strDataSource">A server name or data source.</param>
            <param name="strInitialCatalog">Database name to be accessed.</param>
            <param name="strUsername">Username to login.</param>
            <param name="strPassword">Password to login.</param>
            <param name="bMultipleActiveResultSets" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Data.DbUtility.GetCsb(System.String)">
            <summary>
 Return a SQLConnectionStringBuilder in a shorter function.
 </summary>
            <param name="strConnString" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Data.DbUtility.GetTestGeneral(System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
 Get an initialized DbGeneral based on provided connection string members.
 </summary>
            <param name="serverName" />
            <param name="useWindowsAuthentication" />
            <param name="userId" />
            <param name="password" />
            <param name="initialCatalogue" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Data.DbUtility.TestConnection(System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
 Test connection to SQL Server master database.
 </summary>
            <param name="serverName" />
            <param name="useWindowsAuthentication" />
            <param name="userId" />
            <param name="password" />
            <param name="initialCatalogue" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Data.DbUtility.TestConnection(System.Data.SqlClient.SqlConnectionStringBuilder)">
            <summary>
 Test connection to SQL Server master database.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbUtility.CreateConnection(System.String@,System.Data.SqlClient.SqlConnection@,System.String)">
            <summary>
 Create SqlConnection from a connection string.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbUtility.CreateConnection(System.String@,System.Data.SqlClient.SqlConnection@,System.Data.SqlClient.SqlConnectionStringBuilder)">
            <summary>
 Create SqlConnection from a connection string.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbUtility.GetUserDatabaseList(System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
 Get list of user database in targeted SQL Server.
 </summary>
            <param name="serverName" />
            <param name="useWindowsAuthentication" />
            <param name="userId" />
            <param name="password" />
            <param name="initialCatalogue" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Data.DbUtility.GetUserDatabaseList(System.Data.SqlClient.SqlConnection)">
            <summary>
 Get list of user database in targeted SQL Server.
 </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Data.DbUtility.GetReferencedObjects(System.Data.Common.DbConnection)">
            <summary>
 Get associated objects that are still using the connection, preventing the connection to create any new transaction.
 Normally forgotten to close datareaders are the trouble maker.
 https://blogs.msdn.microsoft.com/dataaccesstechnologies/2009/04/08/how-to-find-out-the-data-reader-referencing-an-ado-net-connection-object-to-fix-the-error-quotthere-is-already-an-open-datareader-associated-with-this-command-which-must-be-closed-firstquo/
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbUtility.Sql.GetTableListQuery">
            <summary>
 Get query to retrieve all table name in connected database.
 </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Data.DbUtility.Sql.GetColumnListQuery(System.String,System.String)">
            <summary>
 Get query to retrieve all columns in the connected database.
 </summary>
            <param name="TableName">Optional, will be % wildcard if not set.</param>
            <param name="ColumnFilter">Optional, will be % wildcard if not set.</param>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Data.DbUtility.Sql.GetConnectedUsers(System.String,System.String)">
            <summary>
 Get query to retrieve number of connected users from the current connection.
 </summary>
            <param name="DbName">Optional, will be % wildcard if not set.</param>
            <param name="LoginName">Optional, will be % wildcard if not set.</param>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Data.DbUtility.Sql.SQLFormatter(System.String)">
            <summary>
 Prettify SQL query into a one liner with paragraph-like spacing.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbUtility.SqlString.Format(System.String,System.Object[])">
            <summary>
 Safely execute your query with WHERE clause by closing single quote with String.Format like structure. 
 Eg. SqlString.Format("Select * From Staff Where ID = '{0}' Or Name = '{1}'", "0123'456", "Ch'ng KS") 
 It will return "Select * From Staff Where ID = '0123''456' Or Name = 'Ch''ng KS'"
 </summary>
        </member>
        <member name="M:Ape.EL.App.Debug.IsDebug">
            <summary>
 Check for compile configuration if it is Debug
 </summary>
        </member>
        <member name="M:Ape.EL.App.Debug.Assert(System.Boolean,System.String)">
            <summary>
 Checks for a condition; if the condition is false, outputs a specified message and displays a message box that shows the call stack.
 </summary>
        </member>
        <member name="M:Ape.EL.App.Debug.Assert(System.Boolean,System.Exception)">
            <summary>
 Checks for a condition; if the condition is false, outputs a specified message and displays a message box that shows the call stack.
 </summary>
        </member>
        <member name="T:Ape.EL.App.Debug">
            <summary>
 Only for internal project usage.
 </summary>
        </member>
        <member name="T:Ape.EL.App.DialogCloser">
            <summary>
 Close any dialog message (MessageBox.Show or MsgBox) on same thread.
 </summary>
            <remarks> Methods inside DialogCloser wrapper must be in same thread. Do not create new thread inside wrapper as the messagebox will not be caught. </remarks>
        </member>
        <member name="M:Ape.EL.Net40.String40.IsNullOrWhiteSpace(System.String)">
            <summary>
 Indicates whether a specified string is null, empty, or consists only of white-space characters.
 </summary>
            <param name="value">The string to test.</param>
            <returns>true if the value parameter is null or Empty, or if value consists exclusively of white-space characters. </returns>
        </member>
        <member name="M:Ape.EL.Localization.Localizer.GetEnumTable(System.Type)">
            <summary>
 Map enum which has LocalizableString to table which can be used by LookupEditBuilder
 </summary>
        </member>
        <member name="M:Ape.EL.Misc.DeepCloneHelper.DeepClone``1(``0)">
            <summary>
 Get the deep clone of an object.
 </summary>
            <typeparam name="T">The type of the obj.</typeparam>
            <param name="obj">It is the object used to deep clone.</param>
            <returns>Return the deep clone.</returns>
        </member>
        <member name="M:Ape.EL.Misc.DeepCloneHelper.CloneProcedure(System.Object)">
            <summary>
 This method implements deep clone using reflection.
 </summary>
            <param name="obj">It is the object used to deep clone.</param>
            <returns>Return the deep clone.</returns>
        </member>
        <member name="T:Ape.EL.Misc.DeepCloneHelper">
            <summary>
 The class contains the methods that implement deep clone using reflection.
 </summary>
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.Data.Zip.Create(System.String,System.String,System.String)">
            <summary>
 Compresses the files in the nominated folder, and creates a zip file on disk named as outPathname.
 </summary>
            <param name="outPathname" />
            <param name="folderName" />
            <param name="password" />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.Data.Zip.CompressFolder(System.String,ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.Int32)">
            <summary>
 Recurses down the folder structure.
 </summary>
            <param name="path" />
            <param name="zipStream" />
            <param name="folderOffset" />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.General.GetStartUpName(System.String)">
            <summary>
 Get main application's name that calls this library.
 If strPath param is set, it will get strPath instead.
 eg. File.EXE
 </summary>
            <param name="strPath">System.Reflection.Assembly.GetExecutingAssembly().Codebase</param>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.General.GetStartUpPath">
            <summary>
 Get main application's full path that calls this library. Include Utils.dll name.
 eg. D:\Program\File.EXE
 </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.General.GetStartUpPathDirectory(System.Boolean)">
            <summary>
 Get executing application's directory.
 eg. D:\Program
 Interchangeable with GetAspPhysicalPath.
 </summary>
            <param name="refresh">Refresh directory path again.</param>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.General.GetAsm(System.String)">
            <summary>
 Return the assembly of selected filepath.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.GetAsmNamespace(System.String,System.Boolean)">
            <summary>
 Return namespace of the selected file path.
 Return empty string if catch an error.
 </summary>
            <param name="root">Default is true.</param>
        </member>
        <member name="M:Ape.EL.Utility.General.GetAsmNamespace(System.Reflection.Assembly,System.Boolean)">
            <summary>
 Return namespace of the selected assembly.
 Return empty string if catch an error.
 </summary>
            <param name="asm" />
            <param name="root">Default is true.</param>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.General.GetTypesInNamespace(System.Reflection.Assembly,System.String)">
            <summary>
 Get members in a namepace.
 </summary>
            <param name="assembly" />
            <param name="nameSpace" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.General.GetClasses(System.Reflection.Assembly)">
            <summary>
 Get all classes from an assembly to list of string.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.GetAssemblyGUID(System.Reflection.Assembly)">
            <summary>
 Get current an assembly's GUID. If assembly not provided, it will get executing assembly.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.IsNetworkUser(System.String,System.Boolean)">
            <summary>
 Check whether the assembly is executed within network resource.
 </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.General.GetGUID(System.Boolean,System.Boolean,System.String)">
            <summary>
 Please read source's comment.
 </summary>
            <param name="bEn">Encrypt using some algorithm.</param>
            <param name="bNoDash">Remove dash from GUID.</param>
            <param name="str">Will be used to return MD5 hash with some operation.</param>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.General.HalfHash(System.String)">
            <summary>
 Used by GetGUID.
 </summary>
            <param name="str" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.General.GetAssemblyIcon(System.String,System.Boolean)">
            <summary>
 Extract icon from selected path assembly and return the icon.
 http://www.pinvoke.net/default.aspx/shell32/ExtractIconEx.html
 </summary>
            <param name="strPath">Can use Utils.General.GetStartUpPath</param>
        </member>
        <member name="M:Ape.EL.Utility.General.ExtractIconEx(System.String,System.Int32,System.IntPtr[],System.IntPtr[],System.UInt32)">
            <summary>
 Used by GetAssemblyIcon.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.DestroyIcon(System.IntPtr)">
            <summary>
 Used by GetAssemblyIcon.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.GetGraphics(System.String)">
            <summary>
 Extract image from file to memory as bitmap.
 </summary>
            <param name="filename" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.General.ResizeImage(System.Drawing.Image,System.Drawing.Size,System.Boolean)">
            <summary>
 Resize Image size.
 </summary>
            <param name="image" />
            <param name="size" />
            <param name="preserveAspectRatio" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.General.ReducePictureSize(System.Drawing.Image,System.Int32)">
            <summary>
 Reduce image resolution to reduce its size.
 </summary>
            <param name="img" />
            <param name="intMaxPicSize" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.General.ImageToBase64(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
 Convert image to base64 string.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.Base64ToImage(System.String)">
            <summary>
 Convert base64 string to image.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.GetOSVersion">
            <summary>
 Returns Windows version in string.
 </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.General.SetFullAccess(System.String)">
            <summary>
 Set the directory or file security to everyone.
 </summary>
            <param name="path" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.General.IsValidFileNameOrPath(System.String)">
            <summary>
 Validate File Names and Paths.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.GetCleanPath(System.String)">
            <summary>
 Generate a path based on preference. For example, passing "myfolder" will give you "c:\xxx\myfolder" if the executing program is located in "c:\xxx\".
 </summary>
            <remarks>If path is empty, executing program directory will be used.</remarks>
        </member>
        <member name="M:Ape.EL.Utility.General.HasLogicalDrivePath(System.String)">
            <summary>
 Determine whether the path started with available logical drives installed on running computer.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.GetProcessorArchitechture">
            <summary>
 Return AMD64 for 64 bit or x86 for 32 bit.
 </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.General.Isx64">
            <summary>
 Check if the OS architechture is 64 bit, use Isx64En to check for the runtime process bit. Determine by checking if PROCESSOR_ARCHITECTURE is AMD64.
 </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.General.Isx64OS">
            <summary>
 Alternative use of Isx64, compatible with .net 3.5 (maybe).
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.Isx64OSEx">
            <summary>
 Alternative use of Isx64, based on mscorlib. Only avail in .net 4.0 above. On 64 Windows, it will always return true, and 32 Windows always false.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.Isx64Env">
            <summary>
 Check if the program is running in 64 bit, use Isx64 to check for OS architecture bit.
 </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.General.Is64OS">
            <summary>
 Check if the Windows OS architechture is 64 bit.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.Is64Proc">
            <summary>
 Check if the program is running in 64 bit, use Is64OS to check for OS architecture bit.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.Enable64Bit">
            <summary>
 Determine whether .Net registry has been set to run as 32 bit program.
 It will return true if running in 32 bit OS or executing program compiled in 32 bit.
 it will return true if OS is 64 bit, but .Net registry has been modified to enforce 32 bit.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.IsRdp">
            <summary>
 Check if assembly is executed in Remote Desktop environment.
 </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.General.IsAspNet">
            <summary>
 Check if the current process is running as a Windows process or IIS / Asp.net service.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.GetAspPhysicalPath">
            <summary>
 Get path where the ASP program is hosted.
 Interchangeable with GetStartUpPathDirectory.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.GetVersion(System.Reflection.Assembly)">
            <summary>
 Get the assembly version of this program, default use entry assembly.
 </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.General.GetProgramName(System.Reflection.Assembly)">
            <summary>
 Get the program name (from assembly information title), default use entry assembly.
 </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.General.GetFullVersion(System.Reflection.Assembly)">
            <summary>
 Return the full version of this program with the program's name, default use entry assembly.
 eg. MyProgram Version 1.0.0
 </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.General.GetFileVersionInfo(System.Reflection.Assembly)">
            <summary>
 Get file version of this program, default use entry assembly.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.IsRuntime">
            <summary>
 Indicate that the code is running in runtime. Use DesignMode for designing mode check (1 level only).
 </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.General.GetHostName(System.String)">
            <summary>
 Get PC's name based on host address (eg. localhost / 127.0.0.1 / 192.168.0.131 / RD_07-NB will return RD_07-NB).
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.IsLocalhost(System.String)">
            <summary>
 Check if terminal connect locally. Using GetHostName(hostAddress) to determine if the current environment machine name equals with provided connection host.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.IsAdministrator">
            <summary>
 Check whether program is running under system administrator.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.IsAdministrator2">
            <summary>
 Check whether program is running under system administrator. It will check by writing a text file in Windows directory.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.SetProgramAutoRun(System.Boolean,System.String)">
            <summary>
 Set application auto run on startup setting (CurrentUser).
 </summary>
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.General.SetProgramAutoRunLM(System.Boolean,System.String)">
            <summary>
 Set application auto run on startup setting (LocalMachine).
 </summary>
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.General.SetProgramAutoRunStartup(System.Boolean)">
            <summary>
 Set application auto run on startup setting (by creating shortcut on current user's Startup folder).
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.CreateShortCut(System.String,System.String,System.String)">
            <summary>
 Create a shortcut file.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.CreatePermission(System.String)">
            <summary>
 Legacy code from installer program. (Probably for access to network files or directories)
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.IsServiceInstalled(System.String)">
            <summary>
 Determine if a service has been installed (search by name).
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.General.RetrieveAssemblyBuildTime(System.String)">
            <summary>
 Returns the date and time that the specified assembly was compiled on.
 </summary>
            <param name="filePath">A full path to a .NET assembly.</param>
            <returns>A DateTime value.</returns>
        </member>
        <member name="P:Ape.EL.Misc.FileHelper.XCopy.CopyNewerOnly">
            <summary>
 Copy only newer files. Default is true.
 </summary>
        </member>
        <member name="P:Ape.EL.Misc.FileHelper.XCopy.CopyHidden">
            <summary>
 Copy hidden files as well. Default is true.
 </summary>
        </member>
        <member name="P:Ape.EL.Misc.FileHelper.XCopy.RetainReadonlyAttribute">
            <summary>
 Copying read-only files to retain that file attribute in destination. Default is true.
 </summary>
        </member>
        <member name="P:Ape.EL.Misc.FileHelper.XCopy.AdditionalArguments">
            <summary>
 Please use the switch as in command prompt. This will ignore all other properties (eg. CopyNewerOnly)
 </summary>
        </member>
        <member name="T:Ape.EL.Misc.FileHelper.XCopy">
            <summary>
 Ported command line xcopy as a class with some functions.
 </summary>
        </member>
        <member name="M:Ape.EL.Misc.FileHelper.GetFilesRecursive(System.String)">
            <summary>
 This method starts at the specified directory.
 It traverses all subdirectories.
 It returns a List of those directories.
 </summary>
        </member>
        <member name="M:Ape.EL.Misc.FileHelper.CopyNew(System.String,System.String)">
            <summary>
 System.IO.File.Copy with ability to copy only newer files.
 </summary>
        </member>
        <member name="T:Ape.EL.Misc.FileHelper">
            <summary>
 This class contains directory helper method(s).
 </summary>
            <remarks>https://www.dotnetperls.com/recursive-file-directory-vbnet</remarks>
        </member>
        <member name="F:Ape.EL.Utility.Data.Crypt.Rijndael.EPasswordAlgorithm.PBKDF1">
            <summary>PasswordDeriveBytes</summary>
        </member>
        <member name="F:Ape.EL.Utility.Data.Crypt.Rijndael.EPasswordAlgorithm.PBKDF2">
            <summary>Rfc2898DeriveBytes</summary>
        </member>
        <member name="T:Ape.EL.Utility.Data.Crypt.Rijndael.EPasswordAlgorithm">
            <summary>
 Password algorithm types that can be used in deriving password bytes.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.Data.Crypt.Rijndael.#ctor">
            <summary>
 Construct a new Rijndael encryption using default setting. Rfc2898 will be used as password derivatives.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.Data.Crypt.Rijndael.#ctor(System.String,System.String,System.Int32)">
            <summary>
 Construct a new Rijndael encryption using preferred setting.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.Data.Crypt.Rijndael.#ctor(System.String,System.String,System.Int32,Ape.EL.Utility.Data.Crypt.Rijndael.EPasswordAlgorithm)">
            <summary>
 Construct a new Rijndael encryption using preferred setting.
 </summary>
        </member>
        <member name="T:Ape.EL.Utility.Data.Crypt.Rijndael">
            <summary>
 Customizable Rijndael encryption class.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.Data.Crypt.GetHash(System.String,System.String)">
            <summary>
 md5 hashing algo; sauce: http://goo.gl/VlMFl
 </summary>
            <param name="input" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.Data.Crypt.Encrypt(System.String,System.String)">
            <summary>
 encryption/decryption process based on http://www.obviex.com/samples/Encryption.aspx
 Obviex (c.2002). How To: Encrypt and Decrypt Data Using a Symmetric (Rijndael) Key (C#/VB.NET)
 </summary>
            <param name="plainText" />
            <param name="passPhrase" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.Data.Crypt.ObjectToByteArray(System.Object)">
            <summary>
 Convert an object to a byte array.
 </summary>
            <param name="obj" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.Data.Crypt.ByteArrayToObject(System.Byte[])">
            <summary>
 Convert a byte array to an Object.
 </summary>
            <param name="arrBytes" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Win32.User32.FindWindow(System.String,System.String)">
            <summary>
 Get a handle to an application window.
 </summary>
        </member>
        <member name="M:Ape.EL.Win32.User32.SetForegroundWindow(System.IntPtr)">
            <summary>
 Activate an application window.
 </summary>
        </member>
        <member name="M:Ape.EL.Win32.User32.DoesWin32MethodExist(System.String,System.String)">
            <summary>
 Check whether any win32 method exist.
 </summary>
        </member>
        <member name="M:Ape.EL.Win32.User32.LockWindowUpdate(System.IntPtr)">
            <summary>
 Lock or relase the window for updating.
 </summary>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.ErrorToString(System.Int32)">
            <summary>
     Returns the error message that corresponds to a given error number.
 </summary>
            <returns>
     Returns the error message that corresponds to a given error number.
 </returns>
            <param name="ErrorNumber">
     Optional. Any valid error number.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Fix(System.Int16)">
            <summary>
     Return the integer portion of a number.
 </summary>
            <returns>
     Return the integer portion of a number.
 </returns>
            <param name="Number">
     Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Fix(System.Int32)">
            <summary>
     Return the integer portion of a number.
 </summary>
            <returns>
     Return the integer portion of a number.
 </returns>
            <param name="Number">
     Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Fix(System.Int64)">
            <summary>
     Return the integer portion of a number.
 </summary>
            <returns>
     Return the integer portion of a number.
 </returns>
            <param name="Number">
     Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Fix(System.Double)">
            <summary>
     Return the integer portion of a number.
 </summary>
            <returns>
     Return the integer portion of a number.
 </returns>
            <param name="Number">
     Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Fix(System.Single)">
            <summary>
     Return the integer portion of a number.
 </summary>
            <returns>
     Return the integer portion of a number.
 </returns>
            <param name="Number">
     Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Fix(System.Decimal)">
            <summary>
     Return the integer portion of a number.
 </summary>
            <returns>
     Return the integer portion of a number.
 </returns>
            <param name="Number">
     Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Fix(System.Object)">
            <summary>
     Return the integer portion of a number.
 </summary>
            <returns>
     Return the integer portion of a number.
 </returns>
            <param name="Number">
     Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Int(System.Int16)">
            <summary>
     Return the integer portion of a number.
 </summary>
            <returns>
     Return the integer portion of a number.
 </returns>
            <param name="Number">
     Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Int(System.Int32)">
            <summary>
     Return the integer portion of a number.
 </summary>
            <returns>
     Return the integer portion of a number.
 </returns>
            <param name="Number">
     Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Int(System.Int64)">
            <summary>
     Return the integer portion of a number.
 </summary>
            <returns>
     Return the integer portion of a number.
 </returns>
            <param name="Number">
     Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Int(System.Double)">
            <summary>
     Return the integer portion of a number.
 </summary>
            <returns>
     Return the integer portion of a number.
 </returns>
            <param name="Number">
     Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Int(System.Single)">
            <summary>
     Return the integer portion of a number.
 </summary>
            <returns>
     Return the integer portion of a number.
 </returns>
            <param name="Number">
     Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Int(System.Decimal)">
            <summary>
     Return the integer portion of a number.
 </summary>
            <returns>
     Return the integer portion of a number.
 </returns>
            <param name="Number">
     Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Int(System.Object)">
            <summary>
     Return the integer portion of a number.
 </summary>
            <returns>
     Return the integer portion of a number.
 </returns>
            <param name="Number">
     Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Hex(System.SByte)">
            <summary>
     Returns a string representing the hexadecimal value of a number.
 </summary>
            <returns>
     Returns a string representing the hexadecimal value of a number.
 </returns>
            <param name="Number">
     Required. Any valid numeric expression or String expression.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Hex(System.Byte)">
            <summary>
     Returns a string representing the hexadecimal value of a number.
 </summary>
            <returns>
     Returns a string representing the hexadecimal value of a number.
 </returns>
            <param name="Number">
     Required. Any valid numeric expression or String expression.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Hex(System.Int16)">
            <summary>
     Returns a string representing the hexadecimal value of a number.
 </summary>
            <returns>
     Returns a string representing the hexadecimal value of a number.
 </returns>
            <param name="Number">
     Required. Any valid numeric expression or String expression.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Hex(System.UInt16)">
            <summary>
     Returns a string representing the hexadecimal value of a number.
 </summary>
            <returns>
     Returns a string representing the hexadecimal value of a number.
 </returns>
            <param name="Number">
     Required. Any valid numeric expression or String expression.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Hex(System.Int32)">
            <summary>
     Returns a string representing the hexadecimal value of a number.
 </summary>
            <returns>
     Returns a string representing the hexadecimal value of a number.
 </returns>
            <param name="Number">
     Required. Any valid numeric expression or String expression.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Hex(System.UInt32)">
            <summary>
     Returns a string representing the hexadecimal value of a number.
 </summary>
            <returns>
     Returns a string representing the hexadecimal value of a number.
 </returns>
            <param name="Number">
     Required. Any valid numeric expression or String expression.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Hex(System.Int64)">
            <summary>
     Returns a string representing the hexadecimal value of a number.
 </summary>
            <returns>
     Returns a string representing the hexadecimal value of a number.
 </returns>
            <param name="Number">
     Required. Any valid numeric expression or String expression.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Hex(System.UInt64)">
            <summary>
     Returns a string representing the hexadecimal value of a number.
 </summary>
            <returns>
     Returns a string representing the hexadecimal value of a number.
 </returns>
            <param name="Number">
     Required. Any valid numeric expression or String expression.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Hex(System.Object)">
            <summary>
     Returns a string representing the hexadecimal value of a number.
 </summary>
            <returns>
     Returns a string representing the hexadecimal value of a number.
 </returns>
            <param name="Number">
     Required. Any valid numeric expression or String expression.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Oct(System.SByte)">
            <summary>
     Returns a string representing the octal value of a number.
 </summary>
            <returns>
     Returns a string representing the octal value of a number.
 </returns>
            <param name="Number">
     Required. Any valid numeric expression or String expression.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Oct(System.Byte)">
            <summary>
     Returns a string representing the octal value of a number.
 </summary>
            <returns>
     Returns a string representing the octal value of a number.
 </returns>
            <param name="Number">
     Required. Any valid numeric expression or String expression.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Oct(System.Int16)">
            <summary>
     Returns a string representing the octal value of a number.
 </summary>
            <returns>
     Returns a string representing the octal value of a number.
 </returns>
            <param name="Number">
     Required. Any valid numeric expression or String expression.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Oct(System.UInt16)">
            <summary>
     Returns a string representing the octal value of a number.
 </summary>
            <returns>
     Returns a string representing the octal value of a number.
 </returns>
            <param name="Number">
     Required. Any valid numeric expression or String expression.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Oct(System.Int32)">
            <summary>
     Returns a string representing the octal value of a number.
 </summary>
            <returns>
     Returns a string representing the octal value of a number.
 </returns>
            <param name="Number">
     Required. Any valid numeric expression or String expression.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Oct(System.UInt32)">
            <summary>
     Returns a string representing the octal value of a number.
 </summary>
            <returns>
     Returns a string representing the octal value of a number.
 </returns>
            <param name="Number">
     Required. Any valid numeric expression or String expression.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Oct(System.Int64)">
            <summary>
     Returns a string representing the octal value of a number.
 </summary>
            <returns>
     Returns a string representing the octal value of a number.
 </returns>
            <param name="Number">
     Required. Any valid numeric expression or String expression.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Oct(System.UInt64)">
            <summary>
     Returns a string representing the octal value of a number.
 </summary>
            <returns>
     Returns a string representing the octal value of a number.
 </returns>
            <param name="Number">
     Required. Any valid numeric expression or String expression.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Oct(System.Object)">
            <summary>
     Returns a string representing the octal value of a number.
 </summary>
            <returns>
     Returns a string representing the octal value of a number.
 </returns>
            <param name="Number">
     Required. Any valid numeric expression or String expression.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Str(System.Object)">
            <summary>
     Returns a String representation of a number.
 </summary>
            <returns>
     Returns a String representation of a number.
 </returns>
            <param name="Number">
     Required. An Object containing any valid numeric expression.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Val(System.String)">
            <summary>
     Returns the numbers contained in a string as a numeric value of appropriate type.
 </summary>
            <returns>
     Returns the numbers contained in a string as a numeric value of appropriate type.
 </returns>
            <param name="InputStr">
     Required. Any valid String expression, Object variable, or Char value. If <paramref name="Expression" /> is of type Object, its value must be convertible to String or an <see cref="T:System.ArgumentException" /> error occurs.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Val(System.Char)">
            <summary>
     Returns the numbers contained in a string as a numeric value of appropriate type.
 </summary>
            <returns>
     Returns the numbers contained in a string as a numeric value of appropriate type.
 </returns>
            <param name="Expression">
     Required. Any valid String expression, Object variable, or Char value. If <paramref name="Expression" /> is of type Object, its value must be convertible to String or an <see cref="T:System.ArgumentException" /> error occurs.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Conversion.Val(System.Object)">
            <summary>
     Returns the numbers contained in a string as a numeric value of appropriate type.
 </summary>
            <returns>
     Returns the numbers contained in a string as a numeric value of appropriate type.
 </returns>
            <param name="Expression">
     Required. Any valid String expression, Object variable, or Char value. If <paramref name="Expression" /> is of type Object, its value must be convertible to String or an <see cref="T:System.ArgumentException" /> error occurs.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)">
            <summary>
 Returns a Date value containing a date and time value to which a specified time interval has been added.
 </summary>
            <returns>
 Returns a Date value containing a date and time value to which a specified time interval has been added.
 </returns>
            <param name="Interval">
 Required. DateInterval enumeration value or String expression representing the time interval you want to add.
 </param>
            <param name="Number">
 Required. Double. Floating-point expression representing the number of intervals you want to add. <paramref name="Number" /> can be positive (to get date/time values in the future) or negative (to get date/time values in the past). It can contain a fractional part when <paramref name="Interval" /> specifies hours, minutes, or seconds. For other values of <paramref name="Interval" />, any fractional part of <paramref name="Number" /> is ignored.
 </param>
            <param name="DateValue">
 Required. Date. An expression representing the date and time to which the interval is to be added. <paramref name="DateValue" /> itself is not changed in the calling program.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
            <summary>
 Returns a Long value specifying the number of time intervals between two Date values.
 </summary>
            <returns>
 Returns a Long value specifying the number of time intervals between two Date values.
 </returns>
            <param name="Interval">
 Required. DateInterval enumeration value or String expression representing the time interval you want to use as the unit of difference between <paramref name="Date1" /> and <paramref name="Date2" />.
 </param>
            <param name="Date1">
 Required. Date. The first date/time value you want to use in the calculation. 
 </param>
            <param name="Date2">
 Required. Date. The second date/time value you want to use in the calculation.
 </param>
            <param name="DayOfWeek">
 Optional. A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week. If not specified, FirstDayOfWeek.Sunday is used.
 </param>
            <param name="WeekOfYear">
 Optional. A value chosen from the FirstWeekOfYear enumeration that specifies the first week of the year. If not specified, FirstWeekOfYear.Jan1 is used.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
            <summary>
 Returns an Integer value containing the specified component of a given Date value.
 </summary>
            <returns>
 Returns an Integer value containing the specified component of a given Date value.
 </returns>
            <param name="Interval">
 Required. DateInterval enumeration value or String expression representing the part of the date/time value you want to return.
 </param>
            <param name="DateValue">
 Required. Date value that you want to evaluate.
 </param>
            <param name="FirstDayOfWeekValue">
 Optional. A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week. If not specified, FirstDayOfWeek.Sunday is used.
 </param>
            <param name="FirstWeekOfYearValue">
 Optional. A value chosen from the FirstWeekOfYear enumeration that specifies the first week of the year. If not specified, FirstWeekOfYear.Jan1 is used.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.DateAndTime.DateAdd(System.String,System.Double,System.Object)">
            <summary>
 Returns a Date value containing a date and time value to which a specified time interval has been added.
 </summary>
            <returns>
 Returns a Date value containing a date and time value to which a specified time interval has been added.
 </returns>
            <param name="Interval">
 Required. DateInterval enumeration value or String expression representing the time interval you want to add.
 </param>
            <param name="Number">
 Required. Double. Floating-point expression representing the number of intervals you want to add. <paramref name="Number" /> can be positive (to get date/time values in the future) or negative (to get date/time values in the past). It can contain a fractional part when <paramref name="Interval" /> specifies hours, minutes, or seconds. For other values of <paramref name="Interval" />, any fractional part of <paramref name="Number" /> is ignored.
 </param>
            <param name="DateValue">
 Required. Date. An expression representing the date and time to which the interval is to be added. <paramref name="DateValue" /> itself is not changed in the calling program.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
            <summary>
 Returns a Long value specifying the number of time intervals between two Date values.
 </summary>
            <returns>
 Returns a Long value specifying the number of time intervals between two Date values.
 </returns>
            <param name="Interval">
 Required. DateInterval enumeration value or String expression representing the time interval you want to use as the unit of difference between <paramref name="Date1" /> and <paramref name="Date2" />.
 </param>
            <param name="Date1">
 Required. Date. The first date/time value you want to use in the calculation. 
 </param>
            <param name="Date2">
 Required. Date. The second date/time value you want to use in the calculation.
 </param>
            <param name="DayOfWeek">
 Optional. A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week. If not specified, FirstDayOfWeek.Sunday is used.
 </param>
            <param name="WeekOfYear">
 Optional. A value chosen from the FirstWeekOfYear enumeration that specifies the first week of the year. If not specified, FirstWeekOfYear.Jan1 is used.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
            <summary>
 Returns an Integer value containing the specified component of a given Date value.
 </summary>
            <returns>
 Returns an Integer value containing the specified component of a given Date value.
 </returns>
            <param name="Interval">
 Required. DateInterval enumeration value or String expression representing the part of the date/time value you want to return.
 </param>
            <param name="DateValue">
 Required. Date value that you want to evaluate.
 </param>
            <param name="DayOfWeek">
 Optional. A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week. If not specified, FirstDayOfWeek.Sunday is used.
 </param>
            <param name="WeekOfYear">
 Optional. A value chosen from the FirstWeekOfYear enumeration that specifies the first week of the year. If not specified, FirstWeekOfYear.Jan1 is used.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)">
            <summary>
 Returns a Date value representing a specified year, month, and day, with the time information set to midnight (00:00:00).
 </summary>
            <returns>
 Returns a Date value representing a specified year, month, and day, with the time information set to midnight (00:00:00).
 </returns>
            <param name="Year">
 Required. Integer expression from 1 through 9999. However, values below this range are also accepted. If <paramref name="Year" /> is 0 through 99, it is interpreted as being between 1930 and 2029, as explained in the "Remarks" section below. If <paramref name="Year" /> is less than 1, it is subtracted from the current year.
 </param>
            <param name="Month">
 Required. Integer expression from 1 through 12. However, values outside this range are also accepted. The value of <paramref name="Month" /> is offset by 1 and applied to January of the calculated year. In other words, (<paramref name="Month" /> - 1) is added to January. The year is recalculated if necessary. The following results illustrate this effect:

 If <paramref name="Month" /> is 1, the result is January of the calculated year.

 If <paramref name="Month" /> is 0, the result is December of the previous year.

 If <paramref name="Month" /> is -1, the result is November of the previous year.

 If <paramref name="Month" /> is 13, the result is January of the following year.
 </param>
            <param name="Day">
 Required. Integer expression from 1 through 31. However, values outside this range are also accepted. The value of <paramref name="Day" /> is offset by 1 and applied to the first day of the calculated month. In other words, (<paramref name="Day" /> - 1) is added to the first of the month. The month and year are recalculated if necessary. The following results illustrate this effect:

 If <paramref name="Day" /> is 1, the result is the first day of the calculated month.

 If <paramref name="Day" /> is 0, the result is the last day of the previous month.

 If <paramref name="Day" /> is -1, the result is the penultimate day of the previous month.

 If <paramref name="Day" /> is past the end of the current month, the result is the appropriate day of the following month. For example, if <paramref name="Month" /> is 4 and <paramref name="Day" /> is 31, the result is May 1.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)">
            <summary>
 Returns a Date value representing a specified hour, minute, and second, with the date information set relative to January 1 of the year 1.
 </summary>
            <returns>
 Returns a Date value representing a specified hour, minute, and second, with the date information set relative to January 1 of the year 1.
 </returns>
            <param name="Hour">
 Required. Integer expression from 0 through 23. However, values outside this range are also accepted.
 </param>
            <param name="Minute">
 Required. Integer expression from 0 through 59. However, values outside this range are also accepted. The value of <paramref name="Minute" /> is added to the calculated hour, so a negative value specifies minutes before that hour.
 </param>
            <param name="Second">
 Required. Integer expression from 0 through 59. However, values outside this range are also accepted. The value of <paramref name="Second" /> is added to the calculated minute, so a negative value specifies seconds before that minute.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.DateAndTime.DateValue(System.String)">
            <summary>
 Returns a Date value containing the date information represented by a string, with the time information set to midnight (00:00:00).
 </summary>
            <returns>
 Returns a Date value containing the date information represented by a string, with the time information set to midnight (00:00:00).
 </returns>
            <param name="StringDate">
 Required. String expression representing a date/time value from 00:00:00 on January 1 of the year 1 through 23:59:59 on December 31, 9999.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.DateAndTime.TimeValue(System.String)">
            <summary>
 Returns a Date value containing the time information represented by a string, with the date information set to January 1 of the year 1.
 </summary>
            <returns>
 Returns a Date value containing the time information represented by a string, with the date information set to January 1 of the year 1.
 </returns>
            <param name="StringTime">
 Required. String expression representing a date/time value from 00:00:00 on January 1 of the year 1 through 23:59:59 on December 31, 9999.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.DateAndTime.Year(System.DateTime)">
            <summary>
 Returns an Integer value from 1 through 9999 representing the year.
 </summary>
            <returns>
 Returns an Integer value from 1 through 9999 representing the year.
 </returns>
            <param name="DateValue">
 Required. Date value from which you want to extract the year.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.DateAndTime.Month(System.DateTime)">
            <summary>
 Returns an Integer value from 1 through 12 representing the month of the year.
 </summary>
            <returns>
 Returns an Integer value from 1 through 12 representing the month of the year.
 </returns>
            <param name="DateValue">
 Required. Date value from which you want to extract the month.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.DateAndTime.Day(System.DateTime)">
            <summary>
 Returns an Integer value from 1 through 31 representing the day of the month.
 </summary>
            <returns>
 Returns an Integer value from 1 through 31 representing the day of the month.
 </returns>
            <param name="DateValue">
 Required. Date value from which you want to extract the day.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.DateAndTime.Hour(System.DateTime)">
            <summary>
 Returns an Integer value from 0 through 23 representing the hour of the day.
 </summary>
            <returns>
 Returns an Integer value from 0 through 23 representing the hour of the day.
 </returns>
            <param name="TimeValue">
 Required. Date value from which you want to extract the hour.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.DateAndTime.Minute(System.DateTime)">
            <summary>
 Returns an Integer value from 0 through 59 representing the minute of the hour.
 </summary>
            <returns>
 Returns an Integer value from 0 through 59 representing the minute of the hour.
 </returns>
            <param name="TimeValue">
 Required. Date value from which you want to extract the minute.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.DateAndTime.Second(System.DateTime)">
            <summary>
 Returns an Integer value from 0 through 59 representing the second of the minute.
 </summary>
            <returns>
 Returns an Integer value from 0 through 59 representing the second of the minute.
 </returns>
            <param name="TimeValue">
 Required. Date value from which you want to extract the second.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)">
            <summary>
 Returns an Integer value containing a number representing the day of the week.
 </summary>
            <returns>
 Returns an Integer value containing a number representing the day of the week.
 </returns>
            <param name="DateValue">
 Required. Date value for which you want to determine the day of the week.
 </param>
            <param name="DayOfWeek">
 Optional. A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week. If not specified, FirstDayOfWeek.Sunday is used.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.DateAndTime.MonthName(System.Int32,System.Boolean)">
            <summary>
 Returns a String value containing the name of the specified month.
 </summary>
            <returns>
 Returns a String value containing the name of the specified month.
 </returns>
            <param name="Month">
 Required. Integer. The numeric designation of the month, from 1 through 13; 1 indicates January and 12 indicates December. You can use the value 13 with a 13-month calendar. If your system is using a 12-month calendar and <paramref name="Month" /> is 13, MonthName returns an empty string.
 </param>
            <param name="Abbreviate">
 Optional. Boolean value that indicates if the month name is to be abbreviated. If omitted, the default is False, which means the month name is not abbreviated.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)">
            <summary>
 Returns a String value containing the name of the specified weekday.
 </summary>
            <returns>
 Returns a String value containing the name of the specified weekday.
 </returns>
            <param name="Weekday">
 Required. Integer. The numeric designation for the weekday, from 1 through 7; 1 indicates the first day of the week and 7 indicates the last day of the week. The identities of the first and last days depend on the setting of <paramref name="FirstDayOfWeekValue" />.
 </param>
            <param name="Abbreviate">
 Optional. Boolean value that indicates if the weekday name is to be abbreviated. If omitted, the default is False, which means the weekday name is not abbreviated.
 </param>
            <param name="FirstDayOfWeekValue">
 Optional. A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week. If not specified, FirstDayOfWeek.System is used.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.ChDir(System.String)">
            <summary>
 Changes the current directory or folder. The My feature gives you better productivity and performance in file I/O operations than the ChDir function. For more information, see My.Computer.FileSystem.CurrentDirectory Property.
 </summary>
            <param name="Path">
 Required. A String expression that identifies which directory or folder becomes the new default directory or folder. <paramref name="Path" /> may include the drive. If no drive is specified, ChDir changes the default directory or folder on the current drive. 
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.ChDrive(System.Char)">
            <summary>
 Changes the current drive.
 </summary>
            <param name="Drive">
 Required. String expression that specifies an existing drive. If you supply a zero-length string (""), the current drive does not change. If the <paramref name="Drive" /> argument is a multiple-character string, ChDrive uses only the first letter.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.ChDrive(System.String)">
            <summary>
 Changes the current drive.
 </summary>
            <param name="Drive">
 Required. String expression that specifies an existing drive. If you supply a zero-length string (""), the current drive does not change. If the <paramref name="Drive" /> argument is a multiple-character string, ChDrive uses only the first letter.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.CurDir">
            <summary>
 Returns a string representing the current path. The My.Computer.FileSystem Object gives you better productivity and performance in file I/O operations than CurDir. For more information, see My.Computer.FileSystem.CurrentDirectory Property.
 </summary>
            <returns>
 Returns a string representing the current path. The My.Computer.FileSystem Object gives you better productivity and performance in file I/O operations than CurDir. For more information, see My.Computer.FileSystem.CurrentDirectory Property.
 </returns>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.CurDir(System.Char)">
            <summary>
 Returns a string representing the current path. The My.Computer.FileSystem Object gives you better productivity and performance in file I/O operations than CurDir. For more information, see My.Computer.FileSystem.CurrentDirectory Property.
 </summary>
            <returns>
 Returns a string representing the current path. The My.Computer.FileSystem Object gives you better productivity and performance in file I/O operations than CurDir. For more information, see My.Computer.FileSystem.CurrentDirectory Property.
 </returns>
            <param name="Drive">
 Optional. Char expression that specifies an existing drive. If no drive is specified, or if <paramref name="Drive" /> is a zero-length string (""), CurDir returns the path for the current drive.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Dir">
            <summary>
 Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive. The My.Computer.FileSystem Object gives you better productivity and performance in file I/O operations than the Dir function. See My.Computer.FileSystem.GetDirectoryInfo Method for more information.
 </summary>
            <returns>
 Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive. The My.Computer.FileSystem Object gives you better productivity and performance in file I/O operations than the Dir function. See My.Computer.FileSystem.GetDirectoryInfo Method for more information.
 </returns>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)">
            <summary>
 Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive. The My.Computer.FileSystem Object gives you better productivity and performance in file I/O operations than the Dir function. See My.Computer.FileSystem.GetDirectoryInfo Method for more information.
 </summary>
            <returns>
 Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive. The My.Computer.FileSystem Object gives you better productivity and performance in file I/O operations than the Dir function. See My.Computer.FileSystem.GetDirectoryInfo Method for more information.
 </returns>
            <param name="PathName">
 Optional. String expression that specifies a file name, directory or folder name, or drive volume label. A zero-length string ("") is returned if <paramref name="PathName" /> is not found. 
 </param>
            <param name="Attributes">
 Optional. Enumeration or numeric expression whose value specifies file attributes. If omitted, Dir returns files that match <paramref name="PathName" /> but have no attributes.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.MkDir(System.String)">
            <summary>
 Creates a new directory. The My feature gives you better productivity and performance in file I/O operations than MkDir. For more information, see My.Computer.FileSystem.CreateDirectory Method.
 </summary>
            <param name="Path">
 Required. String expression that identifies the directory to be created. The <paramref name="Path" /> may include the drive. If no drive is specified, MkDir creates the new directory on the current drive.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.RmDir(System.String)">
            <summary>
 Removes an existing directory. The My feature gives you better productivity and performance in file I/O operations than RmDir. For more information, see My.Computer.FileSystem.DeleteDirectory Method.
 </summary>
            <param name="Path">
 Required. String expression that identifies the directory or folder to be removed. <paramref name="Path" /> can include the drive. If no drive is specified, RmDir removes the directory on the current drive.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FileCopy(System.String,System.String)">
            <summary>
 Copies a file. The My.Computer.FileSystem Object gives you better productivity and performance in file I/O operations than FileCopy. See My.Computer.FileSystem.CopyFile Method for more information.
 </summary>
            <param name="Source">
 Required. String expression that specifies the name of the file to be copied. <paramref name="Source" /> may include the directory or folder, and drive, of the source file.
 </param>
            <param name="Destination">
 Required. String expression that specifies the destination file name. <paramref name="Destination" /> may include the directory or folder, and drive, of the destination file.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FileDateTime(System.String)">
            <summary>
 Returns a Date value that indicates the date and time a file was created or last modified. The My feature gives you better productivity and performance in file I/O operations than FileDateTime. For more information, see My.Computer.FileSystem.GetFileInfo Method.
 </summary>
            <returns>
 Returns a Date value that indicates the date and time a file was created or last modified. The My feature gives you better productivity and performance in file I/O operations than FileDateTime. For more information, see My.Computer.FileSystem.GetFileInfo Method.
 </returns>
            <param name="PathName">
 Required. String expression that specifies a file name. <paramref name="PathName" /> may include the directory or folder, and the drive.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FileLen(System.String)">
            <summary>
 Returns a Long value that specifies the length of a file in bytes. The My feature gives you better productivity and performance in file I/O operations than FileLen. For more information, see My.Computer.FileSystem.GetFileInfo Method.
 </summary>
            <returns>
 Returns a Long value that specifies the length of a file in bytes. The My feature gives you better productivity and performance in file I/O operations than FileLen. For more information, see My.Computer.FileSystem.GetFileInfo Method.
 </returns>
            <param name="PathName">
 Required. String expression that specifies a file. <paramref name="PathName" /> may include the directory or folder, and the drive.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.GetAttr(System.String)">
            <summary>
 Returns a FileAttribute value that represents the attributes of a file, directory, or folder. The My feature gives you better productivity and performance in file I/O operations than FileAttribute. For more information, see My.Computer.FileSystem Object.
 </summary>
            <returns>
 Value Normal, Constant vbNormal, Description normal. Value ReadOnly, Constant vbReadOnly, Description read-only. Value Hidden, Constant vbHidden, Description hidden. Value System, Constant vbSystem, Description system file. Value Directory, Constant vbDirectory, Description directory or folder. Value Archive, Constant vbArchive, Description file has changed since last backup. Value Alias, Constant vbAlias, Description file has a different name.
 </returns>
            <param name="PathName">
 Required. String expression that specifies a file, directory, or folder name. <paramref name="PathName" /> can include the directory or folder, and the drive.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Kill(System.String)">
            <summary>
 Deletes files from a disk. The My feature gives you better productivity and performance in file I/O operations than Kill. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="PathName">
 Required. String expression that specifies one or more file names to be deleted. <paramref name="PathName" /> can include the directory or folder, and the drive.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)">
            <summary>
 Sets attribute information for a file. The My feature gives you better productivity and performance in file I/O operations than SetAttr. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="PathName">
 Required. String expression that specifies a file name. <paramref name="PathName" /> can include directory or folder, and drive.
 </param>
            <param name="Attributes">
 Required. Constant or numeric expression, whose sum specifies file attributes.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)">
            <summary>
 Opens a file for input or output. The My feature gives you better productivity and performance in file I/O operations than FileOpen. For more information, see My.Computer.FileSystem Object. 
 </summary>
            <param name="FileNumber">
 Required. Any valid file number. Use the FreeFile function to obtain the next available file number.
 </param>
            <param name="FileName">
 Required. String expression that specifies a file name—may include directory or folder, and drive.
 </param>
            <param name="Mode">
 Required. Enumeration specifying the file mode: Append, Binary, Input, Output, or Random. (For more information, see OpenMode Enumeration.)
 </param>
            <param name="Access">
 Optional. Enumeration specifying the operations permitted on the open file: Read, Write, or ReadWrite. Defaults to ReadWrite. (For more information, see OpenAccess Enumeration.)
 </param>
            <param name="Share">
 Optional. Enumeration specifying the operations not permitted on the open file by other processes: Shared, Lock Read, Lock Write, and Lock Read Write. Defaults to Lock Read Write. (For more information, see OpenShare Enumeration.)
 </param>
            <param name="RecordLength">
 Optional. Number less than or equal to 32,767 (bytes). For files opened for random access, this value is the record length. For sequential files, this value is the number of characters buffered.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FileClose(System.Int32[])">
            <summary>
 Concludes input/output (I/O) to a file opened using the FileOpen function. My gives you better productivity and performance in file I/O operations. See My.Computer.FileSystem Object for more information.
 </summary>
            <param name="FileNumbers">
 Optional. Parameter array of 0 or more channels to be closed. 
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)">
            <summary>
 Reads data from an open disk file into a variable.  The My feature gives you better productivity and performance in file I/O operations than FileGetObject. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name into which data is read.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which reading starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)">
            <summary>
 Reads data from an open disk file into a variable. The My feature gives you better productivity and performance in file I/O operations than FileGet. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name into which data is read.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which reading starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)">
            <summary>
 Reads data from an open disk file into a variable. The My feature gives you better productivity and performance in file I/O operations than FileGet. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name into which data is read.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which reading starts.
 </param>
            <param name="ArrayIsDynamic">
 Optional. Applies only when writing an array. Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.
 </param>
            <param name="StringIsFixedLength">
 Optional. Applies only when writing a string. Specifies whether to write a two-byte descriptor for the string that describes the length. The default is False.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)">
            <summary>
 Reads data from an open disk file into a variable. The My feature gives you better productivity and performance in file I/O operations than FileGet. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name into which data is read.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which reading starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)">
            <summary>
 Reads data from an open disk file into a variable. The My feature gives you better productivity and performance in file I/O operations than FileGet. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name into which data is read.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which reading starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)">
            <summary>
 Reads data from an open disk file into a variable. The My feature gives you better productivity and performance in file I/O operations than FileGet. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name into which data is read.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which reading starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)">
            <summary>
 Reads data from an open disk file into a variable. The My feature gives you better productivity and performance in file I/O operations than FileGet. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name into which data is read.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which reading starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)">
            <summary>
 Reads data from an open disk file into a variable. The My feature gives you better productivity and performance in file I/O operations than FileGet. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name into which data is read.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which reading starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)">
            <summary>
 Reads data from an open disk file into a variable. The My feature gives you better productivity and performance in file I/O operations than FileGet. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name into which data is read.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which reading starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)">
            <summary>
 Reads data from an open disk file into a variable. The My feature gives you better productivity and performance in file I/O operations than FileGet. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name into which data is read.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which reading starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)">
            <summary>
 Reads data from an open disk file into a variable. The My feature gives you better productivity and performance in file I/O operations than FileGet. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name into which data is read.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which reading starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)">
            <summary>
 Reads data from an open disk file into a variable. The My feature gives you better productivity and performance in file I/O operations than FileGet. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name into which data is read.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which reading starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)">
            <summary>
 Reads data from an open disk file into a variable. The My feature gives you better productivity and performance in file I/O operations than FileGet. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name into which data is read.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which reading starts.
 </param>
            <param name="StringIsFixedLength">
 Optional. Applies only when writing a string. Specifies whether to write a two-byte descriptor for the string that describes the length. The default is False.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)">
            <summary>
 Reads data from an open disk file into a variable. The My feature gives you better productivity and performance in file I/O operations than FileGet. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name into which data is read.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which reading starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)">
            <summary>
 Writes data from a variable to a disk file.  The My feature gives you better productivity and performance in file I/O operations than FilePutObject. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name that contains data written to disk.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which writing starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FilePut(System.Object,System.Object,System.Object)">
            <summary>
 Writes data from a variable to a disk file. The My feature gives you better productivity and performance in file I/O operations than FilePut. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name that contains data written to disk.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which writing starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)">
            <summary>
 Writes data from a variable to a disk file. The My feature gives you better productivity and performance in file I/O operations than FilePut. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name that contains data written to disk.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which writing starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)">
            <summary>
 Writes data from a variable to a disk file. The My feature gives you better productivity and performance in file I/O operations than FilePut. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name that contains data written to disk.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which writing starts.
 </param>
            <param name="ArrayIsDynamic">
 Optional. Applies only when writing an array. Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length. 
 </param>
            <param name="StringIsFixedLength">
 Optional. Applies only when writing a string. Specifies whether to write a two-byte string length descriptor for the string to the file. The default is False.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)">
            <summary>
 Writes data from a variable to a disk file. The My feature gives you better productivity and performance in file I/O operations than FilePut. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name that contains data written to disk.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which writing starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)">
            <summary>
 Writes data from a variable to a disk file. The My feature gives you better productivity and performance in file I/O operations than FilePut. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name that contains data written to disk.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which writing starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)">
            <summary>
 Writes data from a variable to a disk file. The My feature gives you better productivity and performance in file I/O operations than FilePut. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name that contains data written to disk.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which writing starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)">
            <summary>
 Writes data from a variable to a disk file. The My feature gives you better productivity and performance in file I/O operations than FilePut. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name that contains data written to disk.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which writing starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)">
            <summary>
 Writes data from a variable to a disk file. The My feature gives you better productivity and performance in file I/O operations than FilePut. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name that contains data written to disk.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which writing starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FilePut(System.Int32,System.Char,System.Int64)">
            <summary>
 Writes data from a variable to a disk file. The My feature gives you better productivity and performance in file I/O operations than FilePut. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name that contains data written to disk.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which writing starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FilePut(System.Int32,System.Single,System.Int64)">
            <summary>
 Writes data from a variable to a disk file. The My feature gives you better productivity and performance in file I/O operations than FilePut. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name that contains data written to disk.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which writing starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FilePut(System.Int32,System.Double,System.Int64)">
            <summary>
 Writes data from a variable to a disk file. The My feature gives you better productivity and performance in file I/O operations than FilePut. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name that contains data written to disk.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which writing starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)">
            <summary>
 Writes data from a variable to a disk file. The My feature gives you better productivity and performance in file I/O operations than FilePut. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name that contains data written to disk.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which writing starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)">
            <summary>
 Writes data from a variable to a disk file. The My feature gives you better productivity and performance in file I/O operations than FilePut. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name that contains data written to disk.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which writing starts.
 </param>
            <param name="StringIsFixedLength">
 Optional. Applies only when writing a string. Specifies whether to write a two-byte string length descriptor for the string to the file. The default is False.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)">
            <summary>
 Writes data from a variable to a disk file. The My feature gives you better productivity and performance in file I/O operations than FilePut. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Valid variable name that contains data written to disk.
 </param>
            <param name="RecordNumber">
 Optional. Record number (Random mode files) or byte number (Binary mode files) at which writing starts.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Print(System.Int32,System.Object[])">
            <summary>
 Writes display-formatted data to a sequential file.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Output">
 Optional. Zero or more comma-delimited expressions to write to a file.
 
 The <paramref name="Output" /> argument settings are: 
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.PrintLine(System.Int32,System.Object[])">
            <summary>
 Writes display-formatted data to a sequential file.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Output">
 Optional. Zero or more comma-delimited expressions to write to a file.
 
 The <paramref name="Output" /> argument settings are: 
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Input(System.Int32,System.Object@)">
            <summary>
 Reads data from an open sequential file and assigns the data to variables.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Variable that is assigned the values read from the file—cannot be an array or object variable.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Input(System.Int32,System.Boolean@)">
            <summary>
 Reads data from an open sequential file and assigns the data to variables.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Variable that is assigned the values read from the file—cannot be an array or object variable.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Input(System.Int32,System.Byte@)">
            <summary>
 Reads data from an open sequential file and assigns the data to variables.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Variable that is assigned the values read from the file—cannot be an array or object variable.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Input(System.Int32,System.Int16@)">
            <summary>
 Reads data from an open sequential file and assigns the data to variables.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Variable that is assigned the values read from the file—cannot be an array or object variable.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Input(System.Int32,System.Int32@)">
            <summary>
 Reads data from an open sequential file and assigns the data to variables.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Variable that is assigned the values read from the file—cannot be an array or object variable.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Input(System.Int32,System.Int64@)">
            <summary>
 Reads data from an open sequential file and assigns the data to variables.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Variable that is assigned the values read from the file—cannot be an array or object variable.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Input(System.Int32,System.Char@)">
            <summary>
 Reads data from an open sequential file and assigns the data to variables.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Variable that is assigned the values read from the file—cannot be an array or object variable.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Input(System.Int32,System.Single@)">
            <summary>
 Reads data from an open sequential file and assigns the data to variables.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Variable that is assigned the values read from the file—cannot be an array or object variable.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Input(System.Int32,System.Double@)">
            <summary>
 Reads data from an open sequential file and assigns the data to variables.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Variable that is assigned the values read from the file—cannot be an array or object variable.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Input(System.Int32,System.Decimal@)">
            <summary>
 Reads data from an open sequential file and assigns the data to variables.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Variable that is assigned the values read from the file—cannot be an array or object variable.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Input(System.Int32,System.String@)">
            <summary>
 Reads data from an open sequential file and assigns the data to variables.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Variable that is assigned the values read from the file—cannot be an array or object variable.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Input(System.Int32,System.DateTime@)">
            <summary>
 Reads data from an open sequential file and assigns the data to variables.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Value">
 Required. Variable that is assigned the values read from the file—cannot be an array or object variable.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Write(System.Int32,System.Object[])">
            <summary>
 Writes data to a sequential file. Data written with Write is usually read from a file by using Input.
 </summary>
            <param name="FileNumber">
 Required. An Integer expression that contains any valid file number.
 </param>
            <param name="Output">
 Optional. One or more comma-delimited expressions to write to a file.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.WriteLine(System.Int32,System.Object[])">
            <summary>
 Writes data to a sequential file. Data written with Write is usually read from a file by using Input.
 </summary>
            <param name="FileNumber">
 Required. An Integer expression that contains any valid file number.
 </param>
            <param name="Output">
 Optional. One or more comma-delimited expressions to write to a file.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.InputString(System.Int32,System.Int32)">
            <summary>
 Returns String value that contains characters from a file opened in Input or Binary mode. The My feature gives you better productivity and performance in file I/O operations than InputString. For more information, see My.Computer.FileSystem Object.
 </summary>
            <returns>
 Returns String value that contains characters from a file opened in Input or Binary mode. The My feature gives you better productivity and performance in file I/O operations than InputString. For more information, see My.Computer.FileSystem Object.
 </returns>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="CharCount">
 Required. Any valid numeric expression specifying the number of characters to read.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.LineInput(System.Int32)">
            <summary>
 Reads a single line from an open sequential file and assigns it to a String variable.
 </summary>
            <returns>
 Reads a single line from an open sequential file and assigns it to a String variable.
 </returns>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Lock(System.Int32)">
            <summary>
 Controls access by other processes to all or part of a file opened by using the Open function. The My feature gives you better productivity and performance in file I/O operations than Lock and Unlock. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Lock(System.Int32,System.Int64)">
            <summary>
 Controls access by other processes to all or part of a file opened by using the Open function. The My feature gives you better productivity and performance in file I/O operations than Lock and Unlock. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Record">
 Optional. Number of the only record or byte to lock or unlock
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Lock(System.Int32,System.Int64,System.Int64)">
            <summary>
 Controls access by other processes to all or part of a file opened by using the Open function. The My feature gives you better productivity and performance in file I/O operations than Lock and Unlock. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="FromRecord">
 Optional. Number of the first record or byte to lock or unlock.
 </param>
            <param name="ToRecord">
 Optional. Number of the last record or byte to lock or unlock.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Unlock(System.Int32)">
            <summary>
 Controls access by other processes to all or part of a file opened by using the Open function. The My feature gives you better productivity and performance in file I/O operations than Lock and Unlock. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Unlock(System.Int32,System.Int64)">
            <summary>
 Controls access by other processes to all or part of a file opened by using the Open function. The My feature gives you better productivity and performance in file I/O operations than Lock and Unlock. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="Record">
 Optional. Number of the only record or byte to lock or unlock
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)">
            <summary>
 Controls access by other processes to all or part of a file opened by using the Open function. The My feature gives you better productivity and performance in file I/O operations than Lock and Unlock. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="FromRecord">
 Optional. Number of the first record or byte to lock or unlock.
 </param>
            <param name="ToRecord">
 Optional. Number of the last record or byte to lock or unlock.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FileWidth(System.Int32,System.Int32)">
            <summary>
 Assigns an output line width to a file opened by using the FileOpen function.
 </summary>
            <param name="FileNumber">
 Required. Any valid file number.
 </param>
            <param name="RecordWidth">
 Required. Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started. If <paramref name="RecordWidth" /> equals 0, there is no limit to the length of a line. The default value for <paramref name="RecordWidth" /> is 0.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FreeFile">
            <summary>
 Returns an Integer value that represents the next file number available for use by the FileOpen function.
 </summary>
            <returns>
 Returns an Integer value that represents the next file number available for use by the FileOpen function.
 </returns>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Seek(System.Int32,System.Int64)">
            <summary>
 Returns a Long specifying the current read/write position in a file opened by using the FileOpen function, or sets the position for the next read/write operation in a file opened by using the FileOpen function. The My feature gives you better productivity and performance in file I/O operations than Seek. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="FileNumber">
 Required. An Integer that contains a valid file number.
 </param>
            <param name="Position">
 Required. Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Seek(System.Int32)">
            <summary>
 Returns a Long specifying the current read/write position in a file opened by using the FileOpen function, or sets the position for the next read/write operation in a file opened by using the FileOpen function. The My feature gives you better productivity and performance in file I/O operations than Seek. For more information, see My.Computer.FileSystem Object.
 </summary>
            <returns>
 Returns a Long specifying the current read/write position in a file opened by using the FileOpen function, or sets the position for the next read/write operation in a file opened by using the FileOpen function. The My feature gives you better productivity and performance in file I/O operations than Seek. For more information, see My.Computer.FileSystem Object.
 </returns>
            <param name="FileNumber">
 Required. An Integer that contains a valid file number.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.EOF(System.Int32)">
            <summary>
 Returns a Boolean value True when the end of a file opened for Random or sequential Input has been reached.
 </summary>
            <returns>
 Returns a Boolean value True when the end of a file opened for Random or sequential Input has been reached.
 </returns>
            <param name="FileNumber">
 Required. An Integer that contains any valid file number.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Loc(System.Int32)">
            <summary>
 Returns a Long value that specifies the current read/write position in an open file.
 </summary>
            <returns>
 Returns a Long value that specifies the current read/write position in an open file.
 </returns>
            <param name="FileNumber">
 Required. Any valid Integer file number.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.LOF(System.Int32)">
            <summary>
 Returns a Long representing the size, in bytes, of a file opened by using the FileOpen function. The My feature gives you better productivity and performance in file I/O operations than LOF. For more information, see My.Computer.FileSystem Object.
 </summary>
            <returns>
 Returns a Long representing the size, in bytes, of a file opened by using the FileOpen function. The My feature gives you better productivity and performance in file I/O operations than LOF. For more information, see My.Computer.FileSystem Object.
 </returns>
            <param name="FileNumber">
 Required. An Integer that contains a valid file number.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.TAB">
            <summary>
 Used with the Print or PrintLine functions to position output.
 </summary>
            <returns>
 Used with the Print or PrintLine functions to position output.
 </returns>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.TAB(System.Int16)">
            <summary>
 Used with the Print or PrintLine functions to position output.
 </summary>
            <returns>
 Used with the Print or PrintLine functions to position output.
 </returns>
            <param name="Column">
 Optional. The column number moved to before displaying or printing the next expression in a list. If omitted, TAB moves the insertion point to the start of the next print zone. 
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.SPC(System.Int16)">
            <summary>
 Used with the Print or PrintLine function to position output.
 </summary>
            <returns>
 Used with the Print or PrintLine function to position output.
 </returns>
            <param name="Count">
 Required. The number of spaces to insert before displaying or printing the next expression in a list.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.FileAttr(System.Int32)">
            <summary>
 Returns an enumeration representing the file mode for files opened using the FileOpen function. The My.Computer.FileSystem Object gives you better productivity and performance in file I/O operations than the FileAttr function. See My.Computer.FileSystem.GetFileInfo Method for more information.
 </summary>
            <returns>
 Value 1, Mode OpenMode.Input. Value 2, Mode OpenMode.Output. Value 4, Mode OpenMode.Random. Value 8, Mode OpenMode.Append. Value 32, Mode OpenMode.Binary. </returns>
            <param name="FileNumber">
 Required. Integer. Any valid file number.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Reset">
            <summary>
 Closes all disk files opened by using the FileOpen function. The My feature gives you better productivity and performance in file I/O operations than Reset. For more information, see My.Computer.FileSystem Object.
 </summary>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.FileSystem.Rename(System.String,System.String)">
            <summary>
 Renames a disk file or directory. The My feature gives you better productivity and performance in file I/O operations than Rename. For more information, see My.Computer.FileSystem Object.
 </summary>
            <param name="OldPath">
 Required. String expression that specifies the existing file name and location. <paramref name="OldPath" /> may include the directory, and drive, of the file.
 </param>
            <param name="NewPath">
 Required. String expression that specifies the new file name and location. <paramref name="NewPath" /> may include directory and drive of the destination location. The file name specified by <paramref name="NewPath" /> cannot already exist.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
 Returns a Double specifying the depreciation of an asset for a specific time period using the double-declining balance method or some other method you specify.
 </summary>
            <returns>
 Returns a Double specifying the depreciation of an asset for a specific time period using the double-declining balance method or some other method you specify.
 </returns>
            <param name="Cost">
 Required. Double specifying initial cost of the asset.
 </param>
            <param name="Salvage">
 Required. Double specifying value of the asset at the end of its useful life.
 </param>
            <param name="Life">
 Required. Double specifying length of useful life of the asset.
 </param>
            <param name="Period">
 Required. Double specifying period for which asset depreciation is calculated.
 </param>
            <param name="Factor">
 Optional. Double specifying rate at which the balance declines. If omitted, 2 (double-declining method) is assumed.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
            <summary>
 Returns a Double specifying the future value of an annuity based on periodic, fixed payments and a fixed interest rate.
 </summary>
            <returns>
 Returns a Double specifying the future value of an annuity based on periodic, fixed payments and a fixed interest rate.
 </returns>
            <param name="Rate">
 Required. Double specifying interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.
 </param>
            <param name="NPer">
 Required. Double specifying total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 x 12 (or 48) payment periods.
 </param>
            <param name="Pmt">
 Required. Double specifying payment to be made each period. Payments usually contain principal and interest that doesn't change over the life of the annuity.
 </param>
            <param name="PV">
 Optional. Double specifying present value (or lump sum) of a series of future payments. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make. If omitted, 0 is assumed.
 </param>
            <param name="Due">
 Optional. Object of type DueDate Enumeration that specifies when payments are due. This argument must be either DueDate.EndOfPeriod if payments are due at the end of the payment period, or DueDate.BegOfPeriod if payments are due at the beginning of the period. If omitted, DueDate.EndOfPeriod is assumed.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
            <summary>
 Returns a Double specifying the interest payment for a given period of an annuity based on periodic, fixed payments and a fixed interest rate.
 </summary>
            <returns>
 Returns a Double specifying the interest payment for a given period of an annuity based on periodic, fixed payments and a fixed interest rate.
 </returns>
            <param name="Rate">
 Required. Double specifying interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.
 </param>
            <param name="Per">
 Required. Double specifying payment period in the range 1 through <paramref name="NPer" />.
 </param>
            <param name="NPer">
 Required. Double specifying total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 x 12 (or 48) payment periods.
 </param>
            <param name="PV">
 Required. Double specifying present value, or value today, of a series of future payments or receipts. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.
 </param>
            <param name="FV">
 Optional. Double specifying future value or cash balance you want after you've made the final payment. For example, the future value of a loan is $0 because that's its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.
 </param>
            <param name="Due">
 Optional. Object of type DueDate Enumeration that specifies when payments are due. This argument must be either DueDate.EndOfPeriod if payments are due at the end of the payment period, or DueDate.BegOfPeriod if payments are due at the beginning of the period. If omitted, DueDate.EndOfPeriod is assumed.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Financial.IRR(System.Double[]@,System.Double)">
            <summary>
 Returns a Double specifying the internal rate of return for a series of periodic cash flows (payments and receipts).
 </summary>
            <returns>
 Returns a Double specifying the internal rate of return for a series of periodic cash flows (payments and receipts).
 </returns>
            <param name="ValueArray">
 Required. Array of Double specifying cash flow values. The array must contain at least one negative value (a payment) and one positive value (a receipt).
 </param>
            <param name="Guess">
 Optional. Object specifying value you estimate will be returned by IRR. If omitted, <paramref name="Guess" /> is 0.1 (10 percent).
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Financial.MIRR(System.Double[]@,System.Double,System.Double)">
            <summary>
 Returns a Double specifying the modified internal rate of return for a series of periodic cash flows (payments and receipts).
 </summary>
            <returns>
 Returns a Double specifying the modified internal rate of return for a series of periodic cash flows (payments and receipts).
 </returns>
            <param name="ValueArray">
 Required. Array of Double specifying cash-flow values. The array must contain at least one negative value (a payment) and one positive value (a receipt).
 </param>
            <param name="FinanceRate">
 Required. Double specifying interest rate paid as the cost of financing.
 </param>
            <param name="ReinvestRate">
 Required. Double specifying interest rate received on gains from cash reinvestment.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
            <summary>
 Returns a Double specifying the number of periods for an annuity based on periodic fixed payments and a fixed interest rate.
 </summary>
            <returns>
 Returns a Double specifying the number of periods for an annuity based on periodic fixed payments and a fixed interest rate.
 </returns>
            <param name="Rate">
 Required. Double specifying interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.
 </param>
            <param name="Pmt">
 Required. Double specifying payment to be made each period. Payments usually contain principal and interest that does not change over the life of the annuity.
 </param>
            <param name="PV">
 Required. Double specifying present value, or value today, of a series of future payments or receipts. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.
 </param>
            <param name="FV">
 Optional. Double specifying future value or cash balance you want after you have made the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.
 </param>
            <param name="Due">
 Optional. Object of type DueDate Enumeration that specifies when payments are due. This argument must be either DueDate.EndOfPeriod if payments are due at the end of the payment period, or DueDate.BegOfPeriod if payments are due at the beginning of the period. If omitted, DueDate.EndOfPeriod is assumed.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Financial.NPV(System.Double,System.Double[]@)">
            <summary>
 Returns a Double specifying the net present value of an investment based on a series of periodic cash flows (payments and receipts) and a discount rate.
 </summary>
            <returns>
 Returns a Double specifying the net present value of an investment based on a series of periodic cash flows (payments and receipts) and a discount rate.
 </returns>
            <param name="Rate">
 Required. Double specifying discount rate over the length of the period, expressed as a decimal.
 </param>
            <param name="ValueArray">
 Required. Array of Double specifying cash flow values. The array must contain at least one negative value (a payment) and one positive value (a receipt).
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
            <summary>
 Returns a Double specifying the payment for an annuity based on periodic, fixed payments and a fixed interest rate.
 </summary>
            <returns>
 Returns a Double specifying the payment for an annuity based on periodic, fixed payments and a fixed interest rate.
 </returns>
            <param name="Rate">
 Required. Double specifies the interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.
 </param>
            <param name="NPer">
 Required. Double specifies the total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 × 12 (or 48) payment periods.
 </param>
            <param name="PV">
 Required. Double specifies the present value (or lump sum) that a series of payments to be paid in the future is worth now. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.
 </param>
            <param name="FV">
 Optional. Double specifying future value or cash balance you want after you have made the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 during 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.
 </param>
            <param name="Due">
 Optional. Object of type DueDate Enumeration that specifies when payments are due. This argument must be either DueDate.EndOfPeriod if payments are due at the end of the payment period, or DueDate.BegOfPeriod if payments are due at the beginning of the period. If omitted, DueDate.EndOfPeriod is assumed.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
            <summary>
 Returns a Double specifying the principal payment for a given period of an annuity based on periodic fixed payments and a fixed interest rate.
 </summary>
            <returns>
 Returns a Double specifying the principal payment for a given period of an annuity based on periodic fixed payments and a fixed interest rate.
 </returns>
            <param name="Rate">
 Required. Double specifies the interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.
 </param>
            <param name="Per">
 Required. Double specifies the payment period in the range 1 through <paramref name="NPer" />.
 </param>
            <param name="NPer">
 Required. Double specifies the total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 x 12 (or 48) payment periods.
 </param>
            <param name="PV">
 Required. Double specifies the current value of a series of future payments or receipts. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.
 </param>
            <param name="FV">
 Optional. Double specifying future value or cash balance you want after you have made the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.
 </param>
            <param name="Due">
 Optional. Object of type DueDate Enumeration that specifies when payments are due. This argument must be either DueDate.EndOfPeriod if payments are due at the end of the payment period, or DueDate.BegOfPeriod if payments are due at the beginning of the period. If omitted, DueDate.EndOfPeriod is assumed.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
            <summary>
 Returns a Double specifying the present value of an annuity based on periodic, fixed payments to be paid in the future and a fixed interest rate.
 </summary>
            <returns>
 Returns a Double specifying the present value of an annuity based on periodic, fixed payments to be paid in the future and a fixed interest rate.
 </returns>
            <param name="Rate">
 Required. Double specifies the interest rate per period. For example, if you get a car loan at an annual percentage rate (APR) of 10 percent and make monthly payments, the rate per period is 0.1/12, or 0.0083.
 </param>
            <param name="NPer">
 Required. Double specifies the total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has 4 x 12 (or 48) payment periods.
 </param>
            <param name="Pmt">
 Required. Double specifies the payment to be made each period. Payments usually contain principal and interest that does not change during the life of the annuity.
 </param>
            <param name="FV">
 Optional. Double specifies the future value or cash balance you want after you make the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.
 </param>
            <param name="Due">
 Optional. Object of type DueDate Enumeration that specifies when payments are due. This argument must be either DueDate.EndOfPeriod if payments are due at the end of the payment period, or DueDate.BegOfPeriod if payments are due at the beginning of the period. If omitted, DueDate.EndOfPeriod is assumed.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)">
            <summary>
 Returns a Double specifying the interest rate per period for an annuity.
 </summary>
            <returns>
 Returns a Double specifying the interest rate per period for an annuity.
 </returns>
            <param name="NPer">
 Required. Double specifies the total number of payment periods in the annuity. For example, if you make monthly payments on a four-year car loan, your loan has a total of 4 * 12 (or 48) payment periods.
 </param>
            <param name="Pmt">
 Required. Double specifies the payment to be made each period. Payments usually contain principal and interest that doesn't change over the life of the annuity.
 </param>
            <param name="PV">
 Required. Double specifies the present value, or value today, of a series of future payments or receipts. For example, when you borrow money to buy a car, the loan amount is the present value to the lender of the monthly car payments you will make.
 </param>
            <param name="FV">
 Optional. Double specifies the future value or cash balance you want after you make the final payment. For example, the future value of a loan is $0 because that is its value after the final payment. However, if you want to save $50,000 over 18 years for your child's education, then $50,000 is the future value. If omitted, 0 is assumed.
 </param>
            <param name="Due">
 Optional. Object of type DueDate Enumeration that specifies when payments are due. This argument must be either DueDate.EndOfPeriod if payments are due at the end of the payment period, or DueDate.BegOfPeriod if payments are due at the beginning of the period. If omitted, DueDate.EndOfPeriod is assumed.
 </param>
            <param name="Guess">
 Optional. Double specifying value you estimate is returned by Rate. If omitted, <paramref name="Guess" /> is 0.1 (10 percent).
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Financial.SLN(System.Double,System.Double,System.Double)">
            <summary>
 Returns a Double specifying the straight-line depreciation of an asset for a single period.
 </summary>
            <returns>
 Returns a Double specifying the straight-line depreciation of an asset for a single period.
 </returns>
            <param name="Cost">
 Required. Double specifying initial cost of the asset.
 </param>
            <param name="Salvage">
 Required. Double specifying value of the asset at the end of its useful life.
 </param>
            <param name="Life">
 Required. Double specifying length of the useful life of the asset.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Financial.SYD(System.Double,System.Double,System.Double,System.Double)">
            <summary>
 Returns a Double specifying the sum-of-years digits depreciation of an asset for a specified period.
 </summary>
            <returns>
 Returns a Double specifying the sum-of-years digits depreciation of an asset for a specified period.
 </returns>
            <param name="Cost">
 Required. Double specifying the initial cost of the asset.
 </param>
            <param name="Salvage">
 Required. Double specifying the value of the asset at the end of its useful life.
 </param>
            <param name="Life">
 Required. Double specifying the length of the useful life of the asset.
 </param>
            <param name="Period">
 Required. Double specifying the period for which asset depreciation is calculated.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Information.Err">
            <summary>
 Contains information about run-time errors.
 </summary>
            <returns>
 Contains information about run-time errors.
 </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Information.Erl">
            <summary>
 Returns an integer indicating the line number of the last executed statement. Read-only.
 </summary>
            <returns>
 Returns an integer indicating the line number of the last executed statement. Read-only.
 </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Information.IsArray(System.Object)">
            <summary>
 Returns a Boolean value indicating whether a variable points to an array.
 </summary>
            <returns>
 Returns a Boolean value indicating whether a variable points to an array.
 </returns>
            <param name="VarName">
 Required. Object variable.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Information.IsDate(System.Object)">
            <summary>
 Returns a Boolean value indicating whether an expression represents a valid Date value.
 </summary>
            <returns>
 Returns a Boolean value indicating whether an expression represents a valid Date value.
 </returns>
            <param name="Expression">
 Required. Object expression.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Information.IsDBNull(System.Object)">
            <summary>
 Returns a Boolean value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.
 </summary>
            <returns>
 Returns a Boolean value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.
 </returns>
            <param name="Expression">
 Required. Object expression.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Information.IsNothing(System.Object)">
            <summary>
 Returns a Boolean value indicating whether an expression has no object assigned to it.
 </summary>
            <returns>
 Returns a Boolean value indicating whether an expression has no object assigned to it.
 </returns>
            <param name="Expression">
 Required. Object expression.
 </param>
            <filterpriority>3</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Information.IsError(System.Object)">
            <summary>
 Returns a Boolean value indicating whether an expression is an exception type.
 </summary>
            <returns>
 Returns a Boolean value indicating whether an expression is an exception type.
 </returns>
            <param name="Expression">
 Required. Object expression.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Information.IsReference(System.Object)">
            <summary>
 Returns a Boolean value indicating whether an expression evaluates to a reference type.
 </summary>
            <returns>
 Returns a Boolean value indicating whether an expression evaluates to a reference type.
 </returns>
            <param name="Expression">
 Required. Object expression.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Information.LBound(System.Array,System.Int32)">
            <summary>
 Returns the lowest available subscript for the indicated dimension of an array.
 </summary>
            <returns>Integer. The lowest value the subscript for the specified dimension can contain. LBound always returns 0 as long as <paramref name="Array" /> has been initialized, even if it has no elements, for example if it is a zero-length string. If <paramref name="Array" /> is Nothing, LBound throws an <see cref="T:System.ArgumentNullException" />.
 </returns>
            <param name="Array">
 Required. Array of any data type. The array in which you want to find the lowest possible subscript of a dimension.
 </param>
            <param name="Rank">
 Optional. Integer. The dimension for which the lowest possible subscript is to be returned. Use 1 for the first dimension, 2 for the second, and so on. If <paramref name="Rank" /> is omitted, 1 is assumed.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Information.UBound(System.Array,System.Int32)">
            <summary>
 Returns the highest available subscript for the indicated dimension of an array.
 </summary>
            <returns>Integer. The highest value the subscript for the specified dimension can contain. If <paramref name="Array" /> has only one element, UBound returns 0. If <paramref name="Array" /> has no elements, for example if it is a zero-length string, UBound returns -1. 
 </returns>
            <param name="Array">
 Required. Array of any data type. The array in which you want to find the highest possible subscript of a dimension.
 </param>
            <param name="Rank">
 Optional. Integer. The dimension for which the highest possible subscript is to be returned. Use 1 for the first dimension, 2 for the second, and so on. If <paramref name="Rank" /> is omitted, 1 is assumed.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Information.QBColor(System.Int32)">
            <summary>
 Returns an Integer value representing the RGB color code corresponding to the specified color number.
 </summary>
            <returns>
 Returns an Integer value representing the RGB color code corresponding to the specified color number.
 </returns>
            <param name="Color">
 Required. A whole number in the range 0–15.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Information.RGB(System.Int32,System.Int32,System.Int32)">
            <summary>
 Returns an Integer value representing an RGB color value from a set of red, green and blue color components.
 </summary>
            <returns>
 Returns an Integer value representing an RGB color value from a set of red, green and blue color components.
 </returns>
            <param name="Red">
 Required. Integer in the range 0–255, inclusive, that represents the intensity of the red component of the color.
 </param>
            <param name="Green">
 Required. Integer in the range 0–255, inclusive, that represents the intensity of the green component of the color.
 </param>
            <param name="Blue">
 Required. Integer in the range 0–255, inclusive, that represents the intensity of the blue component of the color.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Information.VarType(System.Object)">
            <summary>
 Returns an Integer value containing the data type classification of a variable.
 </summary>
            <returns>
 Returns an Integer value containing the data type classification of a variable.
 </returns>
            <param name="VarName">
 Required. Object variable. If Option Strict is Off, you can pass a variable of any data type except a structure.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Information.IsNumeric(System.Object)">
            <summary>
 Returns a Boolean value indicating whether an expression can be evaluated as a number.
 </summary>
            <returns>
 Returns a Boolean value indicating whether an expression can be evaluated as a number.
 </returns>
            <param name="Expression">
 Required. Object expression.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Information.TypeName(System.Object)">
            <summary>
 Returns a String value containing data-type information about a variable.
 </summary>
            <returns>
 Returns a String value containing data-type information about a variable.
 </returns>
            <param name="VarName">
 Required. Object variable. If Option Strict is Off, you can pass a variable of any data type except a structure.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Information.SystemTypeName(System.String)">
            <summary>
 Returns a String value containing the system data type name of a variable.
 </summary>
            <returns>
 Returns a String value containing the system data type name of a variable.
 </returns>
            <param name="VbName">
 Required. A String variable containing a Visual Basic type name.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Information.VbTypeName(System.String)">
            <summary>
 Returns a String value containing the Visual Basic data type name of a variable.
 </summary>
            <returns>
 Returns a String value containing the Visual Basic data type name of a variable.
 </returns>
            <param name="UrtName">
 Required. String variable containing a type name used by the common language runtime.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)">
            <summary>
 Runs an executable program and returns an integer containing the program's process ID if it is still running.
 </summary>
            <returns>
 Runs an executable program and returns an integer containing the program's process ID if it is still running.
 </returns>
            <param name="PathName">
 Required. String. Name of the program to execute, together with any required arguments and command-line switches. <paramref name="PathName" /> can also include the drive and the directory path or folder.
 
 If you do not know the path to the program, you can use the My.Computer.FileSystem.GetFiles Method to locate it. For example, you can call My.Computer.FileSystem.GetFiles("C:\", True, "testFile.txt"), which returns the full path of every file named testFile.txt anywhere on drive C:\.
 </param>
            <param name="Style">
 Optional. AppWinStyle. A value chosen from the AppWinStyle Enumeration specifying the style of the window in which the program is to run. If <paramref name="Style" /> is omitted, Shell uses AppWinStyle.MinimizedFocus, which starts the program minimized and with focus. 
 </param>
            <param name="Wait">
 Optional. Boolean. A value indicating whether the Shell function should wait for completion of the program. If <paramref name="Wait" /> is omitted, Shell uses False.
 </param>
            <param name="Timeout">
 Optional. Integer. The number of milliseconds to wait for completion if <paramref name="Wait" /> is True. If <paramref name="Timeout" /> is omitted, Shell uses -1, which means there is no timeout and Shell does not return until the program finishes. Therefore, if you omit <paramref name="Timeout" /> or set it to -1, it is possible that Shell might never return control to your program.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
                <IPermission class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Window="AllWindows" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Interaction.AppActivate(System.Int32)">
            <summary>
 Activates an application that is already running.
 </summary>
            <param name="ProcessId">Integer specifying the Win32 process ID number assigned to this process. You can use the ID returned by the Shell Function, provided it is not zero.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
                <IPermission class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Window="AllWindows" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Interaction.AppActivate(System.String)">
            <summary>
 Activates an application that is already running.
 </summary>
            <param name="Title">String expression specifying the title in the title bar of the application you want to activate. You can use the title assigned to the application when it was launched.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
                <IPermission class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Window="AllWindows" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Interaction.Command">
            <summary>
 Returns the argument portion of the command line used to start Visual Basic or an executable program developed with Visual Basic. The My feature provides greater productivity and performance than the Command function. For more information, see My.Application.CommandLineArgs Property.
 </summary>
            <returns>
 Returns the argument portion of the command line used to start Visual Basic or an executable program developed with Visual Basic.
 
 The My feature provides greater productivity and performance than the Command function. For more information, see My.Application.CommandLineArgs Property.
 </returns>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="Path" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Interaction.Environ(System.Int32)">
            <summary>
 Returns the string associated with an operating-system environment variable. 
 </summary>
            <returns>
 Returns the string associated with an operating-system environment variable. 
 </returns>
            <param name="Expression">
 Required. Expression that evaluates either a string containing the name of an environment variable, or an integer corresponding to the numeric order of an environment string in the environment-string table.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Interaction.Environ(System.String)">
            <summary>
 Returns the string associated with an operating-system environment variable. 
 </summary>
            <returns>
 Returns the string associated with an operating-system environment variable. 
 </returns>
            <param name="Expression">
 Required. Expression that evaluates either a string containing the name of an environment variable, or an integer corresponding to the numeric order of an environment string in the environment-string table.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Interaction.Beep">
            <summary>
 Sounds a tone through the computer's speaker.
 </summary>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.UIPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Window="SafeSubWindows" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
 Displays a prompt in a dialog box, waits for the user to input text or click a button, and then returns a string containing the contents of the text box.
 </summary>
            <returns>
 Displays a prompt in a dialog box, waits for the user to input text or click a button, and then returns a string containing the contents of the text box.
 </returns>
            <param name="Prompt">
 Required String expression displayed as the message in the dialog box. The maximum length of <paramref name="Prompt" /> is approximately 1024 characters, depending on the width of the characters used. If <paramref name="Prompt" /> consists of more than one line, you can separate the lines using a carriage return character (Chr(13)), a line feed character (Chr(10)), or a carriage return/line feed combination (Chr(13) &amp; Chr(10)) between each line.
 </param>
            <param name="Title">
 Optional. String expression displayed in the title bar of the dialog box. If you omit <paramref name="Title" />, the application name is placed in the title bar.
 </param>
            <param name="DefaultResponse">
 Optional. String expression displayed in the text box as the default response if no other input is provided. If you omit <paramref name="DefaultResponse" />, the displayed text box is empty.
 </param>
            <param name="XPos">
 Optional. Numeric expression that specifies, in twips, the distance of the left edge of the dialog box from the left edge of the screen. If you omit <paramref name="XPos" />, the dialog box is centered horizontally.
 </param>
            <param name="YPos">
 Optional. Numeric expression that specifies, in twips, the distance of the upper edge of the dialog box from the top of the screen. If you omit <paramref name="YPos" />, the dialog box is positioned vertically approximately one-third of the way down the screen.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)">
            <summary>
 Displays a message in a dialog box, waits for the user to click a button, and then returns an integer indicating which button the user clicked.
 </summary>
            <returns>
 Constant OK, Value 1. Constant Cancel, Value 2. Constant Abort, Value 3. Constant Retry, Value 4. Constant Ignore, Value 5. Constant Yes, Value 6. Constant No, Value 7. 
 </returns>
            <param name="Prompt">
 Required. String expression displayed as the message in the dialog box. The maximum length of <paramref name="Prompt" /> is approximately 1024 characters, depending on the width of the characters used. If <paramref name="Prompt" /> consists of more than one line, you can separate the lines using a carriage return character (Chr(13)), a line feed character (Chr(10)), or a carriage return/linefeed character combination (Chr(13) &amp; Chr(10)) between each line.
 </param>
            <param name="Buttons">
 Optional. Numeric expression that is the sum of values specifying the number and type of buttons to display, the icon style to use, the identity of the default button, and the modality of the message box. If you omit <paramref name="Buttons" />, the default value is zero.
 </param>
            <param name="Title">
 Optional. String expression displayed in the title bar of the dialog box. If you omit <paramref name="Title" />, the application name is placed in the title bar.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Interaction.Choose(System.Double,System.Object[])">
            <summary>
 Selects and returns a value from a list of arguments.
 </summary>
            <returns>
 Selects and returns a value from a list of arguments.
 </returns>
            <param name="Index">
 Required. Double. Numeric expression that results in a value between 1 and the number of elements passed in the <paramref name="Choice" /> argument.
 </param>
            <param name="Choice">
 Required. Object parameter array. You can supply either a single variable or an expression that evaluates to the Object data type, to a list of Object variables or expressions separated by commas, or to a single-dimensional array of Object elements.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Interaction.IIf(System.Boolean,System.Object,System.Object)">
            <summary>
 Returns one of two objects, depending on the evaluation of an expression.
 </summary>
            <returns>
 Returns one of two objects, depending on the evaluation of an expression.
 </returns>
            <param name="Expression">
 Required. Boolean. The expression you want to evaluate.
 </param>
            <param name="TruePart">
 Required. Object. Returned if <paramref name="Expression" /> evaluates to True.
 </param>
            <param name="FalsePart">
 Required. Object. Returned if <paramref name="Expression" /> evaluates to False.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
 Returns a string representing the calculated range that contains a number.
 </summary>
            <returns>
 Returns a string representing the calculated range that contains a number.
 </returns>
            <param name="Number">
 Required. Long. Whole number that you want to locate within one of the calculated ranges.
 </param>
            <param name="Start">
 Required. Long. Whole number that indicates the start of the set of calculated ranges. <paramref name="Start" /> cannot be less than 0.
 </param>
            <param name="Stop">
 Required. Long. Whole number that indicates the end of the set of calculated ranges. <paramref name="Stop" /> cannot be less than or equal to <paramref name="Start" />.
 </param>
            <param name="Interval">
 Required. Long. Whole number that indicates the size of each range calculated between <paramref name="Start" /> and <paramref name="Stop" />. <paramref name="Interval" /> cannot be less than 1.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Interaction.Switch(System.Object[])">
            <summary>
 Evaluates a list of expressions and returns an Object value corresponding to the first expression in the list that is True.
 </summary>
            <returns>
 Evaluates a list of expressions and returns an Object value corresponding to the first expression in the list that is True.
 </returns>
            <param name="VarExpr">
 Required. Object parameter array. Must have an even number of elements. You can supply a list of Object variables or expressions separated by commas, or a single-dimensional array of Object elements.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Interaction.DeleteSetting(System.String,System.String,System.String)">
            <summary>
 Deletes a section or key setting from an application's entry in the Windows registry. The My feature gives you greater productivity and performance in registry operations than the DeleteSetting function. For more information, see My.Computer.Registry Object.
 </summary>
            <param name="AppName">
 Required. String expression containing the name of the application or project to which the section or key setting applies.
 </param>
            <param name="Section">
 Required. String expression containing the name of the section from which the key setting is being deleted. If only <paramref name="AppName" /> and <paramref name="Section" /> are provided, the specified section is deleted along with all related key settings.
 </param>
            <param name="Key">
 Optional. String expression containing the name of the key setting being deleted.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*" />
                <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Interaction.GetAllSettings(System.String,System.String)">
            <summary>
 Returns a list of key settings and their respective values (originally created with SaveSetting) from an application's entry in the Windows registry. Using the My feature gives you greater productivity and performance in registry operations than GetAllSettings. For more information, see My.Computer.Registry Object.
 </summary>
            <returns>
 Returns a list of key settings and their respective values (originally created with SaveSetting) from an application's entry in the Windows registry.
 
 Using the My feature gives you greater productivity and performance in registry operations than GetAllSettings. For more information, see My.Computer.Registry Object.
 </returns>
            <param name="AppName">
 Required. String expression containing the name of the application or project whose key settings are requested.
 </param>
            <param name="Section">
 Required. String expression containing the name of the section whose key settings are requested. GetAllSettings returns an object that contains a two-dimensional array of strings. The strings contain all the key settings in the specified section, plus their corresponding values.
 </param>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Interaction.GetSetting(System.String,System.String,System.String,System.String)">
            <summary>
 Returns a key setting value from an application's entry in the Windows registry. The My feature gives you greater productivity and performance in registry operations than GetAllSettings. For more information, see My.Computer.Registry Object.
 </summary>
            <returns>
 Returns a key setting value from an application's entry in the Windows registry.
 
 The My feature gives you greater productivity and performance in registry operations than GetAllSettings. For more information, see My.Computer.Registry Object.
 </returns>
            <param name="AppName">
 Required. String expression containing the name of the application or project whose key setting is requested.
 </param>
            <param name="Section">
 Required. String expression containing the name of the section in which the key setting is found.
 </param>
            <param name="Key">
 Required. String expression containing the name of the key setting to return.
 </param>
            <param name="Default">
 Optional. Expression containing the value to return if no value is set in the <paramref name="Key" /> setting. If omitted, <paramref name="Default" /> is assumed to be a zero-length string ("").
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Interaction.SaveSetting(System.String,System.String,System.String,System.String)">
            <summary>
 Saves or creates an application entry in the Windows registry. The My feature gives you greater productivity and performance in registry operations than SaveSetting. For more information, see My.Computer.Registry Object.
 </summary>
            <param name="AppName">
 Required. String expression containing the name of the application or project to which the setting applies.
 </param>
            <param name="Section">
 Required. String expression containing the name of the section in which the key setting is being saved.
 </param>
            <param name="Key">
 Required. String expression containing the name of the key setting being saved.
 </param>
            <param name="Setting">
 Required. Expression containing the value to which <paramref name="Key" /> is being set.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.RegistryPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Interaction.CreateObject(System.String,System.String)">
            <summary>
 Creates and returns a reference to a COM object. CreateObject cannot be used to create instances of classes in Visual Basic unless those classes are explicitly exposed as COM components.
 </summary>
            <returns>
 Creates and returns a reference to a COM object. CreateObject cannot be used to create instances of classes in Visual Basic unless those classes are explicitly exposed as COM components.
 </returns>
            <param name="ProgId">
 Required. String. The program ID of the object to create.
 </param>
            <param name="ServerName">
 Optional. String. The name of the network server where the object will be created. If <paramref name="ServerName" /> is an empty string (""), the local computer is used.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="COMPUTERNAME" />
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Interaction.GetObject(System.String,System.String)">
            <summary>
 Returns a reference to an object provided by a COM component.
 </summary>
            <returns>
 Returns a reference to an object provided by a COM component.
 </returns>
            <param name="PathName">
 Optional. String. The full path and name of the file containing the object to retrieve. If <paramref name="PathName" /> is omitted, <paramref name="Class" /> is required.
 </param>
            <param name="Class">
 Required if <paramref name="PathName" /> is not supplied. String. A string representing the class of the object. The <paramref name="Class" /> argument has the following syntax and parts:
 <paramref name="appname" />.<paramref name="objecttype" />
 Parameter
 
 Description
 <paramref name="appname" />
 Required. String. The name of the application providing the object.
 <paramref name="objecttype" />
 Required. String. The type or class of object to create.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])">
            <summary>
 Executes a method on an object, or sets or returns a property on an object.
 </summary>
            <returns>
 Executes a method on an object, or sets or returns a property on an object.
 </returns>
            <param name="ObjectRef">
 Required. Object. A pointer to the object exposing the property or method.
 </param>
            <param name="ProcName">
 Required. String. A string expression containing the name of the property or method on the object.
 </param>
            <param name="UseCallType">
 Required. An enumeration member of type CallType Enumeration representing the type of procedure being called. The value of CallType can be Method, Get, or Set.
 </param>
            <param name="Args">
 Optional. ParamArray. A parameter array containing the arguments to be passed to the property or method being called.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Asc(System.Char)">
            <summary>
 Returns an Integer value representing the character code corresponding to a character.
 </summary>
            <returns>
 Returns an Integer value representing the character code corresponding to a character.
 </returns>
            <param name="String">
 Required. Any valid Char or String expression. If <paramref name="String" /> is a String expression, only the first character of the string is used for input. If <paramref name="String" /> is Nothing or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Asc(System.String)">
            <summary>
 Returns an Integer value representing the character code corresponding to a character.
 </summary>
            <returns>
 Returns an Integer value representing the character code corresponding to a character.
 </returns>
            <param name="String">
 Required. Any valid Char or String expression. If <paramref name="String" /> is a String expression, only the first character of the string is used for input. If <paramref name="String" /> is Nothing or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.AscW(System.String)">
            <summary>
 Returns an Integer value representing the character code corresponding to a character.
 </summary>
            <returns>
 Returns an Integer value representing the character code corresponding to a character.
 </returns>
            <param name="String">
 Required. Any valid Char or String expression. If <paramref name="String" /> is a String expression, only the first character of the string is used for input. If <paramref name="String" /> is Nothing or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.AscW(System.Char)">
            <summary>
 Returns an Integer value representing the character code corresponding to a character.
 </summary>
            <returns>
 Returns an Integer value representing the character code corresponding to a character.
 </returns>
            <param name="String">
 Required. Any valid Char or String expression. If <paramref name="String" /> is a String expression, only the first character of the string is used for input. If <paramref name="String" /> is Nothing or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Chr(System.Int32)">
            <summary>
 Returns the character associated with the specified character code.
 </summary>
            <returns>
 Returns the character associated with the specified character code.
 </returns>
            <param name="CharCode">
 Required. An Integer expression representing the code point, or character code, for the character. If <paramref name="CharCode" /> is outside the valid range, an <see cref="T:System.ArgumentException" /> error occurs. The valid range for Chr is 0 through 255, and the valid range for ChrW is -32768 through 65535.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.ChrW(System.Int32)">
            <summary>
 Returns the character associated with the specified character code.
 </summary>
            <returns>
 Returns the character associated with the specified character code.
 </returns>
            <param name="CharCode">
 Required. An Integer expression representing the code point, or character code, for the character. If <paramref name="CharCode" /> is outside the valid range, an <see cref="T:System.ArgumentException" /> error occurs. The valid range for Chr is 0 through 255, and the valid range for ChrW is -32768 through 65535.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
            <summary>
 Returns a zero-based array containing a subset of a String array based on specified filter criteria.
 </summary>
            <returns>
 Returns a zero-based array containing a subset of a String array based on specified filter criteria.
 </returns>
            <param name="Source">
 Required. One-dimensional array of strings to be searched.
 </param>
            <param name="Match">
 Required. String to search for.
 </param>
            <param name="Include">
 Optional. Boolean value indicating whether to return substrings that include or exclude <paramref name="Match" />. If <paramref name="Include" /> is True, the Filter function returns the subset of the array that contains <paramref name="Match" /> as a substring. If <paramref name="Include" /> is False, the Filter function returns the subset of the array that does not contain <paramref name="Match" /> as a substring.
 </param>
            <param name="Compare">
 Optional. Numeric value indicating the kind of string comparison to use. See "Settings" for values.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
            <summary>
 Returns a zero-based array containing a subset of a String array based on specified filter criteria.
 </summary>
            <returns>
 Returns a zero-based array containing a subset of a String array based on specified filter criteria.
 </returns>
            <param name="Source">
 Required. One-dimensional array of strings to be searched.
 </param>
            <param name="Match">
 Required. String to search for.
 </param>
            <param name="Include">
 Optional. Boolean value indicating whether to return substrings that include or exclude <paramref name="Match" />. If <paramref name="Include" /> is True, the Filter function returns the subset of the array that contains <paramref name="Match" /> as a substring. If <paramref name="Include" /> is False, the Filter function returns the subset of the array that does not contain <paramref name="Match" /> as a substring.
 </param>
            <param name="Compare">
 Optional. Numeric value indicating the kind of string comparison to use. See "Settings" for values.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
            <summary>
 Returns an integer specifying the start position of the first occurrence of one string within another.
 </summary>
            <returns>
 If <paramref name="String1" /> is zero length or Nothing, InStr returns 0. If <paramref name="String2" /> is zero length or Nothing, InStr returns <paramref name="start" />. If <paramref name="String2" /> is not found, InStr returns 0. If <paramref name="String2" /> is found within <paramref name="String1" />, InStr returns position where match begins. If <paramref name="Start" /> &gt; <paramref name="String2" />, InStr returns 0. 
 </returns>
            <param name="String1">
 Required. String expression being searched.
 </param>
            <param name="String2">
 Required. String expression sought.
 </param>
            <param name="Compare">
 Optional. Specifies the type of string comparison. If <paramref name="Compare" /> is omitted, the Option Compare setting determines the type of comparison. 
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
            <summary>
 Returns an integer specifying the start position of the first occurrence of one string within another.
 </summary>
            <returns>
 If <paramref name="String1" /> is zero length or Nothing, InStr returns 0. If <paramref name="String2" /> is zero length or Nothing, InStr returns <paramref name="start" />. If <paramref name="String2" /> is not found, InStr returns 0. If <paramref name="String2" /> is found within <paramref name="String1" />, InStr returns position where match begins. If <paramref name="Start" /> &gt; <paramref name="String2" />, InStr returns 0. 
 </returns>
            <param name="Start">
 Optional. Numeric expression that sets the starting position for each search. If omitted, search begins at the first character position. The start index is 1-based.
 </param>
            <param name="String1">
 Required. String expression being searched.
 </param>
            <param name="String2">
 Required. String expression sought.
 </param>
            <param name="Compare">
 Optional. Specifies the type of string comparison. If <paramref name="Compare" /> is omitted, the Option Compare setting determines the type of comparison. 
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
            <summary>
 Returns the position of the first occurrence of one string within another, starting from the right side of the string.
 </summary>
            <returns>
 If <paramref name="StringCheck" /> is zero-length, InStrRev returns 0. If <paramref name="StringMatch" /> is zero-length, InStrRev returns <paramref name="Start" />. If <paramref name="StringMatch" /> is not found, InStrRev returns 0. If <paramref name="StringMatch" /> is found within <paramref name="StringCheck" />, InStrRev returns position at which the first match is found, starting with the right side of the string. If <paramref name="Start" /> is greater than length of <paramref name="StringMatch" />, InStrRev returns 0. 
 </returns>
            <param name="StringCheck">
 Required. String expression being searched.
 </param>
            <param name="StringMatch">
 Required. String expression being searched for.
 </param>
            <param name="Start">
 Optional. Numeric expression setting the one-based starting position for each search, starting from the left side of the string. If <paramref name="Start" /> is omitted then –1 is used, meaning the search begins at the last character position. Search then proceeds from right to left.
 </param>
            <param name="Compare">
 Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. If omitted, a binary comparison is performed. See Settings for values.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Join(System.Object[],System.String)">
            <summary>
 Returns a string created by joining a number of substrings contained in an array.
 </summary>
            <returns>
 Returns a string created by joining a number of substrings contained in an array.
 </returns>
            <param name="SourceArray">
 Required. One-dimensional array containing substrings to be joined.
 </param>
            <param name="Delimiter">
 Optional. Any string, used to separate the substrings in the returned string. If omitted, the space character (" ") is used. If <paramref name="Delimiter" /> is a zero-length string ("") or Nothing, all items in the list are concatenated with no delimiters.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Join(System.String[],System.String)">
            <summary>
 Returns a string created by joining a number of substrings contained in an array.
 </summary>
            <returns>
 Returns a string created by joining a number of substrings contained in an array.
 </returns>
            <param name="SourceArray">
 Required. One-dimensional array containing substrings to be joined.
 </param>
            <param name="Delimiter">
 Optional. Any string, used to separate the substrings in the returned string. If omitted, the space character (" ") is used. If <paramref name="Delimiter" /> is a zero-length string ("") or Nothing, all items in the list are concatenated with no delimiters.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.LCase(System.String)">
            <summary>
 Returns a string or character converted to lowercase.
 </summary>
            <returns>
 Returns a string or character converted to lowercase.
 </returns>
            <param name="Value">
 Required. Any valid String or Char expression.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.LCase(System.Char)">
            <summary>
 Returns a string or character converted to lowercase.
 </summary>
            <returns>
 Returns a string or character converted to lowercase.
 </returns>
            <param name="Value">
 Required. Any valid String or Char expression.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Len(System.Boolean)">
            <summary>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </summary>
            <returns>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </returns>
            <param name="Expression">
 Any valid String expression or variable name. If <paramref name="Expression" /> is of type Object, the Len function returns the size as it will be written to the file by the FilePut function.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Len(System.SByte)">
            <summary>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </summary>
            <returns>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </returns>
            <param name="Expression">
 Any valid String expression or variable name. If <paramref name="Expression" /> is of type Object, the Len function returns the size as it will be written to the file by the FilePut function.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Len(System.Byte)">
            <summary>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </summary>
            <returns>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </returns>
            <param name="Expression">
 Any valid String expression or variable name. If <paramref name="Expression" /> is of type Object, the Len function returns the size as it will be written to the file by the FilePut function.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Len(System.Int16)">
            <summary>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </summary>
            <returns>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </returns>
            <param name="Expression">
 Any valid String expression or variable name. If <paramref name="Expression" /> is of type Object, the Len function returns the size as it will be written to the file by the FilePut function.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Len(System.UInt16)">
            <summary>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </summary>
            <returns>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </returns>
            <param name="Expression">
 Any valid String expression or variable name. If <paramref name="Expression" /> is of type Object, the Len function returns the size as it will be written to the file by the FilePut function.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Len(System.Int32)">
            <summary>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </summary>
            <returns>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </returns>
            <param name="Expression">
 Any valid String expression or variable name. If <paramref name="Expression" /> is of type Object, the Len function returns the size as it will be written to the file by the FilePut function.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Len(System.UInt32)">
            <summary>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </summary>
            <returns>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </returns>
            <param name="Expression">
 Any valid String expression or variable name. If <paramref name="Expression" /> is of type Object, the Len function returns the size as it will be written to the file by the FilePut function.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Len(System.Int64)">
            <summary>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </summary>
            <returns>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </returns>
            <param name="Expression">
 Any valid String expression or variable name. If <paramref name="Expression" /> is of type Object, the Len function returns the size as it will be written to the file by the FilePut function.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Len(System.UInt64)">
            <summary>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </summary>
            <returns>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </returns>
            <param name="Expression">
 Any valid String expression or variable name. If <paramref name="Expression" /> is of type Object, the Len function returns the size as it will be written to the file by the FilePut function.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Len(System.Decimal)">
            <summary>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </summary>
            <returns>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </returns>
            <param name="Expression">
 Any valid String expression or variable name. If <paramref name="Expression" /> is of type Object, the Len function returns the size as it will be written to the file by the FilePut function.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Len(System.Single)">
            <summary>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </summary>
            <returns>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </returns>
            <param name="Expression">
 Any valid String expression or variable name. If <paramref name="Expression" /> is of type Object, the Len function returns the size as it will be written to the file by the FilePut function.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Len(System.Double)">
            <summary>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </summary>
            <returns>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </returns>
            <param name="Expression">
 Any valid String expression or variable name. If <paramref name="Expression" /> is of type Object, the Len function returns the size as it will be written to the file by the FilePut function.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Len(System.DateTime)">
            <summary>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </summary>
            <returns>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </returns>
            <param name="Expression">
 Any valid String expression or variable name. If <paramref name="Expression" /> is of type Object, the Len function returns the size as it will be written to the file by the FilePut function.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Len(System.Char)">
            <summary>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </summary>
            <returns>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </returns>
            <param name="Expression">
 Any valid String expression or variable name. If <paramref name="Expression" /> is of type Object, the Len function returns the size as it will be written to the file by the FilePut function.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Len(System.String)">
            <summary>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </summary>
            <returns>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </returns>
            <param name="Expression">
 Any valid String expression or variable name. If <paramref name="Expression" /> is of type Object, the Len function returns the size as it will be written to the file by the FilePut function.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Len(System.Object)">
            <summary>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </summary>
            <returns>
 Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
 </returns>
            <param name="Expression">
 Any valid String expression or variable name. If <paramref name="Expression" /> is of type Object, the Len function returns the size as it will be written to the file by the FilePut function.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
            <summary>
 Returns a string in which a specified substring has been replaced with another substring a specified number of times.
 </summary>
            <returns>
 If <paramref name="Find" /> is zero-length or Nothing, Replace returns copy of <paramref name="Expression" />. If <paramref name="Replace" /> is zero-length, Replace returns copy of <paramref name="Expression" /> with no occurrences of <paramref name="Find" />. If <paramref name="Expression" /> is zero-length or Nothing, or <paramref name="Start" /> is greater than length of <paramref name="Expression" />, Replace returns Nothing. If <paramref name="Count" /> is 0, Replace returns copy of <paramref name="Expression" />. 
 </returns>
            <param name="Expression">
 Required. String expression containing substring to replace.
 </param>
            <param name="Find">
 Required. Substring being searched for.
 </param>
            <param name="Replacement">
 Required. Replacement substring.
 </param>
            <param name="Start">
 Optional. Position within <paramref name="Expression" /> where substring search is to begin. If omitted, 1 is assumed.
 </param>
            <param name="Count">
 Optional. Number of substring substitutions to perform. If omitted, the default value is –1, which means "make all possible substitutions."
 </param>
            <param name="Compare">
 Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. See Settings for values.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Space(System.Int32)">
            <summary>
 Returns a string consisting of the specified number of spaces.
 </summary>
            <returns>
 Returns a string consisting of the specified number of spaces.
 </returns>
            <param name="Number">
 Required. Integer expression. The number of spaces you want in the string.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
            <summary>
 Returns a zero-based, one-dimensional array containing a specified number of substrings.
 </summary>
            <returns>String array. If <paramref name="Expression" /> is a zero-length string (""), Split returns a single-element array containing a zero-length string. If <paramref name="Delimiter" /> is a zero-length string, or if it does not appear anywhere in <paramref name="Expression" />, Split returns a single-element array containing the entire <paramref name="Expression" /> string.
 </returns>
            <param name="Expression">
 Required. String expression containing substrings and delimiters.
 </param>
            <param name="Delimiter">
 Optional. Any single character used to identify substring limits. If <paramref name="Delimiter" /> is omitted, the space character (" ") is assumed to be the delimiter.
 </param>
            <param name="Limit">
 Optional. Maximum number of substrings into which the input string should be split. The default, –1, indicates that the input string should be split at every occurrence of the <paramref name="Delimiter" /> string.
 </param>
            <param name="Compare">
 Optional. Numeric value indicating the comparison to use when evaluating substrings. See "Settings" for values.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.LSet(System.String,System.Int32)">
            <summary>
 Returns a left-aligned string containing the specified string adjusted to the specified length.
 </summary>
            <returns>
 Returns a left-aligned string containing the specified string adjusted to the specified length.
 </returns>
            <param name="Source">
 Required. String expression. Name of string variable.
 </param>
            <param name="Length">
 Required. Integer expression. Length of returned string.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.RSet(System.String,System.Int32)">
            <summary>
 Returns a right-aligned string containing the specified string adjusted to the specified length. 
 </summary>
            <returns>
 Returns a right-aligned string containing the specified string adjusted to the specified length. 
 </returns>
            <param name="Source">
 Required. String expression. Name of string variable.
 </param>
            <param name="Length">
 Required. Integer expression. Length of returned string.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.StrDup(System.Int32,System.Object)">
            <summary>
 Returns a string or object consisting of the specified character repeated the specified number of times.
 </summary>
            <returns>
 Returns a string or object consisting of the specified character repeated the specified number of times.
 </returns>
            <param name="Number">
 Required. Integer expression. The length to the string to be returned.
 </param>
            <param name="Character">
 Required. Any valid Char, String, or Object expression. Only the first character of the expression will be used. If Character is of type Object, it must contain either a Char or a String value. 
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.StrDup(System.Int32,System.Char)">
            <summary>
 Returns a string or object consisting of the specified character repeated the specified number of times.
 </summary>
            <returns>
 Returns a string or object consisting of the specified character repeated the specified number of times.
 </returns>
            <param name="Number">
 Required. Integer expression. The length to the string to be returned.
 </param>
            <param name="Character">
 Required. Any valid Char, String, or Object expression. Only the first character of the expression will be used. If Character is of type Object, it must contain either a Char or a String value. 
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.StrDup(System.Int32,System.String)">
            <summary>
 Returns a string or object consisting of the specified character repeated the specified number of times.
 </summary>
            <returns>
 Returns a string or object consisting of the specified character repeated the specified number of times.
 </returns>
            <param name="Number">
 Required. Integer expression. The length to the string to be returned.
 </param>
            <param name="Character">
 Required. Any valid Char, String, or Object expression. Only the first character of the expression will be used. If Character is of type Object, it must contain either a Char or a String value. 
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.StrReverse(System.String)">
            <summary>
 Returns a string in which the character order of a specified string is reversed.
 </summary>
            <returns>
 Returns a string in which the character order of a specified string is reversed.
 </returns>
            <param name="Expression">
 Required. String expression whose characters are to be reversed. If <paramref name="Expression" /> is a zero-length string (""), a zero-length string is returned.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.UCase(System.String)">
            <summary>
 Returns a string or character containing the specified string converted to uppercase.
 </summary>
            <returns>
 Returns a string or character containing the specified string converted to uppercase.
 </returns>
            <param name="Value">
 Required. Any valid String or Char expression.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.UCase(System.Char)">
            <summary>
 Returns a string or character containing the specified string converted to uppercase.
 </summary>
            <returns>
 Returns a string or character containing the specified string converted to uppercase.
 </returns>
            <param name="Value">
 Required. Any valid String or Char expression.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Format(System.Object,System.String)">
            <summary>
 Returns a string formatted according to instructions contained in a format String expression.
 </summary>
            <returns>
 Returns a string formatted according to instructions contained in a format String expression.
 </returns>
            <param name="Expression">
 Required. Any valid expression.
 </param>
            <param name="Style">
 Optional. A valid named or user-defined format String expression.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
            <summary>
 Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.
 </summary>
            <returns>
 Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.
 </returns>
            <param name="Expression">
 Required. Expression to be formatted.
 </param>
            <param name="NumDigitsAfterDecimal">
 Optional. Numeric value indicating how many places are displayed to the right of the decimal. Default value is –1, which indicates that the computer's regional settings are used.
 </param>
            <param name="IncludeLeadingDigit">
 Optional. TriState enumeration that indicates whether or not a leading zero is displayed for fractional values. See "Settings" for values.
 </param>
            <param name="UseParensForNegativeNumbers">
 Optional. TriState enumeration that indicates whether or not to place negative values within parentheses. See "Settings" for values.
 </param>
            <param name="GroupDigits">
 Optional. TriState enumeration that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings. See "Settings" for values.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
            <summary>
 Returns a string expression representing a date/time value.
 </summary>
            <returns>
 Returns a string expression representing a date/time value.
 </returns>
            <param name="Expression">
 Required. Date expression to be formatted.
 </param>
            <param name="NamedFormat">
 Optional. Numeric value that indicates the date/time format used. If omitted, DateFormat.GeneralDate is used.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
            <summary>
 Returns an expression formatted as a number.
 </summary>
            <returns>
 Returns an expression formatted as a number.
 </returns>
            <param name="Expression">
 Required. Expression to be formatted.
 </param>
            <param name="NumDigitsAfterDecimal">
 Optional. Numeric value indicating how many places are displayed to the right of the decimal. The default value is –1, which indicates that the computer's regional settings are used.
 </param>
            <param name="IncludeLeadingDigit">
 Optional. TriState constant that indicates whether a leading 0 is displayed for fractional values. See "Settings" for values.
 </param>
            <param name="UseParensForNegativeNumbers">
 Optional. TriState constant that indicates whether to place negative values within parentheses. See "Settings" for values.
 </param>
            <param name="GroupDigits">
 Optional. TriState constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See "Settings" for values.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
            <summary>
 Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.
 </summary>
            <returns>
 Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.
 </returns>
            <param name="Expression">
 Required. Expression to be formatted.
 </param>
            <param name="NumDigitsAfterDecimal">
 Optional. Numeric value indicating how many places to the right of the decimal are displayed. Default value is –1, which indicates that the locale settings are used.
 </param>
            <param name="IncludeLeadingDigit">
 Optional. TriState constant that indicates whether or not a leading zero displays for fractional values. See "Settings" for values.
 </param>
            <param name="UseParensForNegativeNumbers">
 Optional. TriState constant that indicates whether or not to place negative values within parentheses. See "Settings" for values.
 </param>
            <param name="GroupDigits">
 Optional. TriState constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See "Settings" for values.
 </param>
            <filterpriority>1</filterpriority>
            <PermissionSet>
                <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" />
            </PermissionSet>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.GetChar(System.String,System.Int32)">
            <summary>
 Returns a Char value representing the character from the specified index in the supplied string.
 </summary>
            <returns>
 Returns a Char value representing the character from the specified index in the supplied string.
 </returns>
            <param name="str">
 Required. Any valid String expression.
 </param>
            <param name="Index">
 Required. Integer expression. The (1-based) index of the character in <paramref name="str" /> to be returned.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Left(System.String,System.Int32)">
            <summary>
 Returns a string containing a specified number of characters from the left side of a string.
 </summary>
            <returns>
 Returns a string containing a specified number of characters from the left side of a string.
 </returns>
            <param name="str">
 Required. String expression from which the leftmost characters are returned.
 </param>
            <param name="Length">
 Required. Integer expression. Numeric expression indicating how many characters to return. If 0, a zero-length string ("") is returned. If greater than or equal to the number of characters in <paramref name="str" />, the entire string is returned.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.LTrim(System.String)">
            <summary>
 Returns a string containing a copy of a specified string with no leading spaces (LTrim), no trailing spaces (RTrim), or no leading or trailing spaces (Trim).
 </summary>
            <returns>
 Returns a string containing a copy of a specified string with no leading spaces (LTrim), no trailing spaces (RTrim), or no leading or trailing spaces (Trim).
 </returns>
            <param name="str">
 Required. Any valid String expression.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Mid(System.String,System.Int32)">
            <summary>
 Returns a string containing a specified number of characters from a string.
 </summary>
            <returns>
 Returns a string containing a specified number of characters from a string.
 </returns>
            <param name="str">
 Required. String expression from which characters are returned.
 </param>
            <param name="Start">
 Required. Integer expression. Starting position of the characters to return. If <paramref name="Start" /> is greater than the number of characters in <paramref name="str" />, the Mid function returns a zero-length string (""). <paramref name="Start" /> is one based.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Mid(System.String,System.Int32,System.Int32)">
            <summary>
 Returns a string containing a specified number of characters from a string.
 </summary>
            <returns>
 Returns a string containing a specified number of characters from a string.
 </returns>
            <param name="str">
 Required. String expression from which characters are returned.
 </param>
            <param name="Start">
 Required. Integer expression. Starting position of the characters to return. If <paramref name="Start" /> is greater than the number of characters in <paramref name="str" />, the Mid function returns a zero-length string (""). <paramref name="Start" /> is one based.
 </param>
            <param name="Length">
 Optional. Integer expression. Number of characters to return. If omitted or if there are fewer than <paramref name="Length" /> characters in the text (including the character at position <paramref name="Start" />), all characters from the start position to the end of the string are returned.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Right(System.String,System.Int32)">
            <summary>
 Returns a string containing a specified number of characters from the right side of a string.
 </summary>
            <returns>
 Returns a string containing a specified number of characters from the right side of a string.
 </returns>
            <param name="str">
 Required. String expression from which the rightmost characters are returned.
 </param>
            <param name="Length">
 Required. Integer. Numeric expression indicating how many characters to return. If 0, a zero-length string ("") is returned. If greater than or equal to the number of characters in <paramref name="str" />, the entire string is returned.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.RTrim(System.String)">
            <summary>
 Returns a string containing a copy of a specified string with no leading spaces (LTrim), no trailing spaces (RTrim), or no leading or trailing spaces (Trim).
 </summary>
            <returns>
 Returns a string containing a copy of a specified string with no leading spaces (LTrim), no trailing spaces (RTrim), or no leading or trailing spaces (Trim).
 </returns>
            <param name="str">
 Required. Any valid String expression.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.Trim(System.String)">
            <summary>
 Returns a string containing a copy of a specified string with no leading spaces (LTrim), no trailing spaces (RTrim), or no leading or trailing spaces (Trim).
 </summary>
            <returns>
 Returns a string containing a copy of a specified string with no leading spaces (LTrim), no trailing spaces (RTrim), or no leading or trailing spaces (Trim).
 </returns>
            <param name="str">
 Required. Any valid String expression.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
            <summary>
 Returns -1, 0, or 1, based on the result of a string comparison. 
 </summary>
            <returns>
 If <paramref name="String1" /> sorts ahead of <paramref name="String2" />, StrComp returns -1. If <paramref name="String1" /> is equal to <paramref name="String2" />, StrComp returns  0. If <paramref name="String1" /> sorts after <paramref name="String2" />, StrComp returns  1. 
 </returns>
            <param name="String1">
 Required. Any valid String expression.
 </param>
            <param name="String2">
 Required. Any valid String expression.
 </param>
            <param name="Compare">
 Optional. Specifies the type of string comparison. If <paramref name="Compare" /> is omitted, the Option Compare setting determines the type of comparison.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
            <summary>
 Returns a string converted as specified.
 </summary>
            <returns>
 Returns a string converted as specified.
 </returns>
            <param name="str">
 Required. String expression to be converted.
 </param>
            <param name="Conversion">
 Required. VbStrConv Enumeration member. The enumeration value specifying the type of conversion to perform.
 </param>
            <param name="LocaleID">
 Optional. The LocaleID value, if different from the system LocaleID value. (The system LocaleID value is the default.)
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.VBMath.Rnd">
            <summary>
 Returns a random number of type Single.
 </summary>
            <returns>
 If number is less than zero, Rnd generates the same number every time, using <paramref name="Number" /> as the seed. If number is greater than zero, Rnd generates the next random number in the sequence. If number is equal to zero, Rnd generates the most recently generated number. If number is not supplied, Rnd generates the next random number in the sequence.
 </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.VBMath.Rnd(System.Single)">
            <summary>
 Returns a random number of type Single.
 </summary>
            <returns>
 If number is less than zero, Rnd generates the same number every time, using <paramref name="Number" /> as the seed. If number is greater than zero, Rnd generates the next random number in the sequence. If number is equal to zero, Rnd generates the most recently generated number. If number is not supplied, Rnd generates the next random number in the sequence.
 </returns>
            <param name="Number">
 Optional. A Single value or any valid Single expression.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.VBMath.Randomize">
            <summary>
 Initializes the random-number generator.
 </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Ape.EL.Misc.VB.VBMath.Randomize(System.Double)">
            <summary>
 Initializes the random-number generator.
 </summary>
            <param name="Number">
 Optional. An Object or any valid numeric expression.
 </param>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Ape.EL.Repository.RepositoryItemEmail.Address">
            <summary>
 Get or set the email address.
 </summary>
        </member>
        <member name="P:Ape.EL.Repository.RepositoryItemEmail.Password">
            <summary>
 Get or set the email log in password.
 </summary>
        </member>
        <member name="P:Ape.EL.Repository.RepositoryItemEmail.Host">
            <summary>
 Get or set the email hosting website.
 </summary>
        </member>
        <member name="P:Ape.EL.Repository.RepositoryItemEmail.UseSSL">
            <summary>
 Get or set the email SSL setting.
 </summary>
        </member>
        <member name="P:Ape.EL.Repository.RepositoryItemEmail.Port">
            <summary>
 Get or set the email port.
 </summary>
        </member>
        <member name="T:Ape.EL.Setting.Common.ConfigEdition">
            <summary> Related to enum Config. </summary>
        </member>
        <member name="T:Ape.EL.Setting.Common.ConfigLoginMode">
            <summary> Related to enum Config. </summary>
        </member>
        <member name="T:Ape.EL.Setting.Common.ConfigDefaultScreen">
            <summary> Related to enum Config. </summary>
        </member>
        <member name="T:Ape.EL.Setting.Common.ConfigConnectionMode">
            <summary> Related to enum Config. </summary>
        </member>
        <member name="T:Ape.EL.Setting.Common.ItemType">
            <summary>
 List of Item Type (including legacy).
 </summary>
            <remarks />
        </member>
        <member name="T:Ape.EL.Setting.Common">
            <summary>
 Provides common / default setting names to be used as key in MySetting and other stuffs...
 </summary>
            <remarks />
        </member>
        <member name="P:Ape.EL.Repository.RepositoryPrintTextCmd.LF">
            <summary>
 Line feed.
 </summary>
        </member>
        <member name="P:Ape.EL.Repository.RepositoryPrintTextCmd.Left">
            <summary>
 Align left.
 </summary>
        </member>
        <member name="P:Ape.EL.Repository.RepositoryPrintTextCmd.Right">
            <summary>
 Align right.
 </summary>
        </member>
        <member name="P:Ape.EL.Repository.RepositoryPrintTextCmd.Center">
            <summary>
 Align center.
 </summary>
        </member>
        <member name="P:Ape.EL.Repository.RepositoryPrintTextCmd.Cut">
            <summary>
 Partial cut.
 </summary>
        </member>
        <member name="T:Ape.EL.Repository.RepositoryPrintTextCmd">
            <summary>
 List of default commands for raw printer usage.
 </summary>
        </member>
        <member name="M:Ape.EL.Reflex.ObjectHelper.GetDefaultObject(System.Type)">
            <summary>
 Get default instance of the object type using default constructor.
 </summary>
        </member>
        <member name="M:Ape.EL.Reflex.ObjectHelper.GetUninitializedObject(System.Type)">
            <summary>
 Get uninitialized instance of the type.
 </summary>
        </member>
        <member name="M:Ape.EL.Reflex.ObjectHelper.GetMethodNameList(System.Type)">
            <summary>
 Get list of functions and methods of a class in string.
 </summary>
        </member>
        <member name="M:Ape.EL.Reflex.ObjectHelper.GetConstantValueList(System.Type)">
            <summary>
 Get list of constant from a class in string.
 </summary>
        </member>
        <member name="M:Ape.EL.Reflex.PropertyHelper.GetPrivatePropertyValue``1(System.Object,System.String)">
            <summary>
 Returns a _private_ Property Value from a given Object. Uses Reflection.
 Throws a ArgumentOutOfRangeException if the Property is not found.
 </summary>
            <typeparam name="T">Type of the Property</typeparam>
            <param name="obj">Object from where the Property Value is returned</param>
            <param name="propName">Propertyname as string.</param>
            <returns>PropertyValue</returns>
        </member>
        <member name="M:Ape.EL.Reflex.PropertyHelper.GetPrivateFieldValue``1(System.Object,System.String)">
            <summary>
 Returns a private Property Value from a given Object. Uses Reflection.
 Throws a ArgumentOutOfRangeException if the Property is not found.
 </summary>
            <typeparam name="T">Type of the Property</typeparam>
            <param name="obj">Object from where the Property Value is returned</param>
            <param name="propName">Propertyname as string.</param>
            <returns>PropertyValue</returns>
        </member>
        <member name="M:Ape.EL.Reflex.PropertyHelper.SetPrivatePropertyValue``1(System.Object,System.String,``0)">
            <summary>
 Sets a _private_ Property Value from a given Object. Uses Reflection.
 Throws a ArgumentOutOfRangeException if the Property is not found.
 </summary>
            <typeparam name="T">Type of the Property</typeparam>
            <param name="obj">Object from where the Property Value is set</param>
            <param name="propName">Propertyname as string.</param>
            <param name="val">Value to set.</param>
        </member>
        <member name="M:Ape.EL.Reflex.PropertyHelper.SetPrivateFieldValue``1(System.Object,System.String,``0)">
            <summary>
 Set a private Property Value on a given Object. Uses Reflection.
 </summary>
            <typeparam name="T">Type of the Property</typeparam>
            <param name="obj">Object from where the Property Value is returned</param>
            <param name="propName">Propertyname as string.</param>
            <param name="val">the value to set</param>
            <exception cref="T:System.ArgumentOutOfRangeException">if the Property is not found</exception>
        </member>
        <member name="M:Ape.EL.Reflex.PropertyHelper.Invoke``1(System.Object,System.String,System.Object[])">
            <summary>
 Invoke a method or function out of an instance.
 </summary>
            <param name="o" />
            <param name="methodName" />
            <param name="args" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Reflex.PropertyHelper.Invoke``1(System.Type,System.String,System.Object[])">
            <summary>
 Invoke a static hidden or public function.
 </summary>
            <typeparam name="T">Return object type.</typeparam>
            <param name="type">Object type that contains the method or function.</param>
            <param name="methodName">The method name.</param>
            <param name="args" />
        </member>
        <member name="M:Ape.EL.Reflex.PropertyHelper.CreateDataTable``1(System.Collections.Generic.List{``0})">
            <summary>
 Create a datatable based on list of visible properties in a type.
 </summary>
        </member>
        <member name="M:Ape.EL.Reflex.PropertyHelper.CreateDataView``1(System.Collections.Generic.List{``0})">
            <summary>
 Create a dataview based on list of visible properties in a type.
 </summary>
        </member>
        <member name="M:Ape.EL.Reflex.PropertyHelper.GetPrivateStaticField``1(System.Type,System.String)">
            <summary>
 Get value of private static field.
 </summary>
            <typeparam name="T" />
            <param name="typ" />
            <param name="fieldName" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Reflex.PropertyHelper.SetPrivateStaticField``1(System.Type,System.String,``0)">
            <summary>
 Set value of private static field.
 </summary>
            <typeparam name="T" />
            <param name="typ" />
            <param name="fieldName" />
            <param name="val" />
            <remarks />
        </member>
        <member name="M:Ape.EL.Reflex.PropertyHelper.GetPropertyByName(System.Object,System.String)">
            <summary>
 Helper method to retrieve control properties.
 Use of GetProperties enables undo and menu updates to work properly.
 Use GetPropertyByName("PropName").SetValue(obj, value) to set value to the object.
 </summary>
        </member>
        <member name="M:Ape.EL.Internal.GetAsmNamespace(System.Boolean)">
            <summary>
 Return root namespace of the entry assembly.
 Return empty string if catch an error.
 </summary>
        </member>
        <member name="M:Ape.EL.Internal.GetAsmFilePath">
            <summary>
 Return file path of the entry assembly.
 </summary>
        </member>
        <member name="M:Ape.EL.Internal.GetAsm">
            <summary>
 Return the origin of entry assembly
 </summary>
        </member>
        <member name="M:Ape.EL.Internal.SetIcon(System.Drawing.Icon@)">
            <summary>
 Internal utility to change icon to either calling assembly's icon.
 </summary>
            <param name="asmicon">The icon to be changed.</param>
            <remarks />
        </member>
        <member name="P:Ape.EL.Internal.DefaultIcon">
            <summary>
 Set icon to replace assembly's icon in SetIcon function.
 </summary>
        </member>
        <member name="M:Ape.EL.Internal.GetMyAssembly">
            <summary>
 Get this method assembly.
 </summary>
        </member>
        <member name="T:Ape.EL.Internal">
            <summary>
 Support internal program processes
 </summary>
            <remarks />
        </member>
        <member name="P:Ape.EL.Licensing.ComponentLicense.LicenseKey">
            <summary>
 Gets the license key granted to this component.
 </summary>
        </member>
        <member name="P:Ape.EL.Licensing.ComponentLicense.IsDemo">
            <summary>
 Gets if this component is running in demo mode.
 </summary>
        </member>
        <member name="M:Ape.EL.Licensing.ComponentLicense.#ctor(System.String)">
            <summary>
 Creates a new <see cref="T:Ape.EL.Licensing.ComponentLicense" /> object.
 </summary>
            <param name="licKey">License key to use.</param>
        </member>
        <member name="M:Ape.EL.Licensing.ComponentLicense.Dispose">
            <summary>
 Disposes this object.
 </summary>
        </member>
        <member name="M:Ape.EL.Licensing.ComponentLicense.Dispose(System.Boolean)">
            <summary>
 Disposes this object.
 </summary>
            <param name="disposing">true if the object is disposing.</param>
        </member>
        <member name="M:Ape.EL.Licensing.ComponentLicense.CreateDemoLicense">
            <summary>
 Creates a demo <see cref="T:Ape.EL.Licensing.ComponentLicense" />.
 </summary>
            <returns>A demo <see cref="T:Ape.EL.Licensing.ComponentLicense" />.</returns>
        </member>
        <member name="M:Ape.EL.Licensing.ComponentLicense.CreateLicense(System.String)">
            <summary>
 Attempts to create a new <see cref="T:Ape.EL.Licensing.ComponentLicense" /> with the specified key.
 </summary>
            <param name="developerKey">Developer Key</param>
            <returns>
                <see cref="T:Ape.EL.Licensing.ComponentLicense" /> with the specified fields set.</returns>
        </member>
        <member name="T:Ape.EL.Licensing.ComponentLicense">
            <summary>
 License granted to components.
 </summary>
        </member>
        <member name="P:Ape.EL.Win32.Hooks.WindowsHook.Installed">
            <summary>
 Gets property indication whether the hook is installed into the system's hook chain.
 </summary>
        </member>
        <member name="M:Ape.EL.Win32.Hooks.WindowsHook.#ctor(Ape.EL.Win32.Hooks.HookType)">
            <summary>
 Creates new hook of specified type with gereral handling function.
 </summary>
            <param name="hook">The type of the hook.</param>
        </member>
        <member name="M:Ape.EL.Win32.Hooks.WindowsHook.#ctor(Ape.EL.Win32.Hooks.HookType,Ape.EL.Win32.Hooks.WindowsHook.HookCallbackFunction)">
            <summary>
 Creates new hook of specified type with user defined handling function.
 </summary>
            <param name="hook">The type of the hook.</param>
            <param name="func">Delegate of the user defined function.</param>
        </member>
        <member name="E:Ape.EL.Win32.Hooks.WindowsHook.HookInvoked">
            <summary>
 Occurs after the hook has been invoked.
 </summary>
        </member>
        <member name="T:Ape.EL.Win32.Hooks.WindowsHook.HookCallbackFunction">
            <summary>
 General hook handling function prototype.
 </summary>
            <param name="code">Specifies the hook code passed to the current hook procedure.</param>
            <param name="wParam">Specifies the wParam code passed to the current hook procedure.</param>
            <param name="lParam">Specifies the lParam code passed to the current hook procedure.</param>
            <returns />
        </member>
        <member name="M:Ape.EL.Win32.Hooks.WindowsHook.CoreHookProc(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
 General Hook hadling function, only raises event with hook's parameters.
 </summary>
            <param name="code">Specifies the hook code passed to the current hook procedure.</param>
            <param name="wParam">Specifies the hook wParam passed to the current hook procedure.</param>
            <param name="lParam">Specifies the hook lParam passed to the current hook procedure.</param>
            <returns>The value returned by CallNextHookEx function</returns>
        </member>
        <member name="M:Ape.EL.Win32.Hooks.WindowsHook.Install">
            <summary>
 Insatalls the hook to the system's hook chain.
 </summary>
        </member>
        <member name="M:Ape.EL.Win32.Hooks.WindowsHook.Uninstall">
            <summary>
 Uninstalls the hook from the system's hook chain.
 </summary>
        </member>
        <member name="M:Ape.EL.Win32.Hooks.WindowsHook.SetWindowsHookEx(Ape.EL.Win32.Hooks.HookType,Ape.EL.Win32.Hooks.WindowsHook.HookCallbackFunction,System.IntPtr,System.Int32)">
            <summary>
 The SetWindowsHookEx function installs an application-defined hook procedure into a hook chain.
 </summary>
            <param name="code">Specifies the type of hook procedure to be installed.</param>
            <param name="func">Pointer to the hook procedure.</param>
            <param name="hInstance">Handle to the DLL containing the hook procedure. The hMod parameter must be set to NULL if the dwThreadId parameter specifies a thread created by the current process.</param>
            <param name="threadID">Specifies the identifier of the thread with which the hook procedure is to be associated.</param>
            <returns>If the function succeeds, the return value is the handle to the hook procedure, otherwise returns NULL.</returns>
        </member>
        <member name="M:Ape.EL.Win32.Hooks.WindowsHook.UnhookWindowsHookEx(System.IntPtr)">
            <summary>
 The UnhookWindowsHookEx function removes a hook procedure installed in a hook chain.
 </summary>
            <param name="hhook">Handle to the hook to be removed.</param>
            <returns>If the function succeeds, the return value is nonzero, otherwise return zero.</returns>
        </member>
        <member name="M:Ape.EL.Win32.Hooks.WindowsHook.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
 The CallNextHookEx function passes the hook information to the next hook procedure in the current hook chain.
 </summary>
            <param name="hhook">Ignored.</param>
            <param name="code">Specifies the hook code passed to the current hook procedure. </param>
            <param name="wParam">Specifies the wParam value passed to the current hook procedure.</param>
            <param name="lParam">Specifies the lParam value passed to the current hook procedure.</param>
            <returns>This value is returned by the next hook procedure in the chain. The current hook procedure must also return this value. The meaning of the return value depends on the hook type.</returns>
        </member>
        <member name="T:Ape.EL.Win32.Hooks.WindowsHook">
            <summary>
 Base class for working with Windows hooks.
 </summary>
        </member>
        <member name="T:Ape.EL.Win32.Kernel32">
            <summary>
 This class is to control error in visual studio by not catching uncaught exception while debugging.
 To apply the fix, open Application.Designer.vb file and add the following .
      MyBase.New(Global.Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows)
 ++   Kernel32.DisableUMCallbackFilter()
      Me.IsSingleInstance = False
 </summary>
            <remarks />
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.DBConnected(System.Data.SqlClient.SqlConnection)">
            <summary>
 Check whether your connection is open or not.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.GetRecords(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
 Set Transaction parameters to get records based on transaction. Please use SqlString.Format to encapsulate single quote.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.GetAdapter(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction@)">
            <summary>
 Please use SqlString.Format to encapsulate single quote.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.GetDataTable(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
 Please use SqlString.Format to encapsulate single quote.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.GetDataView(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
 Please use SqlString.Format to encapsulate single quote.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.GetDataRowView(System.Data.SqlClient.SqlConnection,System.String,System.Int32)">
            <summary>
 Please use SqlString.Format to encapsulate single quote.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Int32)">
            <summary>
 Get first column result from query. Please use SqlString.Format to encapsulate single quote.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
 Please use SqlString.Format to encapsulate single quote.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.ResetConnection(System.Data.SqlClient.SqlConnection@)">
            <summary>
 Try to restart connection if the state is closed.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.IsSqlTransportException(System.Exception)">
            <summary>
 Determine if exception is caused by sql transport forcibly closed.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.AddWithValueNull(System.Data.SqlClient.SqlParameterCollection,System.String,System.Object)">
            <summary>
 Adds a value to the end of the System.Data.SqlClient.SqlParameterCollection. This will convert nothing value to DbNull.Value.
 </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="value">The value to be added.</param>
            <returns>A System.Data.SqlClient.SqlParameter object.</returns>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.AddWithValueNull(System.Data.SqlClient.SqlCommand,System.String,System.Object,System.Boolean,System.String,System.Type)">
            <summary>
 Adds a value to the end of the System.Data.SqlClient.SqlParameterCollection. This will convert nothing value to DbNull.Value.
 This function will also update the SqlCommand.CommandText to use default value when param value is null (using ISNULL) for update query.
 </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="value">The value to be added.</param>
            <param name="useNullQuery">Enable or disable updating the commandText to use ori value when its value is null (only on update query, not for insert)</param>
            <param name="setNullValue">Value to replace in ISNULL(@param,nullValue)</param>
            <param name="valueType">You must explicitly declare the value's type in case the value is nothing. Byte() and Drawing.Image must declare.</param>
            <returns>A System.Data.SqlClient.SqlParameter object.</returns>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.PrintValues(System.Data.SqlClient.SqlParameterCollection)">
            <summary>
 Print Sql Parameters from collection to console.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.FDateTime(System.String)">
            <summary>
 Format string to dd/MMM/yyyy HH:mm:ss.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.FDate(System.String)">
            <summary>
 Format string to dd/MMM/yyyy.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.FTime(System.String)">
            <summary>
 Format string to HH:mm:ss.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.ToDateTime(System.String)">
            <summary>
 Convert string to DateTime type.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.IsEmpty(System.String)">
            <summary>
 Check for IsNullOrEmpty for the string.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.ToEmpty(System.String)">
            <summary>
 Neutralize all null string to String.Empty.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.Append(System.String@,System.String)">
            <summary>
 Append string using StringBuilder.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.AppendLn(System.String@,System.String)">
            <summary>
 Append string using StringBuilder.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.ToPoint(System.String)">
            <summary>
 Convert string (from point.ToString) to point.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.ToSize(System.String)">
            <summary>
 Convert string (from size.ToString) to size.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.Remove(System.String,System.String[])">
            <summary>
 Remove all characters in the param if match exactly in the string.
 The removal is first come first remove. 
 Means if some params extends the previous ones, it might not be removed as the characters have been removed previously.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.Contains(System.String,System.String[])">
            <summary>
 Check if any of the param value contained in the sender. Case ignored.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.First(System.String,System.Int32)">
            <summary>
 Return first n characters from string.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.Last(System.String,System.Int32)">
            <summary>
 Return last n characters from string.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.ContainsUnicodeCharacter(System.String)">
            <summary>
 Return true if input value contain unicode character.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.RemoveEmpty(System.Collections.Generic.List{System.String}@)">
            <summary>
 Remove all empty elements from string list.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.RemoveFirst(System.Collections.Generic.List{System.String}@)">
            <summary>
 Remove first element in the list.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.RemoveLast(System.Collections.Generic.List{System.String}@)">
            <summary>
 Remove last element in the list.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.RemoveEmpty(System.String[]@)">
            <summary>
 Remove all empty elements from string array.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.RemoveAt(System.String[]@,System.Int32)">
            <summary>
 Remove element at specific position in the array.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.RemoveFirst(System.String[]@)">
            <summary>
 Remove first element in the array.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.RemoveLast(System.String[]@)">
            <summary>
 Remove last element in the array.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.SplitNewLine(System.String@)">
            <summary>
 Split string by new lines. It will remove all empty elements from string array.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.FDateTime(System.DateTime)">
            <summary>
 Convert DateTime and format to dd/MMM/yyyy HH:mm:ss.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.FDate(System.DateTime)">
            <summary>
 Convert DateTime and format to dd/MMM/yyyy.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.FTime(System.DateTime)">
            <summary>
 Convert DateTime and format to HH:mm:ss.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.InvokeIfRequired(System.Windows.Forms.Control,System.Action{System.Windows.Forms.Control})">
            <summary>
 Usage: 
 ControlName.InvokeIfRequired(Sub(x As ControlType) x.AppendText(str))
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.BeginInvokeIfRequired(System.Windows.Forms.Control,System.Action{System.Windows.Forms.Control})">
            <summary>
 Usage: 
 ControlName.BeginInvokeIfRequired(Sub(x As ControlType) x.AppendText(str))
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.GetThread(System.Windows.Forms.Control)">
            <summary>
 Find current thread of a control.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.GetThreadId(System.Windows.Forms.Control)">
            <summary>
 Find current thread id of a control.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.Clear(System.Data.DataView@)">
            <summary>
 Delete all records in provided dataview.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.Clear(System.Data.DataTable@)">
            <summary>
 Delete all records in provided datatable.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.Copy(System.Data.DataView)">
            <summary>
 Copies both the structure and data for this Dataview using System.Data.DataTable's Copy method.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.Copy(System.Data.DataRow)">
            <summary>
 Clone a datarow value.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.CodeBaseEx(System.Reflection.Assembly)">
            <summary>
 Get assembly's Codebase without file:///.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.BinaryPath(System.Reflection.Assembly)">
            <summary>
 Get assembly's binary path. Able to return path in local and network environment.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.CopyTo(System.IO.Stream,System.IO.Stream)">
            <summary>
 Reads the bytes from the current stream and writes them to another stream.
 </summary>
            <param name="output">The stream to which the contents of the current stream will be copied.</param>
            <remarks>This function is to adapt same method name implementation in .net 4.0.</remarks>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.OptNew(Ape.EL.Data.DbGeneral@,System.String,System.Type)">
            <summary> Create new oGeneral optionally. </summary>
            <param name="T">Set T if oGeneral's type is derived from DbGeneral.</param>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.OptDis(Ape.EL.Data.DbGeneral@)">
            <summary> Dispose oGeneral optionally. </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.OptBeginTran(Ape.EL.Data.DbGeneral@)">
            <summary> Begin a simple new transaction optionally. Commit or rollback after usage. </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.OptCommit(Ape.EL.Data.DbGeneral@)">
            <summary> Commit optionally created transaction and dispose. </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.OptRollback(Ape.EL.Data.DbGeneral@)">
            <summary> Rollback optionally created transaction and dispose. </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.ClearList``1(System.Collections.Generic.List{``0},System.Boolean)">
            <summary>
 Dispose the collection items when clearing.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.CreateDataView``1(System.Collections.Generic.List{``0})">
            <summary>
 Create a dataview from list of structure with values.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.CreateDataTable``1(System.Collections.Generic.List{``0})">
            <summary>
 Create a datatable from list of structure with values.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.CreateDataView``1(``0)">
            <summary>
 Create a dataview from structure with values.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.CreateDataTable``1(``0)">
            <summary>
 Create a datatable from structure with values.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.ToStructureList``1(System.Data.DataView)">
            <summary>
 Convert whole data of dataview with specific structure into list of structures.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.ToStructureList``1(System.Data.DataTable)">
            <summary>
 Convert whole data of datatable with specific structure into list of structures.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.ToStructure``1(System.Data.DataRowView)">
            <summary>
 Copy datarowview values (with columns same as provided structure properties) to the class properties.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.ToStructure``1(System.Data.DataRow)">
            <summary>
 Copy datarowview values (with columns same as provided structure properties) to the class properties.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.ToDataRow(System.Data.DataRowView)">
            <summary>
 Get datarow from datarowview.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.ToDataRowView(System.Data.DataRow)">
            <summary>
 Get datarowview from datarow.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.ToStr``1(``0)">
            <summary>
 Get empty string when obj is nothing. This is to avoid null reference exception.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.JSONSerialize``1(``0)">
            <summary>
 Serialize JSON using JavaScriptSerializer method.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.JSONDeserialize``1(System.String)">
            <summary>
 Deserialize JSON using JavaScriptSerializer method.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.NJSONSerialize``1(``0)">
            <summary>
 Serialize JSON using Newtonsoft method with default settings.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.NJSONSerialize``1(``0,System.Boolean,System.Boolean)">
            <summary>
 Serialize JSON using Newtonsoft method.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.NJSONSerializeF``1(``0)">
            <summary>
 Serialize JSON using Newtonsoft method with default settings. Formated / indented.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.NJSONSerializeF``1(``0,System.Boolean,System.Boolean)">
            <summary>
 Serialize JSON using Newtonsoft method. Formated / indented.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.NJSONDeserialize``1(System.String)">
            <summary>
 Deserialize JSON using Newtonsoft method.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.Swap``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
 Swap position between 2 indexes in a list.
 </summary>
        </member>
        <member name="T:Ape.EL.Extensions.LIBExtensions.PropKey">
            <summary>
 Required by GetExProp and SetExProp to indicate a key in the dictionary.
 </summary>
        </member>
        <member name="F:Ape.EL.Extensions.LIBExtensions.PropDictionary">
            <summary>
 Required by GetExProp and SetExProp to store values in dictionary.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.GetExPropertyStr``1(``0,System.String)">
            <summary>
 Get a custom property by name. This is not type safe. Value will be kept lifetime even the object is already disposed.
 </summary>
            <param name="propName">The custom property name.</param>
            <returns>Return value as string.</returns>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.GetExProperty``1(``0,System.String)">
            <summary>
 Get a custom property by name. This is not type safe. Value will be kept lifetime even the object is already disposed.
 </summary>
            <param name="propName">The custom property name.</param>
            <returns>Return a value previously set using SetExProperty. Return DBNull.Value as default.</returns>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.SetExProperty``1(``0,System.String,System.Object)">
            <summary>
 Set a custom property by name. This is not type safe. Value will be kept lifetime even the object is already disposed.
 </summary>
            <param name="propName">The custom property name.</param>
            <param name="value">The value of the custom property.</param>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.HasProperty(System.Type,System.String)">
            <summary>
 Determine if following object type contains public property of propertyName.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.IsControl(System.Type)">
            <summary>
 Determine if following object type is windows form control or component type with Name property.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.IsFullScreen(System.Windows.Forms.Form)">
            <summary>
 Determine whether form is fullscreen by checking its FormBorderStyle (None) and WindowState (Maximized).
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.GetString(System.Enum,System.Object[])">
            <summary>
 Extends Localizer.GetString function to enums. Return empty string when exception is caught.
 Must have LocalizableString attribute on the enum.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.HasAttrib``1(System.Enum)">
            <summary>
 Check if contain attribute.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.GetValuatorString(System.Enum,System.Object[])">
            <summary>
 Extends Valuator.GetString function to enums. Return empty string when exception is caught.
 Must have Valuator attribute on the enum.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.HasFlag(System.Enum,System.Enum)">
            <summary>
 A FX 3.5 way to mimic the FX4 "HasFlag" method.
 </summary>
            <param name="variable">The tested enum.</param>
            <param name="value">The value to test.</param>
            <returns>True if the flag is set. Otherwise false.</returns>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.GetMemberType(System.Collections.CollectionBase)">
            <summary>
 Determine member type of a collection. Collection must have at least 1 member.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.SetName(System.Threading.Thread,System.String)">
            <summary>
 Rename a thread that has been named before.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.SoftStart(System.ServiceProcess.ServiceController,System.String[])">
            <summary>
 Continue paused service; Start stopped service.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.LIBExtensions.Restart(System.ServiceProcess.ServiceController)">
            <summary>
 Continue paused service; Start stopped service.
 </summary>
        </member>
        <member name="T:Ape.EL.Extensions.LIBExtensions">
            <summary>
 This is an extensions module.
 </summary>
        </member>
        <member name="M:Ape.EL.Licensing.ComponentLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
 Gets a license for an instance or type of component.
 </summary>
            <param name="context">A <see cref="T:System.ComponentModel.LicenseContext" /> that specifies where you can use the licensed object.</param>
            <param name="type">A <see cref="T:System.Type" /> that represents the component requesting the license.</param>
            <param name="instance">An object that is requesting the license.</param>
            <param name="allowExceptions">true if a <see cref="T:System.ComponentModel.LicenseException" /> should be thrown when the component cannot be granted a license; otherwise, false.</param>
            <returns>A valid <see cref="T:System.ComponentModel.License" />.</returns>
        </member>
        <member name="M:Ape.EL.Licensing.ComponentLicenseProvider.GetDeveloperKey(System.Type)">
            <summary>
 Returns the string value of the DeveloperKey static property on the control.
 </summary>
            <param name="type">Type of licensed component with a DeveloperKey property.</param>
            <returns>String value of the developer key.</returns>
        </member>
        <member name="T:Ape.EL.Licensing.ComponentLicenseProvider">
            <summary>
 Provides Component License Validation.
 </summary>
        </member>
        <member name="M:Ape.EL.Misc.AssemblyHelper.IsValid(System.String)">
            <summary>
 Determine whether the provided file is valid .Net assembly.
 </summary>
        </member>
        <member name="M:Ape.EL.Misc.AssemblyHelper.GetTrueEntryAssembly">
            <summary>
 Get entry assembly based on program runtime (asp or winform).
 </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Misc.AssemblyHelper.GetAspAssembly">
            <summary>
 Find an assembly through stack trace which is before System.Web assembly.
 Only used in GetTrueEntryAssembly!
 </summary>
        </member>
        <member name="M:Ape.EL.Misc.AssemblyHelper.FindType(System.String)">
            <summary>
 Get original Type of a Type's FullName.
 https://stackoverflow.com/questions/1825147/type-gettypenamespace-a-b-classname-returns-null
 </summary>
            <param name="typeName">The Type's FullName.</param>
            <returns>The type.</returns>
            <remarks>Make sure you have loaded the assembly of the origin TypeName.</remarks>
        </member>
        <member name="M:Ape.EL.Misc.AssemblyHelper.LoadAssembly(System.String)">
            <summary>
 Load plugins libraries dynamically to memory. Only .Net Framework same or less than this assembly will be loaded.
 </summary>
            <param name="asmPath">Path or file is accepted.</param>
            <remarks />
        </member>
        <member name="M:Ape.EL.Misc.AssemblyHelper.GetReferencedAssemblies(System.Reflection.AssemblyName)">
            <summary>
 Find all assemblies which have referenced from provided AssemblyName.
 </summary>
        </member>
        <member name="M:Ape.EL.Misc.AssemblyHelper.GetReferencedAssemblies(System.Reflection.AssemblyName,System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
 Used by GetReferencedAssemblies.
 </summary>
        </member>
        <member name="T:Ape.EL.Win32.Hooks.HookEventArgs">
            <summary>
 Class containing the information about invoked hook.
 </summary>
        </member>
        <member name="T:Ape.EL.Win32.Hooks.HookType">
            <summary>
 Enum defining hook types.
 </summary>
        </member>
        <member name="M:Ape.EL.Network.RemoteDesktop.GetSessions">
            <summary>
 Get an array of remote desktop sessions information.
 </summary>
        </member>
        <member name="M:Ape.EL.Network.RemoteDesktop.GetRDPInfo(System.String)">
            <summary>
 Get remote desktop info, if WTSStationName is "Console", then it is local and not RDP.
 </summary>
        </member>
        <member name="P:Ape.EL.My.Resources.Resources.ResourceManager">
            <summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
        </member>
        <member name="P:Ape.EL.My.Resources.Resources.Culture">
            <summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
        </member>
        <member name="T:Ape.EL.My.Resources.Resources">
            <summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
        </member>
        <member name="M:Ape.EL.WinForm.ScreenCapture.CaptureScreen">
            <summary>
 Creates an Image object containing a screen shot of the entire desktop.
 </summary>
            <returns />
        </member>
        <member name="M:Ape.EL.WinForm.ScreenCapture.CaptureWindow(System.IntPtr)">
            <summary>
 Creates an Image object containing a screen shot of a specific window.
 </summary>
            <param name="handle">The handle to the window. (In windows forms, this is obtained by the Handle property)</param>
            <returns />
        </member>
        <member name="M:Ape.EL.WinForm.ScreenCapture.CaptureWindowToFile(System.IntPtr,System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
 Captures a screen shot of a specific window, and saves it to a file.
 </summary>
            <param name="handle" />
            <param name="filename" />
            <param name="format" />
        </member>
        <member name="M:Ape.EL.WinForm.ScreenCapture.CaptureScreenToFile(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
 Captures a screen shot of the entire desktop, and saves it to a file.
 </summary>
            <param name="filename" />
            <param name="format" />
        </member>
        <member name="T:Ape.EL.WinForm.ScreenCapture">
            <summary>
 Provides functions to capture the entire screen, or a particular window, and save it to a file.
 </summary>
        </member>
        <member name="M:Ape.EL.App.UserAccessControl.#ctor(System.String)">
            <summary>
 Initialization must include ObjectID.
 </summary>
            <param name="ObjectID" />
            <remarks />
        </member>
        <member name="P:Ape.EL.App.UserAccessControl.HasColumnChooser">
            <summary>
 Indicate whether this UA use AllowColumnChooser.
 </summary>
        </member>
        <member name="P:Ape.EL.App.UserAccessControl.HasGridLayout">
            <summary>
 Indicate whether this UA use AllowSaveLayout and AllowRestoreLayout.
 </summary>
        </member>
        <member name="P:Ape.EL.App.UserAccessControl.HasCloneFunction">
            <summary>
 Indicate whether this UA use AllowClone.
 </summary>
        </member>
        <member name="P:Ape.EL.App.UserAccessControl.HasCopyFunction">
            <summary>
 Indicate whether this UA use AllowCopyTo and AllowCopyFrom.
 </summary>
        </member>
        <member name="P:Ape.EL.App.UserAccessControl.ObjectGroup">
            <summary>
 Eg. Home, Customer, Vendor, Branch.
 </summary>
            <value />
            <returns />
            <remarks />
        </member>
        <member name="P:Ape.EL.App.UserAccessControl.ObjectID">
            <summary>
 The module identifier, Eg. Sales, CustomerHistory, Export, Import.
 </summary>
            <value />
            <returns />
            <remarks />
        </member>
        <member name="P:Ape.EL.App.UserAccessControl.ObjectDescription">
            <summary>
 The module description, Eg. frmImport.Name &gt;&gt; result as Import.
 </summary>
            <value />
            <returns />
            <remarks />
        </member>
        <member name="P:Ape.EL.App.UserAccessControl.ObjectTruncated">
            <summary>
 Indicate whether this UA is not used.
 </summary>
            <value />
            <returns />
            <remarks />
        </member>
        <member name="P:Ape.EL.App.UserAccessControl.CustomRepository">
            <summary>
 Add additional information to extends this user access control.
 </summary>
        </member>
        <member name="P:Ape.EL.Repository.RepositoryItemErrorLog.LogLevel">
            <summary>
 Get or set logging level. Default value is INFO.
 </summary>
        </member>
        <member name="P:Ape.EL.Repository.RepositoryItemErrorLog.TimeZoneOffset">
            <summary>
 Get or set logging timestamp timezone offset by hour.
 </summary>
        </member>
        <member name="P:Ape.EL.Repository.RepositoryItemErrorLog.Email">
            <summary>
 Get an object containing properties and methods specific to an email account.
 </summary>
        </member>
        <member name="P:Ape.EL.Repository.RepositoryItemErrorLog.EmailRecipient">
            <summary>
 Get or set email recipient of the error log.
 </summary>
        </member>
        <member name="P:Ape.EL.Repository.RepositoryItemErrorLog.ErrorLogDirectory">
            <summary>
 Get or set error log directory. Not recommended to change. Default value points to [AppData\Local\App\ProgramRootNamespace].
 </summary>
        </member>
        <member name="P:Ape.EL.Repository.RepositoryItemErrorLog.ErrorLogFilename">
            <summary>
 Get or set error log filename. Not recommended to change. Default value is [error.log].
 </summary>
        </member>
        <member name="P:Ape.EL.Repository.RepositoryItemErrorLog.ErrorLogPath">
            <summary>
 Get error log full path.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.SqlServerInfo.#ctor">
            <summary>
 Initializes a new instance of the <see cref="T:Ape.EL.Data.SqlServerInfo" /> class.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.SqlServerInfo.#ctor(System.Net.IPAddress,System.Byte[])">
            <summary>
 Initializes a new instance of the <see cref="T:Ape.EL.Data.SqlServerInfo" /> class.
 </summary>
            <param name="ip">The ip.</param>
            <param name="info">The info.</param>
        </member>
        <member name="M:Ape.EL.Data.SqlServerInfo.#ctor(System.Net.IPAddress,System.String)">
            <summary>
 Initializes a new instance of the <see cref="T:Ape.EL.Data.SqlServerInfo" /> class.
 </summary>
            <param name="ip">The ip address.</param>
            <param name="info">The info.</param>
        </member>
        <member name="P:Ape.EL.Data.SqlServerInfo.Address">
            <summary>
 Gets the IP address.
 </summary>
            <value>The address.</value>
            <remarks>Presently, this is not implemented and will always return null,</remarks>
        </member>
        <member name="P:Ape.EL.Data.SqlServerInfo.ServerName">
            <summary>
 Gets the name of the server.
 </summary>
            <value>The name of the server.</value>
        </member>
        <member name="P:Ape.EL.Data.SqlServerInfo.InstanceName">
            <summary>
 Gets the name of the instance.
 </summary>
            <value>The name of the instance.</value>
        </member>
        <member name="P:Ape.EL.Data.SqlServerInfo.IsClustered">
            <summary>
 Gets a value indicating whether this instance is clustered.
 </summary>
            <value>
                <see langword="true" /> if this instance is clustered; otherwise, <see langword="false" />.
 </value>
        </member>
        <member name="P:Ape.EL.Data.SqlServerInfo.Version">
            <summary>
 Gets the version.
 </summary>
            <value>The version.</value>
        </member>
        <member name="P:Ape.EL.Data.SqlServerInfo.TcpPort">
            <summary>
 Gets the TCP port.
 </summary>
            <value>The TCP port.</value>
        </member>
        <member name="P:Ape.EL.Data.SqlServerInfo.NamedPipe">
            <summary>
 Gets the named pipe.
 </summary>
            <value>The named pipe.</value>
        </member>
        <member name="P:Ape.EL.Data.SqlServerInfo.Catalogs">
            <summary>
 Gets the catalogs.
 </summary>
            <value>The catalogs.</value>
        </member>
        <member name="P:Ape.EL.Data.SqlServerInfo.UserId">
            <summary>
 Gets or sets the user id.
 </summary>
            <value>The user id.</value>
        </member>
        <member name="P:Ape.EL.Data.SqlServerInfo.Password">
            <summary>
 Gets or sets the password.
 </summary>
            <value>The password.</value>
        </member>
        <member name="P:Ape.EL.Data.SqlServerInfo.IntegratedSecurity">
            <summary>
 Gets or sets a value indicating whether [integrated security].
 </summary>
            <value>
                <see langword="true" /> if [integrated security]; otherwise, <see langword="false" />.
 </value>
        </member>
        <member name="P:Ape.EL.Data.SqlServerInfo.TimeOut">
            <summary>
 Gets or sets the time out.
 </summary>
            <value>The time out.</value>
        </member>
        <member name="M:Ape.EL.Data.SqlServerInfo.TestConnection">
            <summary>
 Tests the connection.
 </summary>
            <returns />
        </member>
        <member name="M:Ape.EL.Data.SqlServerInfo.ToString">
            <summary>
 Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
 </summary>
            <returns>
 A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
 </returns>
        </member>
        <member name="M:Ape.EL.Data.SqlServerInfo.Seek">
            <summary>
 Seeks SQL servers on this network.
 </summary>
            <returns>An array of SqlServerInfo objects describing Sql Servers on this network</returns>
        </member>
        <member name="T:Ape.EL.Data.SqlServerInfo">
            <summary>
 Class SqlServerInfo <p />
 Provides information about a MS SQL server instance.
 </summary>
            <example>
                <pre>
    SqlServerInfo[] servs = SqlServerInfo.Seek();
    foreach(SqlServerInfo inst in servs)
    {
         Console.WriteLine("Server: {0}, InstanceName: {1}, Version: {2}", 
                         serv.ServerName, serv.InstanceName, serv.Version);
         foreach(string db in serv.Catalogs)
         {
             Console.WriteLine("      Database: {0}", db);
         }
    }
</pre>
            </example>
            <remarks>
Copyright © 2005, James M. Curran. <br />
 First published on CodeProject.com, Nov 2005 <br />
May be used freely.
</remarks>
        </member>
        <member name="P:Ape.EL.Data.DbGeneral.WithGeneral">
            <summary> Indicate that this object is instantiated optionally and should be disposed. Please check ClGeneralHelper. Internal use only. </summary>
        </member>
        <member name="P:Ape.EL.Data.DbGeneral.WithTransaction">
            <summary> Indicate that this object's Transaction property is instantiated optionally and should be disposed. Please check ClGeneralHelper. Internal use only. </summary>
        </member>
        <member name="P:Ape.EL.Data.DbGeneral.Transaction">
            <summary>
 Park an SqlTransaction to be used further in the data layer.
 </summary>
        </member>
        <member name="P:Ape.EL.Data.DbGeneral.Creator">
            <summary>
 Get this object's method initializer.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbGeneral.GetRecords(System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
 Set Transaction parameters to get records based on transaction. Please use SqlString.Format to encapsulate single quote.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbGeneral.GetAdapter(System.String)">
            <summary>
 Please use SqlString.Format to encapsulate single quote.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbGeneral.GetDataTable(System.String)">
            <summary>
 Please use SqlString.Format to encapsulate single quote.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbGeneral.GetDataView(System.String)">
            <summary>
 Please use SqlString.Format to encapsulate single quote.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbGeneral.GetDataRowView(System.String,System.Int32)">
            <summary>
 Please use SqlString.Format to encapsulate single quote.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbGeneral.ExecuteScalar(System.String,System.Int32)">
            <summary>
 Get first column result from query. Please use SqlString.Format to encapsulate single quote.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbGeneral.ExecuteNonQuery(System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
 Please use SqlString.Format to encapsulate single quote.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbGeneral.GetBatchStatements(System.String)">
            <summary>
 Separate batch query into several statements.
 The GO must not between block-comments like /* GO */
 </summary>
        </member>
        <member name="T:Ape.EL.Data.DbGeneral">
            <summary>
 Provide main interface to query database.
 </summary>
            <remarks />
        </member>
        <member name="M:Ape.EL.Data.SqlLocator.GetServersTableEx">
            <summary>
 Shorter cleaner code to get server names instances, includes database version, still cant show local instances!
 </summary>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Localization.SupportedLanguageHelper.GetSupportedLanguageTable">
            <summary>
 Columns: Name, Id.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.TypeHelper.ChangeType(System.Object,System.Type)">
            <summary>
 Alternative to Convert.ChangeType and CTypeDynamic to handle object type conversion through dynamic variable type.
 sauce: http://forums.asp.net/post/4167011.aspx
 </summary>
            <param name="value" />
            <param name="type" />
            <returns />
            <remarks />
        </member>
        <member name="T:Ape.EL.WinForm.ControlManager">
            <summary>
 Make the initated control movable and resizable just like in designer.
 http://www.codeproject.com/Tips/709121/Move-and-Resize-Controls-on-a-Form-at-Runtime-With
 To use this, please declare as following:
 ControlMoverOrResizer.Init(button1)
 </summary>
            <remarks />
        </member>
        <member name="M:Ape.EL.App.Cmd.ParseCommandLineArgs``1(``0,System.String[])">
            <summary>
 Parse argument passed to this program when loaded. Each argument must not have space (otherwise need to be wrapped in double quotes).
 </summary>
        </member>
        <member name="M:Ape.EL.App.Cmd.Run(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
 Execute a command line.
 </summary>
            <param name="command">Your command.</param>
            <param name="arguments">Your command arguments.</param>
            <param name="permanent">Retain command window after execution.</param>
            <param name="noWindow">Hide the command prompt window when executed.</param>
            <remarks />
        </member>
        <member name="M:Ape.EL.App.Cmd.LaunchProgram(System.String,System.String)">
            <summary>
 Launch a program and terminate cmd that calls it.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbManager.RestoreDatabase(Ape.EL.Data.DbGeneral,System.String,System.String,System.String,System.Boolean)">
            <summary>
 Restore database file from zip or bak.
 </summary>
            <param name="backupFileName">file as zip or bak</param>
            <param name="restorePath">Physical file path</param>
        </member>
        <member name="M:Ape.EL.Data.DbManager.GetDatabasePath(Ape.EL.Data.DbGeneral,System.String)">
            <summary>
 Get database's physical path of log and mdf files.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbManager.IsDatabaseExist(Ape.EL.Data.DbGeneral,System.String)">
            <summary>
 Check if specified database name exist.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbManager.GetRemconList">
            <summary>
 Get list of saved remote connection from setting.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbManager.SaveRemcon(Ape.EL.Data.DbManager.ConnectionInfo)">
            <summary>
 Save into remote connection history list.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbManager.DeleteRemcon(Ape.EL.Data.DbManager.ConnectionInfo)">
            <summary>
 Delete from remote connection history list.
 </summary>
        </member>
        <member name="P:Ape.EL.Data.DbManager.RemconPath">
            <summary>
 Get path of remove connection setting file.
 </summary>
        </member>
        <member name="T:Ape.EL.Data.DbSettingDevice">
            <summary>
 General helper to wrap device setting's structure (based on registry). Inherited from DbSetting.
 </summary>
        </member>
        <member name="F:Ape.EL.Localization.SupportedLanguage.CultureDictionary">
            <summary>
 Internally used. Listing out all language culture based on NeutralCulture.
 EXTERNALLY FOR REFERENCE USAGE ONLY!!! DO NOT MODIFY THE VALUE OUT OF THIS CLASS!!!
 This function is hidden from Intellisense.
 </summary>
        </member>
        <member name="F:Ape.EL.Localization.SupportedLanguage.SupportedLanguage">
            <summary>
 List of supported languages in here. You can add using AddSupportedLanguage function or delete using DelSupportedLanguage.
 </summary>
            <remarks>By default "en" is in SupportedLanguage.</remarks>
        </member>
        <member name="M:Ape.EL.Localization.SupportedLanguage.AddSupportedLanguage(System.String)">
            <summary>
 Add new supported language.
 </summary>
            <param name="id">NeutralCulture name.</param>
        </member>
        <member name="M:Ape.EL.Localization.SupportedLanguage.AddSupportedLanguage(System.String[])">
            <summary>
 Add new supported languages in range.
 </summary>
            <param name="ids">NeutralCulture name.</param>
        </member>
        <member name="M:Ape.EL.Localization.SupportedLanguage.DelSupportedLanguage(System.String)">
            <summary>
 Remove supported language.
 </summary>
            <param name="id">NeutralCulture name.</param>
        </member>
        <member name="M:Ape.EL.Localization.SupportedLanguage.DelSupportedLanguage(System.String[])">
            <summary>
 Remove supported languages in range.
 </summary>
            <param name="ids">NeutralCulture name.</param>
        </member>
        <member name="M:Ape.EL.Localization.SupportedLanguage.DelAllSupportedLanguage">
            <summary>
 Delete all supported languages.
 </summary>
        </member>
        <member name="M:Ape.EL.Win32.WmiHelper.WMIQuery(System.String)">
            <summary>
 Get datatable from a WMI query.
 </summary>
        </member>
        <member name="P:Ape.EL.Misc.WebHelper.ReturnMsg`1.Result">
            <summary>
 Define result as succeed
 </summary>
            <value />
            <returns />
            <remarks />
        </member>
        <member name="P:Ape.EL.Misc.WebHelper.ReturnMsg`1.Message">
            <summary>
 Message for success or failure
 </summary>
            <value />
            <returns />
            <remarks />
        </member>
        <member name="P:Ape.EL.Misc.WebHelper.ReturnMsg`1.Obj">
            <summary>
 Returned object as T
 </summary>
            <value />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Misc.WebHelper.ReturnMsg`1.#ctor(System.Boolean,System.String,`0)">
            <summary>
 Create a new ReturnMsg of T
 </summary>
            <param name="res">Define result as succeed</param>
            <param name="msg">Message for success or failure</param>
            <param name="o">Returned object as T</param>
            <remarks />
        </member>
        <member name="M:Ape.EL.Misc.WebHelper.ReturnMsg`1.CheckError(System.Boolean)">
            <summary>
 Throw Message property as an exception if it is not empty.
 </summary>
            <param name="asApplicationException">By default, it will throw ServerExecutionException which message contains info that the error comes from server execution.</param>
            <returns>Result property.</returns>
        </member>
        <member name="T:Ape.EL.Misc.WebHelper.ReturnMsg`1">
            <summary>
 Use this class to return as JSON string template. Append your specific object into Obj.
 </summary>
            <typeparam name="T">Obj's object type</typeparam>
            <remarks />
        </member>
        <member name="T:Ape.EL.Misc.WebHelper.ServerExecutionException">
            <summary>
 Application exception type for using GetWebAPI or PostWebAPI.
 </summary>
        </member>
        <member name="P:Ape.EL.Misc.WebHelper.WebAPIEncoding">
            <summary>
 Default encoding used in GetWebAPI and PostWebAPI. Default value is UTF8Encoding.
 </summary>
        </member>
        <member name="M:Ape.EL.Misc.WebHelper.FormatUri(System.String@)">
            <summary>
 Make Uri starts with Http.
 </summary>
        </member>
        <member name="M:Ape.EL.Misc.WebHelper.GetWebAPI(System.String,System.String)">
            <summary>
 Execute get method for web api and return result as string.
 </summary>
        </member>
        <member name="M:Ape.EL.Misc.WebHelper.PostWebAPI(System.String,System.String,System.String)">
            <summary>
 Execute post method for web api and return result as string.
 </summary>
        </member>
        <member name="M:Ape.EL.Misc.WebHelper.IsWebAlive(System.String)">
            <summary>
 Determine if provided uri is still alive.
 </summary>
            <param name="Uri" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Misc.WebHelper.HasInternetConnection">
            <summary>
 Check if there is internet connection.
 </summary>
        </member>
        <member name="T:Ape.EL.Repository.RepositoryItem">
            <summary>
 Serves as the base for all repository items.
 </summary>
        </member>
        <member name="P:Ape.EL.Data.DbSetting.MySetValue">
            <summary>
 Get or set a method to be called after Value property is set. You can use this for save value to registry or database.
 </summary>
        </member>
        <member name="P:Ape.EL.Data.DbSetting.MySetBinary">
            <summary>
 Get or set a method to be called after Binary property is set. You can use this for save value to registry or database.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbSetting.SetValue(System.String)">
            <summary>
 Required to invoke MySetValue.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbSetting.SetBinary(System.Byte[])">
            <summary>
 Required to invoke MySetBinary.
 </summary>
        </member>
        <member name="P:Ape.EL.Data.DbSetting.ID">
            <summary>
 Get or set main identifier for the DbSetting.
 </summary>
        </member>
        <member name="P:Ape.EL.Data.DbSetting.Value">
            <summary>
 Get or set value in string.
 </summary>
        </member>
        <member name="P:Ape.EL.Data.DbSetting.Binary">
            <summary>
 Get or set value for binary data in byte array.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.DbSetting.ToString">
            <summary>
 Return Value property.
 </summary>
        </member>
        <member name="P:Ape.EL.Data.DbSetting.ValBool">
            <summary>
 Get or set Value property as boolean, string must be in "True" or "False" or empty.
 </summary>
        </member>
        <member name="P:Ape.EL.Data.DbSetting.ValDec">
            <summary>
 Get or set Value property as decimal.
 </summary>
        </member>
        <member name="P:Ape.EL.Data.DbSetting.ValInt">
            <summary>
 Get or set Value property as integer.
 </summary>
        </member>
        <member name="P:Ape.EL.Data.DbSetting.ValLong">
            <summary>
 Get or set Value property as Long.
 </summary>
        </member>
        <member name="P:Ape.EL.Data.DbSetting.ValDt">
            <summary>
 Get or set Value property as datetime.
 </summary>
        </member>
        <member name="P:Ape.EL.Data.DbSetting.ValEnum(System.Type)">
            <summary>
 Get Value property as an enum object type.
 </summary>
        </member>
        <member name="P:Ape.EL.Data.DbSetting.ValImage">
            <summary>
 Get or set Binary property as Image.
 </summary>
        </member>
        <member name="P:Ape.EL.Data.DbSetting.BinObj">
            <summary>
 Get or set Binary property as object which directly translate to Binary using ByteArrayToObject or ObjectToByteArray converter.
 </summary>
        </member>
        <member name="P:Ape.EL.Data.DbSetting.Remark">
            <summary>
 Get or set Remark of the selected DbSetting.
 </summary>
        </member>
        <member name="P:Ape.EL.Data.DbSetting.DefaultValue">
            <summary>
 Get or set default value of the selected DbSetting.
 </summary>
        </member>
        <member name="T:Ape.EL.Data.DbSetting">
            <summary>
 Generally a helper to wrap database's setting list types tables (eg. BusinessSetting, PriceLevelSetting) which have ID, Value and Binary columns.
 </summary>
            <remarks />
        </member>
        <member name="M:Ape.EL.Misc.DataTableHelper.MorphBinaryColumns(System.Data.DataTable)">
            <summary>
 Modify binary or image columns as string.
 </summary>
        </member>
        <member name="M:Ape.EL.Misc.SqlHelper.FormatSql(System.String,System.Boolean,System.Boolean)">
            <summary>
 Format SQL query. Throw exception if query has issue.
 </summary>
            <param name="bStandardFormat">If true, standardize the format, eg. keywords are in upper case.</param>
            <param name="bAddNationalString">If true, add N prefix to literal string if it contains ANSI / Unicode character.</param>
        </member>
        <member name="M:Ape.EL.Valuation.Valuator.GetEnumTable(System.Type)">
            <summary>
 Map enum which has LocalizableString to table which can be used by LookupEditBuilder.
 </summary>
        </member>
        <member name="M:Ape.EL.Misc.EnumHelper.GetEnumArray(System.Type)">
            <summary>
 Get array of enum.
 </summary>
        </member>
        <member name="M:Ape.EL.Misc.EnumHelper.GetEnumArray``1">
            <summary>
 Get enum array to list of enum.
 </summary>
        </member>
        <member name="M:Ape.EL.Misc.EnumHelper.StringToEnum(System.Type,System.String)">
            <summary>
 Convert enum member in string to enum member.
 Returns nothing if string cant be found.
 </summary>
        </member>
        <member name="M:Ape.EL.Misc.MagicNumber.GetFirstBytes(System.String,System.Int32)">
            <summary>
 Get first 2 bytes to determine binary type.
 </summary>
        </member>
        <member name="T:Ape.EL.ExtensionsSystem.StringExtension">
            <summary>
 Override original System.String public functions' original value with ToStr to make it compatible with null (avoid null exception).
 </summary>
        </member>
        <member name="T:Ape.EL.Data.DbInitializer">
            <summary>
 Class to initiate SqlConnection.
 </summary>
            <remarks />
        </member>
        <member name="M:Ape.EL.Data.Convert.StringToEnum(System.Type,System.String)">
            <summary>
 Convert enum member in string to enum member.
 Returns nothing if string cant be found.
 </summary>
            <param name="enumType" />
            <param name="value" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Data.Convert.StringToEnum``1(System.String)">
            <summary>
 Convert enum member in string to enum member.
 Returns nothing if string cant be found.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.Convert.DrvToStructure(System.Data.DataRowView,System.Type)">
            <summary>
 Copy datarowview values (with columns same as provided structure properties) to the class properties.
 </summary>
            <param name="drv" />
            <param name="type" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Data.Convert.DrvToStructure``1(System.Data.DataRowView)">
            <summary>
 Copy datarowview values (with columns same as provided structure properties) to the class properties.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.Convert.DvToStructureList``1(System.Data.DataView)">
            <summary>
 Convert whole data of dataview with specific structure into list of structures.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.Convert.AddStructureToDv``1(System.Collections.Generic.List{``0},System.Data.DataView@)">
            <summary>
 Add a structure into dataview. st's property must exist in dv's column.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.Convert.AddStructureToDv``1(``0,System.Data.DataView@)">
            <summary>
 Add a structure into dataview. st's property must exist in dv's column.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.Convert.CreateDvFromStructure``1">
            <summary>
 Build a DataView with structure from class' properties.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.Convert.GetStr(System.Object)">
            <summary>
 Get empty string when obj is nothing. This is to avoid null reference exception.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.Convert.ToStr(System.Object)">
            <summary>
 Same as GetStr.
 Get empty string when obj is nothing. This is to avoid null reference exception.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.Convert.ToStream(System.Byte[])">
            <summary>
 Convert Byte array to MemoryStream.
 </summary>
        </member>
        <member name="M:Ape.EL.Data.Convert.ToStream(System.String,System.Text.Encoding)">
            <summary>
 Convert string with encoding to MemoryStream.
 </summary>
        </member>
        <member name="P:Ape.EL.Misc.Profiler.LastTimespan">
            <summary>
 Get the latest timespan after Stop is executed succcessfully.
 </summary>
        </member>
        <member name="M:Ape.EL.Misc.Profiler.Start">
            <summary>
 Start counting.
 </summary>
        </member>
        <member name="M:Ape.EL.Misc.Profiler.Stop(System.String)">
            <summary>
 Get final timespan and write to log file.
 </summary>
        </member>
        <member name="M:Ape.EL.Misc.Profiler.Stop">
            <summary>
 Get final timespan on LastTimeSpan property.
 </summary>
        </member>
        <member name="M:Ape.EL.Misc.Profiler.Execute(System.EventHandler)">
            <summary>
 Run Profiler and generate log file.
 </summary>
        </member>
        <member name="T:Ape.EL.Misc.Profiler.Run">
            <summary>
 Profiler that support IDisposable which directly write to log file.
 </summary>
        </member>
        <member name="P:Ape.EL.InternalGlobal.DefaultQueryTimeout">
            <summary>
 Provide default value for SqlClient related query execution timeout in seconds. Default value is 7200 seconds.
 </summary>
        </member>
        <member name="P:Ape.EL.InternalGlobal.SuppressExceptionMessage">
            <summary>
 This property will have effect on WinForm.General functions for exception handling. It will suppress the message and throw as an ApplicationException.
 </summary>
        </member>
        <member name="P:Ape.EL.InternalGlobal.SuppressMessage">
            <summary>
 This property will have effect on WinForm.General functions. It will suppress the message and throw as an ApplicationException.
 </summary>
        </member>
        <member name="P:Ape.EL.InternalGlobal.CatchApplicationExceptionAsWarning">
            <summary>
 This property will have effect on WinForm.General.ExceptionErrorMsg(ByVal _ex As Exception). Instead of treating it as exception, we treat it as warning.
 </summary>
        </member>
        <member name="P:Ape.EL.InternalGlobal.PauseFormMonitor">
            <summary>
 This property will have effect on WinForm.General.
 InitOnceFormMonitor will be paused.
 </summary>
        </member>
        <member name="P:Ape.EL.InternalGlobal.DisableFormMonitor">
            <summary>
 This property will have effect on WinForm.General.
 InitOnceFormMonitor will exit thread, some functions will not work properly.
 </summary>
        </member>
        <member name="P:Ape.EL.InternalGlobal.NJsonSerializerSetting">
            <summary>
 Get NJsonSerialize's setting.
 </summary>
        </member>
        <member name="P:Ape.EL.InternalGlobal.NJsonSerializer_IgnoreNullValue">
            <summary>
 Set NJsonSerialize to ignore null value properties.
 </summary>
        </member>
        <member name="P:Ape.EL.InternalGlobal.NJsonSerializer_IgnoreDefaultValue">
            <summary>
 Set NJsonSerialize to ignore default value properties.
 </summary>
        </member>
        <member name="E:Ape.EL.WinForm.General.ExceptionErrorMsgShowEvent">
            <summary>
 Raised when calling ExceptionErrorMsg(Exception).
 </summary>
        </member>
        <member name="T:Ape.EL.WinForm.General.ControlPos">
            <summary>
 Used by GetControlPosition.
 </summary>
        </member>
        <member name="P:Ape.EL.WinForm.General.MessageBoxForm">
            <summary>
 Set default messagebox form to be used in ExceptionErrorMsg, QuestionMsg, InformationMsg, and WarningMsg. Object must implement IDialogBox.
 </summary>
            <value />
            <remarks />
        </member>
        <member name="P:Ape.EL.WinForm.General.MessageBoxOwner">
            <summary>
 Set messagebox's owner allow the messagebox to block the owner if messagebox was executed in different thread.
 </summary>
        </member>
        <member name="P:Ape.EL.WinForm.General.MessageBoxSmartOwner">
            <summary>
 Automatically find owner form when using messagebox methods from this class when MessagBoxOwner is set nothing.
 By default this option is true.
 </summary>
        </member>
        <member name="P:Ape.EL.WinForm.General.BeforeShowMessageEventHandler">
            <summary>
 Set an event handler before showing any message from this class.
 </summary>
        </member>
        <member name="P:Ape.EL.WinForm.General.AfterShowMessageEventHandler">
            <summary>
 Set an event handler after showing any message from this class.
 </summary>
        </member>
        <member name="P:Ape.EL.WinForm.General.MessageBoxStandardHeader">
            <summary>
 Standardized MessageBox header.
 Set value to "-1" to remove default header.
 Set value to empty to use default header.
 Set other value to use customized header.
 </summary>
        </member>
        <member name="M:Ape.EL.WinForm.General.TextOnImage(System.Drawing.Image@,System.String,System.Int32,System.Int32)">
            <summary>
 Write some text on an image.
 </summary>
            <param name="myImage" />
            <param name="txt" />
            <param name="width" />
            <param name="height" />
            <remarks />
        </member>
        <member name="M:Ape.EL.WinForm.General.GetControlImage(System.Windows.Forms.Control,System.Boolean)">
            <summary>
 Convert painted on screen control to a bitmap image.
 </summary>
            <param name="ctl" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.WinForm.General.DrawImageAnywhere(System.Drawing.Image,System.Drawing.Point)">
            <summary>
 Draw an image anywhere on the screen, when the screen refreshes, it will be flushed out.
 </summary>
            <param name="img" />
            <param name="loc" />
            <remarks />
        </member>
        <member name="M:Ape.EL.WinForm.General.GetMixedColour(System.Drawing.Color,System.Drawing.Color)">
            <summary>
 Mix 2 colours just like overlapping them.
 </summary>
            <param name="Color1" />
            <param name="Color2" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.WinForm.General.SetDesignMinimumSize(System.Windows.Forms.Form@)">
            <summary>
 Use on the form load event.
 Will update the MinimumSize property of every control in the form as it looks like in the designer.
 </summary>
            <param name="frm" />
            <remarks />
        </member>
        <member name="M:Ape.EL.WinForm.General.GetMotherboardSN">
            <summary>
 Get the PC's motherboard serial number.
 </summary>
        </member>
        <member name="M:Ape.EL.WinForm.General.ExceptionErrorMsg(System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
 Handle exception error messages.
 </summary>
            <param name="strExMsg">Main error message to be displayed</param>
            <param name="strExString">Optional, if param is not set, additional message will be shown and asked to be allow copy to clipboard</param>
            <param name="intStack">Get last call method. Value set as 1 for the last method by default.</param>
            <remarks />
        </member>
        <member name="M:Ape.EL.WinForm.General.ExceptionErrorMsg(System.Exception,System.Boolean)">
            <summary>
 Handle exception error messages.
 </summary>
            <param name="_ex">Throw an Exception to show default exception error message</param>
            <remarks />
        </member>
        <member name="M:Ape.EL.WinForm.General.WarningMsg(System.String,System.String,System.Windows.Forms.MessageBoxDefaultButton,System.Boolean)">
            <summary>
 Handles Warning messages.
 </summary>
            <param name="strMsg">Message shown.</param>
            <param name="strHeader">Set to "-1" to remove header.</param>
            <remarks />
        </member>
        <member name="M:Ape.EL.WinForm.General.WarningMsg(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxDefaultButton,System.Boolean)">
            <summary>
 Handles Warning messages.
 </summary>
            <param name="strMsg">Message shown.</param>
            <param name="strHeader">Set to "-1" to remove header.</param>
            <remarks />
        </member>
        <member name="M:Ape.EL.WinForm.General.InformationMsg(System.String,System.String,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Boolean)">
            <summary>
 Handles information messages.
 </summary>
            <param name="strMsg">Message shown.</param>
            <param name="strHeader">Set to "-1" to remove header.</param>
            <remarks />
        </member>
        <member name="M:Ape.EL.WinForm.General.InformationMsg(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Boolean)">
            <summary>
 Handles information messages.
 </summary>
            <param name="strMsg">Message shown.</param>
            <param name="strHeader">Set to "-1" to remove header.</param>
            <remarks />
        </member>
        <member name="M:Ape.EL.WinForm.General.QuestionMsg(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Boolean)">
            <summary>
 Handles question messages.
 </summary>
            <param name="strMsg">Message shown.</param>
            <param name="strHeader">Set to "-1" to remove header.</param>
            <param name="msgBtn">Shown buttons.</param>
            <param name="msgBoxIcon">Message box icon.</param>
            <param name="defaultButton">Default selected button.</param>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.WinForm.General.QuestionMsg(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Boolean)">
            <summary>
 Handles question messages.
 </summary>
            <param name="strMsg">Message shown.</param>
            <param name="strHeader">Set to "-1" to remove header.</param>
            <param name="msgBtn">Shown buttons.</param>
            <param name="msgBoxIcon">Message box icon.</param>
            <param name="defaultButton">Default selected button.</param>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.WinForm.General.ErrorScriptMsg(System.String,System.String)">
            <summary>
 Handles error message with mshta javascript which is not managed by calling program (detached as separate running program).
 Message cannot be suppressed. Exception will not be thrown.
 On AspNet, message will be logged to ErrorLog.
 </summary>
        </member>
        <member name="M:Ape.EL.WinForm.General.StandardizeMsgHdr(System.String@,Ape.EL.Localization.StringId)">
            <summary>
 Header = DefaultCaption - DefaultHeader.
 </summary>
            <param name="Header">Referenced header value. Set to "-1" to remove header.</param>
            <param name="DefaultCaption">A default caption.</param>
            <remarks>DefaultHeader is GetFullVersion, you can override the value through setting MessageBoxStandardHeader property.</remarks>
        </member>
        <member name="M:Ape.EL.WinForm.General.ShowMessageBox(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Boolean)">
            <summary>
 Internal usage for showing MessageBox. If _MessageBoxForm is set, then try to use Show function from that object.
 </summary>
            <param name="owner"> Obsolete. Use MessageBoxOwner property instead. </param>
        </member>
        <member name="M:Ape.EL.WinForm.General.CheckThrowExceptionMessage(System.String)">
            <summary>
 Put this in the first like of function.
 </summary>
        </member>
        <member name="M:Ape.EL.WinForm.General.CheckThrowMessage(System.String)">
            <summary>
 Put this in the first like of function.
 </summary>
        </member>
        <member name="M:Ape.EL.WinForm.General.WriteToLogFile(System.String,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
 Write log to specified location.
 </summary>
            <param name="strMessage" />
            <remarks />
        </member>
        <member name="M:Ape.EL.WinForm.General.FontAutoSize(System.Windows.Forms.Control,System.Boolean)">
            <summary>
 Auto resize font size to fit the text on the control.
 </summary>
            <param name="ctl">The specified control.</param>
            <param name="bMaxOriginal">If set true, then the maximum size will reuse the original font size.</param>
        </member>
        <member name="M:Ape.EL.WinForm.General.FontAutoSize(System.Windows.Forms.Control,System.String,System.Boolean)">
            <summary>
 Auto resize font size to fit the text on the control.
 </summary>
            <param name="ctl">The specified control.</param>
            <param name="altText">Alternate text to replace ctl's Text.</param>
            <param name="bMaxOriginal">If set true, then the maximum size will reuse the original font size.</param>
        </member>
        <member name="M:Ape.EL.WinForm.General.IsTextTooLarge(System.Windows.Forms.Control,System.String,System.Boolean)">
            <summary>
 Determine if text is too large for the control.
 </summary>
            <param name="ctl">The specified control.</param>
            <param name="altText">Alternate text to replace ctl's Text.</param>
            <param name="bNoFloor">Disable Math.Floor on the graphic size.</param>
        </member>
        <member name="M:Ape.EL.WinForm.General.GetCenterPosition(System.Windows.Forms.Form,System.Windows.Forms.Form)">
            <summary>
 Get form's center location.
 </summary>
        </member>
        <member name="M:Ape.EL.WinForm.General.GetCenterPosition(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
 Get control's center position.
 </summary>
        </member>
        <member name="M:Ape.EL.WinForm.General.GetPreciseControlPosition(System.Windows.Forms.Control,Ape.EL.WinForm.General.ControlPos)">
            <summary>
 Get control's position relative to form or to desktop screen.
 </summary>
        </member>
        <member name="M:Ape.EL.WinForm.General.CentralizeControls(System.Windows.Forms.Control)">
            <summary>
 Centralize controls in the specified control containers to be positioned centrally inside the provided control. eg. For buttons to be positioned centrally like dialog message.
 </summary>
            <param name="ctl" />
            <remarks />
        </member>
        <member name="M:Ape.EL.WinForm.General.Trace(System.Int32,System.String)">
            <summary>
 Internal use, tracing method callers.
 </summary>
            <param name="methodframe">Trace the method. Default value is 2.</param>
            <param name="msg">Message to be shown.</param>
            <remarks />
        </member>
        <member name="M:Ape.EL.WinForm.General.Trace(System.String)">
            <summary>
 Internal use, tracing method callers.
 </summary>
            <param name="msg">Message to be shown.</param>
        </member>
        <member name="M:Ape.EL.WinForm.General.GetCallingForm">
            <summary>
 Return nothing if there is no form or PauseFormMonitor is true. Experimental function, use with caution.
 </summary>
        </member>
        <member name="M:Ape.EL.WinForm.General.GetStackTrace(System.Boolean)">
            <summary>
 Get stack trace in string list. Experimental function, use with caution.
 </summary>
        </member>
        <member name="M:Ape.EL.WinForm.General.GetControlThread(System.Windows.Forms.Control)">
            <summary>
 Get current thread of a control.
 </summary>
        </member>
        <member name="M:Ape.EL.WinForm.General.GetControlThreadId(System.Windows.Forms.Control)">
            <summary>
 Get current ManagedThreadID of a control. If thread is not found, return -1.
 </summary>
        </member>
        <member name="M:Ape.EL.WinForm.General.IsOnScreen(System.Windows.Forms.Form)">
            <summary>
 Check if form is on screen boundary.
 </summary>
            <param name="form" />
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.WinForm.General.FindAllControls(System.Windows.Forms.Control)">
            <summary>
 Find all controls and their children within a container.
 </summary>
        </member>
        <member name="M:Ape.EL.WinForm.General.ShowFolderBrowserDialog(System.String)">
            <summary>
 Generic usage of FolderBrowserDialog.
 </summary>
        </member>
        <member name="M:Ape.EL.WinForm.General.ShowOpenFileDialog(System.String,System.String)">
            <summary>
 Generic usage of OpenFileDialog.
 </summary>
            <param name="InitialDirectory">Example "C:\"</param>
            <param name="Filter">Example "All files (*.*)|*.*"</param>
        </member>
        <member name="M:Ape.EL.WinForm.General.ShowSaveFileDialog(System.String,System.String)">
            <summary>
 Generic usage of SaveFileDialog.
 </summary>
            <param name="InitialDirectory">Example "C:\"</param>
            <param name="Filter">Example "All files (*.*)|*.*"</param>
        </member>
        <member name="M:Ape.EL.WinForm.General.GetUniqueFileName(System.String,System.String)">
            <summary>
 Get a unique filename in a folder with incremental integer suffix.
 </summary>
        </member>
        <member name="M:Ape.EL.WinForm.General.GetUniqueName(System.Collections.Generic.List{System.String},System.String)">
            <summary>
 Get a unique name within a list of string with incremental integer suffix.
 </summary>
        </member>
        <member name="M:Ape.EL.WinForm.General.IsFontTrueType(System.String)">
            <summary>
 Check whether system contains the provided truetype font.
 </summary>
        </member>
        <member name="M:Ape.EL.WinForm.General.ShowFontDialog">
            <summary>
 Generic usage of FontDialog.
 </summary>
        </member>
        <member name="M:Ape.EL.WinForm.General.FocusOnApp">
            <summary>
 Force the focus to running application.
 </summary>
        </member>
        <member name="M:Ape.EL.Utility.ResManager.GetObject(System.String,System.Reflection.Assembly)">
            <summary>
 Return resources of selected assembly. Must provide ResName.
 </summary>
            <param name="ResName">The resource name</param>
            <param name="MyAsm">The assembly that contains the resource. If not set, will use this library assembly instead.</param>
            <returns />
            <remarks />
        </member>
        <member name="M:Ape.EL.Utility.ResManager.GetObject(System.String,System.String)">
            <summary>
 Return resources of selected assembly. Must provide ResName.
 </summary>
            <param name="ResName">The resource name</param>
            <param name="MyAsmPath">Set assembly through assembly file path</param>
            <returns />
            <remarks />
        </member>
        <member name="T:Ape.EL.Utility.ResManager">
            <summary>
 A resource manager class.
 </summary>
        </member>
        <member name="M:Ape.EL.App.ConcurrentRDP.LockFile.GetLockFile(System.String)">
            <summary>
 Return nothing if file path is invalid.
 </summary>
        </member>
        <member name="P:Ape.EL.App.ConcurrentRDP.MaxConcurrentUser">
            <summary>
 Get or set maximum concurrent user.
 </summary>
        </member>
        <member name="P:Ape.EL.App.ConcurrentRDP.GroupID">
            <summary>
 Get or set unique group identifier.
 Let's say Advance version is only limited by 5 MaxConcurrentUser,
 we will set the filename as "SessionID_GroupID_InstanceNo.session".
 </summary>
        </member>
        <member name="M:Ape.EL.App.ConcurrentRDP.ClearEndedSessions">
            <summary>
 Delete abruptly ended session lock files.
 </summary>
        </member>
        <member name="M:Ape.EL.App.ConcurrentRDP.GetLoggedSessionList">
            <summary>
 Get list of unique sessions by concurrent GroupID. If GroupID is empty, we assume all sessions are concurrent.
 </summary>
        </member>
        <member name="M:Ape.EL.App.ConcurrentRDP.GetSessionID">
            <summary>
 Get identifier for current terminal session.
 </summary>
        </member>
        <member name="M:Ape.EL.App.ConcurrentRDP.LogInSession">
            <summary>
 Create a lock file. Return true if successfully logged in. You must LogOutSession.
 </summary>
        </member>
        <member name="M:Ape.EL.App.ConcurrentRDP.LogOutSession">
            <summary>
 Log out session.
 </summary>
        </member>
        <member name="T:Ape.EL.App.ConcurrentRDP">
            <summary>
 Use this to control the RDP concurrent user.
 It will create a locked access file when LogInSession is initiated.
 Existing locked access files will determine whether another _
 session can be created based on number of concurrent terminals access using the main program. 
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.CloneExtensions.Clone``1(``0)">
            <summary>
 Same as DeepCopy.
 Use rClone for better output.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.CloneExtensions.DeepCopy``1(``0)">
            <summary>
 Deep clone method using JSON serialization, thus removing the needs of Serializable type on the object.
 This method can only be applied on non complex classes. Classes such as dataview, form or any class with complex object will throw exception.
 Use rClone for better output.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.CloneExtensions.CopyFrom``1(``0@,``0)">
            <summary>
 Create a DeepCopy and overwrite the result to self object.
  Use rCopyFrom or rRefCopyFrom for better output.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.CloneExtensions.rClone``1(``0)">
            <summary>
 Clone using ReflectionCloner to a new object.
 </summary>
        </member>
        <member name="M:Ape.EL.Extensions.CloneExtensions.rCopyFrom``1(``0@,``0)">
            <summary>
 Copy all fields from source to provided self object by reference. Will create another object if self object is null.
 Clone using ReflectionClonerByRef.
 </summary>
        </member>
        <member name="T:Newtonsoft.Json.Bson.BsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
            <summary>
            Gets or sets a value indicating whether binary data reading should compatible with incorrect Json.NET 3.5 written binary.
            </summary>
            <value>
                <c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray">
            <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
            <value>
                <c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.
            </summary>
            <value>The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</value>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
                <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonReader.Close">
            <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State" /> to Closed.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Bson.BsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonWriter.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified" /> no conversion will occur.
            </summary>
            <value>The <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.</value>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
            <param name="value">The <see cref="T:System.String" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Single" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Double" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Char" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte" />[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" />[] value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte" />[] value that represents a BSON object id.
            </summary>
            <param name="value">The Object ID value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
            <summary>
            Writes a BSON regex.
            </summary>
            <param name="pattern">The regex pattern.</param>
            <param name="options">The regex options.</param>
        </member>
        <member name="T:Newtonsoft.Json.Bson.BsonObjectId">
            <summary>
            Represents a BSON Oid (object id).
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Bson.BsonObjectId.Value">
            <summary>
            Gets or sets the value of the Oid.
            </summary>
            <value>The value of the Oid.</value>
        </member>
        <member name="M:Newtonsoft.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> class.
            </summary>
            <param name="value">The Oid value.</param>
        </member>
        <member name="T:Newtonsoft.Json.Converters.BinaryConverter">
            <summary>
            Converts a binary value to and from a base 64 string value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BinaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DataSetConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataSet" /> to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataSetConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
                <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DataTableConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataTable" /> to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DataTableConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
                <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.CustomCreationConverter`1">
            <summary>
            Create a custom object
            </summary>
            <typeparam name="T">The object type to convert.</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
            <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
            <value>
                <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Newtonsoft.Json.Converters.DateTimeConverterBase">
            <summary>
            Provides a base class for converting a <see cref="T:System.DateTime" /> to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.EntityKeyMemberConverter">
            <summary>
            Converts an Entity Framework EntityKey to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.KeyValuePairConverter">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.BsonObjectIdConverter">
            <summary>
            Converts a <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.RegexConverter">
            <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex" /> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.RegexConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.RegexConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.RegexConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.StringEnumConverter">
            <summary>
            Converts an <see cref="T:System.Enum" /> to and from its name string value.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.CamelCaseText">
            <summary>
            Gets or sets a value indicating whether the written enum text should be camel case.
            </summary>
            <value>
                <c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.AllowIntegerValues">
            <summary>
            Gets or sets a value indicating whether integer values are allowed.
            </summary>
            <value>
                <c>true</c> if integers are allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Converters.StringEnumConverter" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Converters.StringEnumConverter" /> class.
            </summary>
            <param name="camelCaseText">
                <c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.VersionConverter">
            <summary>
            Converts a <see cref="T:System.Version" /> to and from a string (e.g. "1.2.3.4").
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.VersionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.VersionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.VersionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.IsoDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime" /> to and from the ISO 8601 date format (e.g. 2008-04-12T12:53Z).
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
            <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
            <value>The date time styles used when converting a date to and from JSON.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
            <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
            <value>The date time format used when converting a date to and from JSON.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture">
            <summary>
            Gets or sets the culture used when converting a date to and from JSON.
            </summary>
            <value>The culture used when converting a date to and from JSON.</value>
        </member>
        <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime" /> to and from a JavaScript date constructor (e.g. new Date(52231943)).
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Converters.XmlNodeConverter">
            <summary>
            Converts XML to and from JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeRootElementName">
            <summary>
            Gets or sets the name of the root element to insert when deserializing to XML if the JSON structure has produces multiple root elements.
            </summary>
            <value>The name of the deserialize root element.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.WriteArrayAttribute">
            <summary>
            Gets or sets a flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </summary>
            <value>
                <c>true</c> if the array attibute is written to the XML; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.OmitRootObject">
            <summary>
            Gets or sets a value indicating whether to write the root JSON object.
            </summary>
            <value>
                <c>true</c> if the JSON root object is omitted; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="serializer">The calling serializer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
            <summary>
            Checks if the attributeName is a namespace attribute.
            </summary>
            <param name="attributeName">Attribute name to test.</param>
            <param name="prefix">The attribute name prefix if it has one, otherwise an empty string.</param>
            <returns>
                <c>true</c> if attribute name is for a namespace attribute, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
                <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.ConstructorHandling">
            <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ConstructorHandling.Default">
            <summary>
            First attempt to use the public default constructor, then fall back to single parameterized constructor, then the non-public default constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
            <summary>
            Json.NET will use a non-public default constructor before falling back to a parameterized constructor.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.DateFormatHandling">
            <summary>
            Specifies how dates are formatted when writing JSON text.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateFormatHandling.IsoDateFormat">
            <summary>
            Dates are written in the ISO 8601 format, e.g. "2012-03-21T05:40Z".
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateFormatHandling.MicrosoftDateFormat">
            <summary>
            Dates are written in the Microsoft JSON format, e.g. "\/Date(1198908717056)\/".
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.DateParseHandling">
            <summary>
            Specifies how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateParseHandling.None">
            <summary>
            Date formatted strings are not parsed to a date type and are read as strings.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateParseHandling.DateTime">
            <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:Newtonsoft.Json.DateParseHandling.DateTime" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset">
            <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset" />.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.DateTimeZoneHandling">
            <summary>
            Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Local">
            <summary>
            Treat as local time. If the <see cref="T:System.DateTime" /> object represents a Coordinated Universal Time (UTC), it is converted to the local time.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Utc">
            <summary>
            Treat as a UTC. If the <see cref="T:System.DateTime" /> object represents a local time, it is converted to a UTC.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Unspecified">
            <summary>
            Treat as a local time if a <see cref="T:System.DateTime" /> is being converted to a string.
            If a string is being converted to <see cref="T:System.DateTime" />, convert to a local time if a time zone is specified.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind">
            <summary>
            Time zone information should be preserved when converting.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.FloatFormatHandling">
            <summary>
            Specifies float format handling options when writing special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" /> with <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatFormatHandling.String">
            <summary>
            Write special floating point values as strings in JSON, e.g. "NaN", "Infinity", "-Infinity".
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatFormatHandling.Symbol">
            <summary>
            Write special floating point values as symbols in JSON, e.g. NaN, Infinity, -Infinity.
            Note that this will produce non-valid JSON.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatFormatHandling.DefaultValue">
            <summary>
            Write special floating point values as the property's default value in JSON, e.g. 0.0 for a <see cref="T:System.Double" /> property, null for a <see cref="T:System.Nullable`1" /> property.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.FloatParseHandling">
            <summary>
            Specifies how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatParseHandling.Double">
            <summary>
            Floating point numbers are parsed to <see cref="F:Newtonsoft.Json.FloatParseHandling.Double" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.FloatParseHandling.Decimal">
            <summary>
            Floating point numbers are parsed to <see cref="F:Newtonsoft.Json.FloatParseHandling.Decimal" />.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Formatting">
            <summary>
            Specifies formatting options for the <see cref="T:Newtonsoft.Json.JsonTextWriter" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Formatting.None">
            <summary>
            No special formatting is applied. This is the default.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Formatting.Indented">
            <summary>
            Causes child objects to be indented according to the <see cref="P:Newtonsoft.Json.JsonTextWriter.Indentation" /> and <see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar" /> settings.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.IArrayPool`1">
            <summary>
            Provides an interface for using pooled arrays.
            </summary>
            <typeparam name="T">The array type content.</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.IArrayPool`1.Rent(System.Int32)">
            <summary>
            Rent a array from the pool. This array must be returned when it is no longer needed.
            </summary>
            <param name="minimumLength">The minimum required length of the array. The returned array may be longer.</param>
            <returns>The rented array from the pool. This array must be returned when it is no longer needed.</returns>
        </member>
        <member name="M:Newtonsoft.Json.IArrayPool`1.Return(`0[])">
            <summary>
            Return an array to the pool.
            </summary>
            <param name="array">The array that is being returned.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonConstructorAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified constructor when deserializing that object.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonDictionaryAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute" /> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonException">
            <summary>
            The exception thrown when an error occurs during JSON serialization or deserialization.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Newtonsoft.Json.JsonExtensionDataAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to deserialize properties with no matching class member into the specified collection
            and write values during serialization.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.WriteData">
            <summary>
            Gets or sets a value that indicates whether to write extension data when serializing the object.
            </summary>
            <value>
                <c>true</c> to write extension data when serializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.ReadData">
            <summary>
            Gets or sets a value that indicates whether to read extension data when deserializing the object.
            </summary>
            <value>
                <c>true</c> to read extension data when deserializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.JsonExtensionDataAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonExtensionDataAttribute" /> class.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonRequiredAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to always serialize the member, and require the member has a value.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.CommentHandling">
            <summary>
            Specifies how JSON comments are handled when loading JSON.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.CommentHandling.Ignore">
            <summary>
            Ignore comments.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.CommentHandling.Load">
            <summary>
            Load comments as a <see cref="T:Newtonsoft.Json.Linq.JValue" /> with type <see cref="F:Newtonsoft.Json.Linq.JTokenType.Comment" />.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.LineInfoHandling">
            <summary>
            Specifies how line information is handled when loading JSON.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.LineInfoHandling.Ignore">
            <summary>
            Ignore line information.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.LineInfoHandling.Load">
            <summary>
            Load line information.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JPropertyDescriptor">
            <summary>
            Represents a view of a <see cref="T:Newtonsoft.Json.Linq.JProperty" />.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JPropertyDescriptor" /> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
            <returns>
                <c>true</c> if resetting the component changes its value; otherwise, <c>false</c>.
            </returns>
            <param name="component">The component to test for reset capability.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.GetValue(System.Object)">
            <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
            <returns>
            The value of a property for a given component.
            </returns>
            <param name="component">The component with the property for which to retrieve the value. 
                            </param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
            <param name="component">The component with the property value that is to be reset to the default value. 
                            </param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set. 
                            </param>
            <param name="value">The new value. 
                            </param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <returns>
                <c>true</c> if the property should be persisted; otherwise, <c>false</c>.
            </returns>
            <param name="component">The component with the property to be examined for persistence.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.ComponentType">
            <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
            <returns>
            A <see cref="T:System.Type" /> that represents the type of component this property is bound to. When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> methods are invoked, the object specified might be an instance of this type.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.IsReadOnly">
            <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
            <returns>
                <c>true</c> if the property is read-only; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.PropertyType">
            <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
            <returns>
            A <see cref="T:System.Type" /> that represents the type of the property.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.NameHashCode">
            <summary>
            Gets the hash code for the name of the member.
            </summary>
            <value />
            <returns>
            The hash code for the name of the member.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JsonLoadSettings">
            <summary>
            Specifies the settings used when loading JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonLoadSettings.CommentHandling">
            <summary>
            Gets or sets how JSON comments are handled when loading JSON.
            </summary>
            <value>The JSON comment handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonLoadSettings.LineInfoHandling">
            <summary>
            Gets or sets how JSON line info is handled when loading JSON.
            </summary>
            <value>The JSON line info handling.</value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JsonMergeSettings">
            <summary>
            Specifies the settings used when merging JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonMergeSettings.MergeArrayHandling">
            <summary>
            Gets or sets the method used when merging JSON arrays.
            </summary>
            <value>The method used when merging JSON arrays.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JsonMergeSettings.MergeNullValueHandling">
            <summary>
            Gets or sets how how null value properties are merged.
            </summary>
            <value>How null value properties are merged.</value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.MergeArrayHandling">
            <summary>
            Specifies how JSON arrays are merged together.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Concat">
            <summary>Concatenate arrays.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Union">
            <summary>Union arrays, skipping items that already exist.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Replace">
            <summary>Replace all array items.</summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Merge">
            <summary>Merge array items together, matched by index.</summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.MergeNullValueHandling">
            <summary>
            Specifies how null value properties are merged.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeNullValueHandling.Ignore">
            <summary>
            The content's null value properties will be ignored during merging.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.MergeNullValueHandling.Merge">
            <summary>
            The content's null value properties will be merged.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JRaw">
            <summary>
            Represents a raw JSON string.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(Newtonsoft.Json.Linq.JRaw)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class from another <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class.
            </summary>
            <param name="rawJson">The raw json.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JRaw.Create(Newtonsoft.Json.JsonReader)">
            <summary>
            Creates an instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.
            </summary>
            <param name="reader">The reader.</param>
            <returns>An instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.IJEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
            <typeparam name="T">The type of token</typeparam>
        </member>
        <member name="P:Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> with the specified key.
            </summary>
            <value />
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenEqualityComparer">
            <summary>
            Compares tokens to determine whether they are equal.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
            <param name="y">The second object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
            <returns>
                <c>true</c> if the specified objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
        </member>
        <member name="T:Newtonsoft.Json.Linq.Extensions">
            <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JToken" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the ancestors of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.AncestorsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains every token in the source collection, and the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JToken" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains every token in the source collection, the ancestors of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JContainer" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the descendants of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.DescendantsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains every token in the source collection, and the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JContainer" />.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains every token in the source collection, and the descendants of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})">
            <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the properties of every object in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every token in the source collection with the given key.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every token in the source collection with the given key.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <typeparam name="T">The source collection type.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every token in the source collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JConstructor">
            <summary>
            Represents a JSON constructor.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.Name">
            <summary>
            Gets or sets the name of this constructor.
            </summary>
            <value>The constructor name.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(Newtonsoft.Json.Linq.JConstructor)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class from another <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name.
            </summary>
            <param name="name">The constructor name.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JConstructor.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" />.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JContainer">
            <summary>
            Represents a token that can contain other tokens.
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JContainer.ListChanged">
            <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JContainer.AddingNew">
            <summary>
            Occurs before an item is added to the collection.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
            <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.AddingNew" /> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.AddingNewEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.ListChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
                <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Descendants">
            <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the descendant tokens of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.DescendantsAndSelf">
            <summary>
            Returns a collection of the tokens that contain this token, and all descendant tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing this token, and all the descendant tokens of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Add(System.Object)">
            <summary>
            Adds the specified content as children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)">
            <summary>
            Adds the specified content as the first children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.CreateWriter">
            <summary>
            Creates an <see cref="T:Newtonsoft.Json.JsonWriter" /> that can be used to add tokens to the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <returns>An <see cref="T:Newtonsoft.Json.JsonWriter" /> that is ready to have content written to it.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)">
            <summary>
            Replaces the children nodes of this token with the specified content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.RemoveAll">
            <summary>
            Removes the child nodes from this token.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Merge(System.Object)">
            <summary>
            Merge the specified content into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="content">The content to be merged.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JContainer.Merge(System.Object,Newtonsoft.Json.Linq.JsonMergeSettings)">
            <summary>
            Merge the specified content into this <see cref="T:Newtonsoft.Json.Linq.JToken" /> using <see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings" />.
            </summary>
            <param name="content">The content to be merged.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings" /> used to merge the content.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JContainer.Count">
            <summary>
            Gets the count of child JSON tokens.
            </summary>
            <value>The count of child JSON tokens</value>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
            <typeparam name="T">The type of token</typeparam>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JEnumerable`1.Empty">
            <summary>
            An empty collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> struct.
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> with the specified key.
            </summary>
            <value />
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(Newtonsoft.Json.Linq.JEnumerable{`0})">
            <summary>
            Determines whether the specified <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JObject">
            <summary>
            Represents a JSON object.
            </summary>
            <example>
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class from another <see cref="T:Newtonsoft.Json.Linq.JObject" /> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JObject" /> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Properties">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of this object's properties.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of this object's properties.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Property(System.String)">
            <summary>
            Gets a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> the specified name.
            </summary>
            <param name="name">The property name.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> with the specified name or null.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.PropertyValues">
            <summary>
            Gets an <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of this object's property values.
            </summary>
            <returns>An <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of this object's property values.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
            <value />
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> populated from the string that contains JSON.</returns>
            <example>
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> populated from the string that contains JSON.</returns>
            <example>
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> with the values of the specified object</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> with the values of the specified object</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String,System.StringComparison)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,System.StringComparison,Newtonsoft.Json.Linq.JToken@)">
            <summary>
            Tries to get the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>
                <c>true</c> if a value was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Add(System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Adds the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.Remove(System.String)">
            <summary>
            Removes the property with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>
                <c>true</c> if item was successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,Newtonsoft.Json.Linq.JToken@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <returns>
                <c>true</c> if a value was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanged" /> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanging(System.String)">
            <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanging" /> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
            <summary>
            Returns the properties for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that represents the properties for this component instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
            <summary>
            Returns the properties for this instance of a component using the attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that represents the filtered properties for this component instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
            <summary>
            Returns a collection of custom attributes for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.AttributeCollection" /> containing the attributes for this object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
            <summary>
            Returns the class name of this instance of a component.
            </summary>
            <returns>
            The class name of the object, or null if the class does not have a name.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
            <summary>
            Returns the name of this instance of a component.
            </summary>
            <returns>
            The name of the object, or null if the object does not have a name.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
            <summary>
            Returns a type converter for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter" /> that is the converter for this object, or null if there is no <see cref="T:System.ComponentModel.TypeConverter" /> for this object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
            <summary>
            Returns the default event for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptor" /> that represents the default event for this object, or null if this object does not have events.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
            <summary>
            Returns the default property for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that represents the default property for this object, or null if this object does not have properties.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
            <summary>
            Returns an editor of the specified type for this instance of a component.
            </summary>
            <param name="editorBaseType">A <see cref="T:System.Type" /> that represents the editor for this object.</param>
            <returns>
            An <see cref="T:System.Object" /> of the specified type that is the editor for this object, or null if the editor cannot be found.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
            <summary>
            Returns the events for this instance of a component using the specified attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter.</param>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> that represents the filtered events for this component instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
            <summary>
            Returns the events for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> that represents the events for this component instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns an object that contains the property described by the specified property descriptor.
            </summary>
            <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that represents the property whose owner is to be found.</param>
            <returns>
            An <see cref="T:System.Object" /> that represents the owner of the specified property.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JArray">
            <summary>
            Represents a JSON array.
            </summary>
            <example>
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(Newtonsoft.Json.Linq.JArray)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class from another <see cref="T:Newtonsoft.Json.Linq.JArray" /> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JArray" /> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> populated from the string that contains JSON.</returns>
            <example>
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> populated from the string that contains JSON.</returns>
            <example>
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> at the specified index.
            </summary>
            <value />
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Insert(System.Int32,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Add(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.CopyTo(Newtonsoft.Json.Linq.JToken[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JArray.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenReader.CurrentToken">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> at the reader's current position.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenReader.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenReader" /> class.
            </summary>
            <param name="token">The token to read from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
                <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenWriter.CurrentToken">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> at the writer's current position.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JTokenWriter.Token">
            <summary>
            Gets the token being writen.
            </summary>
            <value>The token being writen.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor(Newtonsoft.Json.Linq.JContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class writing to the given <see cref="T:Newtonsoft.Json.Linq.JContainer" />.
            </summary>
            <param name="container">The container being written to.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
            <param name="value">The <see cref="T:System.String" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Single" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Double" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Char" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte" />[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" />[] value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JToken">
            <summary>
            Represents an abstract JSON token.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.EqualityComparer">
            <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
            <value>A <see cref="T:Newtonsoft.Json.Linq.JTokenEqualityComparer" /> that can compare two nodes for value equality.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Root">
            <summary>
            Gets the root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <value>The root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
                <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
            <param name="t1">The first <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
            <param name="t2">The second <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
            <returns>
                <c>true</c> if the tokens are equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Next">
            <summary>
            Gets the next sibling token of this node.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the next sibling token.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Previous">
            <summary>
            Gets the previous sibling token of this node.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the previous sibling token.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Path">
            <summary>
            Gets the path of the JSON token. 
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)">
            <summary>
            Adds the specified content immediately after this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)">
            <summary>
            Adds the specified content immediately before this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Ancestors">
            <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
            <returns>A collection of the ancestor tokens of this token.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AncestorsAndSelf">
            <summary>
            Returns a collection of tokens that contain this token, and the ancestors of this token.
            </summary>
            <returns>A collection of tokens that contain this token, and the ancestors of this token.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AfterSelf">
            <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.BeforeSelf">
            <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens before this token, in document order.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Value``1(System.Object)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key converted to the specified type.
            </summary>
            <typeparam name="T">The type to convert the token to.</typeparam>
            <param name="key">The token key.</param>
            <returns>The converted token value.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JToken.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Children``1">
            <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
            <typeparam name="T">The type to filter the child tokens on.</typeparam>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Remove">
            <summary>
            Removes this token from its parent.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Replaces this token with the specified token.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToString">
            <summary>
            Returns the indented JSON for this token.
            </summary>
            <returns>
            The indented JSON for this token.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
            <returns>The JSON for this token using the given formatting and converters.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Boolean">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Boolean" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTimeOffset" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int64">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int64" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Char}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int32" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int16">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int16" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt16">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt16" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Char">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Char" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.SByte">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.SByte" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Byte}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.SByte}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTime">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTime" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Decimal">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Decimal" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Double" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Single">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Single" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.String" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt32">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt32" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt64">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt64" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte[]">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte" />[].
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Guid">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Guid" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Guid}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Guid" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.TimeSpan">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.TimeSpan" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.TimeSpan}">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.TimeSpan" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Uri">
            <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Uri" />.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Byte})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.SByte)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.SByte" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.SByte})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int16)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte" />[] to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Uri)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Uri" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.TimeSpan)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.TimeSpan" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Guid)~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Guid" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.CreateReader">
            <summary>
            Creates an <see cref="T:Newtonsoft.Json.JsonReader" /> for this token.
            </summary>
            <returns>An <see cref="T:Newtonsoft.Json.JsonReader" /> that can be used to read this token and its descendants.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when reading the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1">
            <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type)">
            <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1(Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" /> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" /> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
            <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String)">
            <summary>
            Selects a <see cref="T:Newtonsoft.Json.Linq.JToken" /> using a JPath expression. Selects the token that matches the object path.
            </summary>
            <param name="path">
            A <see cref="T:System.String" /> that contains a JPath expression.
            </param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" />, or null.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
            <summary>
            Selects a <see cref="T:Newtonsoft.Json.Linq.JToken" /> using a JPath expression. Selects the token that matches the object path.
            </summary>
            <param name="path">
            A <see cref="T:System.String" /> that contains a JPath expression.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String)">
            <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
            <param name="path">
            A <see cref="T:System.String" /> that contains a JPath expression.
            </param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the selected elements.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String,System.Boolean)">
            <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
            <param name="path">
            A <see cref="T:System.String" /> that contains a JPath expression.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the selected elements.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.DeepClone">
            <summary>
            Creates a new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />. All child tokens are recursively cloned.
            </summary>
            <returns>A new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.AddAnnotation(System.Object)">
            <summary>
            Adds an object to the annotation list of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="annotation">The annotation to add.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotation``1">
            <summary>
            Get the first annotation object of the specified type from this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <typeparam name="T">The type of the annotation to retrieve.</typeparam>
            <returns>The first annotation object that matches the specified type, or <c>null</c> if no annotation is of the specified type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotation(System.Type)">
            <summary>
            Gets the first annotation object of the specified type from this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="type">The <see cref="P:Newtonsoft.Json.Linq.JToken.Type" /> of the annotation to retrieve.</param>
            <returns>The first annotation object that matches the specified type, or <c>null</c> if no annotation is of the specified type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotations``1">
            <summary>
            Gets a collection of annotations of the specified type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <typeparam name="T">The type of the annotations to retrieve.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" />  that contains the annotations for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.Annotations(System.Type)">
            <summary>
            Gets a collection of annotations of the specified type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="type">The <see cref="P:Newtonsoft.Json.Linq.JToken.Type" /> of the annotations to retrieve.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Object" /> that contains the annotations that match the specified type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.RemoveAnnotations``1">
            <summary>
            Removes the annotations of the specified type from this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <typeparam name="T">The type of annotations to remove.</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JToken.RemoveAnnotations(System.Type)">
            <summary>
            Removes the annotations of the specified type from this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <param name="type">The <see cref="P:Newtonsoft.Json.Linq.JToken.Type" /> of annotations to remove.</param>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JProperty">
            <summary>
            Represents a JSON property.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.Name">
            <summary>
            Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.Value">
            <summary>
            Gets or sets the property value.
            </summary>
            <value>The property value.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(Newtonsoft.Json.Linq.JProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class from another <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object to copy from.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JProperty.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JProperty" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty" />.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JProperty" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
            <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty" />.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JTokenType">
            <summary>
            Specifies the type of token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.None">
            <summary>
            No token type has been set.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Object">
            <summary>
            A JSON object.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Array">
            <summary>
            A JSON array.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Constructor">
            <summary>
            A JSON constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Property">
            <summary>
            A JSON object property.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Integer">
            <summary>
            An integer value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Float">
            <summary>
            A float value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Boolean">
            <summary>
            A boolean value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Null">
            <summary>
            A null value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Undefined">
            <summary>
            An undefined value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Date">
            <summary>
            A date value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Raw">
            <summary>
            A raw JSON value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Bytes">
            <summary>
            A collection of bytes value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Guid">
            <summary>
            A Guid value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.Uri">
            <summary>
            A Uri value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Linq.JTokenType.TimeSpan">
            <summary>
            A TimeSpan value.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JValue">
            <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(Newtonsoft.Json.Linq.JValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class from another <see cref="T:Newtonsoft.Json.Linq.JValue" /> object.
            </summary>
            <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JValue" /> object to copy from.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JValue.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
                <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateComment(System.String)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateString(System.String)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateNull">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> null value.
            </summary>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> null value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CreateUndefined">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> undefined value.
            </summary>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> undefined value.</returns>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JValue.Type">
            <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JValue.Value">
            <summary>
            Gets or sets the underlying token value.
            </summary>
            <value>The underlying token value.</value>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
                <c>true</c> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <c>false</c>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj" />.
            Zero
            This instance is equal to <paramref name="obj" />.
            Greater than zero
            This instance is greater than <paramref name="obj" />.
            </returns>
            <exception cref="T:System.ArgumentException">
                <paramref name="obj" /> is not the same type as this instance.
            </exception>
        </member>
        <member name="T:Newtonsoft.Json.MetadataPropertyHandling">
            <summary>
            Specifies metadata property handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MetadataPropertyHandling.Default">
            <summary>
            Read metadata properties located at the start of a JSON object.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MetadataPropertyHandling.ReadAhead">
            <summary>
            Read metadata properties located anywhere in a JSON object. Note that this setting will impact performance.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MetadataPropertyHandling.Ignore">
            <summary>
            Do not try to read metadata properties.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy">
            <summary>
            A camel case naming strategy.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy" /> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" />.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DefaultNamingStrategy">
            <summary>
            The default naming strategy. Property names and dictionary keys are unchanged.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter">
            <summary>
            Represents a trace writer that writes to the application's <see cref="T:System.Diagnostics.TraceListener" /> instances.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
            <value>
            The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IAttributeProvider">
            <summary>
            Provides methods to get attributes.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(System.Boolean)">
            <summary>
            Returns a collection of all of the attributes, or an empty collection if there are no attributes.
            </summary>
            <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute" />s, or an empty collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>
            Returns a collection of attributes, identified by type, or an empty collection if there are no attributes.
            </summary>
            <param name="attributeType">The type of the attributes.</param>
            <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute" />s, or an empty collection.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ITraceWriter">
            <summary>
            Represents a trace writer.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ITraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
            <value>The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonContainerContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemConverter">
            <summary>
            Gets or sets the default collection items <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemIsReference">
            <summary>
            Gets or sets a value indicating whether the collection items preserve object references.
            </summary>
            <value>
                <c>true</c> if collection items preserve object references; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the collection item reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemTypeNameHandling">
            <summary>
            Gets or sets the collection item type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonContainerContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonContainerContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.MemoryTraceWriter">
            <summary>
            Represents a trace writer that writes to memory. When the trace message limit is
            reached then old trace messages will be removed as new messages are added.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.MemoryTraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
            <value>
            The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.MemoryTraceWriter" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.GetTraceMessages">
            <summary>
            Returns an enumeration of the most recent trace messages.
            </summary>
            <returns>An enumeration of the most recent trace messages.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> of the most recent trace messages.
            </summary>
            <returns>
            A <see cref="T:System.String" /> of the most recent trace messages.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.NamingStrategy">
            <summary>
            A base class for resolving how property names and dictionary keys are serialized.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.NamingStrategy.ProcessDictionaryKeys">
            <summary>
            A flag indicating whether dictionary keys should be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.NamingStrategy.OverrideSpecifiedNames">
            <summary>
            A flag indicating whether explicitly specified property names,
            e.g. a property name customized with a <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" />, should be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.GetPropertyName(System.String,System.Boolean)">
            <summary>
            Gets the serialized name for a given property name.
            </summary>
            <param name="name">The initial property name.</param>
            <param name="hasSpecifiedName">A flag indicating whether the property has had a name explicitly specfied.</param>
            <returns>The serialized property name.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.GetDictionaryKey(System.String)">
            <summary>
            Gets the serialized key for a given dictionary key.
            </summary>
            <param name="key">The initial dictionary key.</param>
            <returns>The serialized dictionary key.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ReflectionAttributeProvider">
            <summary>
            Provides methods to get attributes from a <see cref="T:System.Type" />, <see cref="T:System.Reflection.MemberInfo" />, <see cref="T:System.Reflection.ParameterInfo" /> or <see cref="T:System.Reflection.Assembly" />.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionAttributeProvider.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ReflectionAttributeProvider" /> class.
            </summary>
            <param name="attributeProvider">The instance to get attributes for. This parameter should be a <see cref="T:System.Type" />, <see cref="T:System.Reflection.MemberInfo" />, <see cref="T:System.Reflection.ParameterInfo" /> or <see cref="T:System.Reflection.Assembly" />.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Boolean)">
            <summary>
            Returns a collection of all of the attributes, or an empty collection if there are no attributes.
            </summary>
            <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute" />s, or an empty collection.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>
            Returns a collection of attributes, identified by type, or an empty collection if there are no attributes.
            </summary>
            <param name="attributeType">The type of the attributes.</param>
            <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute" />s, or an empty collection.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy">
            <summary>
            A snake case naming strategy.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy" /> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" />.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonISerializableContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonISerializableContract.ISerializableCreator">
            <summary>
            Gets or sets the ISerializable object constructor.
            </summary>
            <value>The ISerializable object constructor.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonISerializableContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonLinqContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DynamicValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using dynamic methods.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DynamicValueProvider" /> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ErrorEventArgs">
            <summary>
            Provides data for the Error event.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject">
            <summary>
            Gets the current object the error event is being raised against.
            </summary>
            <value>The current object the error event is being raised against.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext">
            <summary>
            Gets the error context.
            </summary>
            <value>The error context.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Newtonsoft.Json.Serialization.ErrorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ErrorEventArgs" /> class.
            </summary>
            <param name="currentObject">The current object.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver">
            <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver" /> class.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DefaultContractResolver">
            <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
            <summary>
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            </summary>
            <value>
                <c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
            <summary>
            Gets or sets the default members search flags.
            </summary>
            <value>The default members search flags.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
            <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
            <value>
                <c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableInterface">
            <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface when serializing and deserializing types.
            </summary>
            <value>
                <c>true</c> if the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableAttribute">
            <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.SerializableAttribute" /> attribute when serializing and deserializing types.
            </summary>
            <value>
                <c>true</c> if the <see cref="T:System.SerializableAttribute" /> attribute will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.NamingStrategy">
            <summary>
            Gets or sets the naming strategy used to resolve how property names and dictionary keys are serialized.
            </summary>
            <value>The naming strategy used to resolve how property names and dictionary keys are serialized.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> class.
            </summary>
            <param name="shareCache">
            If set to <c>true</c> the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly improve performance with multiple resolver instances because expensive reflection will only
            happen once. This setting can cause unexpected behavior if different instances of the resolver are suppose to produce different
            results. When set to false it is highly recommended to reuse <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> instances with the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
            <summary>
            Gets the serializable members for the type.
            </summary>
            <param name="objectType">The type to get serializable members for.</param>
            <returns>The serializable members for the type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Newtonsoft.Json.Serialization.JsonPropertyCollection)">
            <summary>
            Creates the constructor parameters.
            </summary>
            <param name="constructor">The constructor to create properties for.</param>
            <param name="memberProperties">The type's member properties.</param>
            <returns>Properties for the given <see cref="T:System.Reflection.ConstructorInfo" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.
            </summary>
            <param name="matchingMemberProperty">The matching member property.</param>
            <param name="parameterInfo">The constructor parameter.</param>
            <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
            <summary>
            Resolves the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for the contract.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The contract's default <see cref="T:Newtonsoft.Json.JsonConverter" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
            <summary>
            Determines which contract type is created for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for the given type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.
            </summary>
            <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param><returns>Properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.</returns></member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <summary>
            Creates the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.
            </summary>
            <param name="member">The member.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
            <param name="memberSerialization">The member's parent <see cref="T:Newtonsoft.Json.MemberSerialization" />.</param>
            <param name="member">The member to create a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for.</param>
            <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Resolves the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Resolved name of the property.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveDictionaryKey(System.String)">
            <summary>
            Resolves the key of the dictionary. By default <see cref="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)" /> is used to resolve dictionary keys.
            </summary>
            <param name="dictionaryKey">Key of the dictionary.</param>
            <returns>Resolved key of the dictionary.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
            <summary>
            Gets the resolved name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Name of the property.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.DefaultSerializationBinder">
            <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object.</param>
            <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ErrorContext">
            <summary>
            Provides information surrounding an error.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Error">
            <summary>
            Gets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.OriginalObject">
            <summary>
            Gets the original object that caused the error.
            </summary>
            <value>The original object that caused the error.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Member">
            <summary>
            Gets the member that caused the error.
            </summary>
            <value>The member that caused the error.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Path">
            <summary>
            Gets the path of the JSON location where the error occurred.
            </summary>
            <value>The path of the JSON location where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.ErrorContext" /> is handled.
            </summary>
            <value>
                <c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IContractResolver">
            <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
            <example>
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class" />
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example" />
            </example>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IValueProvider">
            <summary>
            Provides methods to get and set values.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonArrayContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.CollectionItemType">
            <summary>
            Gets the <see cref="T:System.Type" /> of the collection items.
            </summary>
            <value>The <see cref="T:System.Type" /> of the collection items.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.IsMultidimensionalArray">
            <summary>
            Gets a value indicating whether the collection type is a multidimensional array.
            </summary>
            <value>
                <c>true</c> if the collection type is a multidimensional array; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator" />.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.HasParameterizedCreator">
            <summary>
            Gets a value indicating whether the creator has a parameter with the collection values.
            </summary>
            <value>
                <c>true</c> if the creator has a parameter with the collection values; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.SerializationCallback">
            <summary>
            Handles <see cref="T:Newtonsoft.Json.JsonSerializer" /> serialization callback events.
            </summary>
            <param name="o">The object that raised the callback event.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.SerializationErrorCallback">
            <summary>
            Handles <see cref="T:Newtonsoft.Json.JsonSerializer" /> serialization error callback events.
            </summary>
            <param name="o">The object that raised the callback event.</param>
            <param name="context">The streaming context.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ExtensionDataSetter">
            <summary>
            Sets extension data for an object during deserialization.
            </summary>
            <param name="o">The object to set extension data on.</param>
            <param name="key">The extension data key.</param>
            <param name="value">The extension data value.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ExtensionDataGetter">
            <summary>
            Gets extension data for an object during serialization.
            </summary>
            <param name="o">The object to set extension data on.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.UnderlyingType">
            <summary>
            Gets the underlying type for the contract.
            </summary>
            <value>The underlying type for the contract.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.CreatedType">
            <summary>
            Gets or sets the type created during deserialization.
            </summary>
            <value>The type created during deserialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.IsReference">
            <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
            <value>Whether this type contract is serialized as a reference.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.Converter">
            <summary>
            Gets or sets the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for this contract.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializedCallbacks">
            <summary>
            Gets or sets all methods called immediately after deserialization of the object.
            </summary>
            <value>The methods called immediately after deserialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializingCallbacks">
            <summary>
            Gets or sets all methods called during deserialization of the object.
            </summary>
            <value>The methods called during deserialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializedCallbacks">
            <summary>
            Gets or sets all methods called after serialization of the object graph.
            </summary>
            <value>The methods called after serialization of the object graph.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializingCallbacks">
            <summary>
            Gets or sets all methods called before serialization of the object.
            </summary>
            <value>The methods called before serialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnErrorCallbacks">
            <summary>
            Gets or sets all method called when an error is thrown during the serialization of the object.
            </summary>
            <value>The methods called when an error is thrown during the serialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserialized">
            <summary>
            Gets or sets the method called immediately after deserialization of the object.
            </summary>
            <value>The method called immediately after deserialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializing">
            <summary>
            Gets or sets the method called during deserialization of the object.
            </summary>
            <value>The method called during deserialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerialized">
            <summary>
            Gets or sets the method called after serialization of the object graph.
            </summary>
            <value>The method called after serialization of the object graph.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializing">
            <summary>
            Gets or sets the method called before serialization of the object.
            </summary>
            <value>The method called before serialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnError">
            <summary>
            Gets or sets the method called when an error is thrown during the serialization of the object.
            </summary>
            <value>The method called when an error is thrown during the serialization of the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator">
            <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
            <value>The default creator method used to create the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
            <summary>
            Gets or sets a value indicating whether the default creator is non public.
            </summary>
            <value>
                <c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonDictionaryContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.PropertyNameResolver">
            <summary>
            Gets or sets the property name resolver.
            </summary>
            <value>The property name resolver.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyResolver">
            <summary>
            Gets or sets the dictionary key resolver.
            </summary>
            <value>The dictionary key resolver.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyType">
            <summary>
            Gets the <see cref="T:System.Type" /> of the dictionary keys.
            </summary>
            <value>The <see cref="T:System.Type" /> of the dictionary keys.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryValueType">
            <summary>
            Gets the <see cref="T:System.Type" /> of the dictionary values.
            </summary>
            <value>The <see cref="T:System.Type" /> of the dictionary values.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator" />.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.HasParameterizedCreator">
            <summary>
            Gets a value indicating whether the creator has a parameter with the dictionary values.
            </summary>
            <value>
                <c>true</c> if the creator has a parameter with the dictionary values; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonProperty">
            <summary>
            Maps a JSON property to a .NET member or constructor parameter.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DeclaringType">
            <summary>
            Gets or sets the type that declared this property.
            </summary>
            <value>The type that declared this property.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Order">
            <summary>
            Gets or sets the order of serialization of a member.
            </summary>
            <value>The numeric order of serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.UnderlyingName">
            <summary>
            Gets or sets the name of the underlying member or parameter.
            </summary>
            <value>The name of the underlying member or parameter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ValueProvider">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.AttributeProvider">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IAttributeProvider" /> for this property.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Serialization.IAttributeProvider" /> for this property.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyType">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Converter">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.JsonConverter" /> for the property.
            If set this converter takes presidence over the contract converter for the property type.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.MemberConverter">
            <summary>
            Gets or sets the member converter.
            </summary>
            <value>The member converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Ignored">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is ignored.
            </summary>
            <value>
                <c>true</c> if ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Readable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is readable.
            </summary>
            <value>
                <c>true</c> if readable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Writable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is writable.
            </summary>
            <value>
                <c>true</c> if writable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.HasMemberAttribute">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> has a member attribute.
            </summary>
            <value>
                <c>true</c> if has a member attribute; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.
            </summary>
            <value>A value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.IsReference">
            <summary>
            Gets or sets a value indicating whether this property preserves object references.
            </summary>
            <value>
                <c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling">
            <summary>
            Gets or sets the property null value handling.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling">
            <summary>
            Gets or sets the property default value handling.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling">
            <summary>
            Gets or sets the property reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling">
            <summary>
            Gets or sets the property object creation handling.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.TypeNameHandling">
            <summary>
            Gets or sets or sets the type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldSerialize">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialize.
            </summary>
            <value>A predicate used to determine whether the property should be serialize.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldDeserialize">
            <summary>
            Gets or sets a predicate used to determine whether the property should be deserialized.
            </summary>
            <value>A predicate used to determine whether the property should be deserialized.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.GetIsSpecified">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
            <value>A predicate used to determine whether the property should be serialized.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.SetIsSpecified">
            <summary>
            Gets or sets an action used to set whether the property has been deserialized.
            </summary>
            <value>An action used to set whether the property has been deserialized.</value>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonProperty.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemConverter">
            <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemTypeNameHandling">
            <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonPropertyCollection">
            <summary>
            A collection of <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> objects.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPropertyCollection" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>
            Adds a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            </summary>
            <param name="property">The property to add to the collection.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
            <summary>
            Gets the closest matching <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            First attempts to get an exact case match of propertyName and then
            a case insensitive match.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
            <summary>
            Gets a property by property name.
            </summary>
            <param name="propertyName">The name of the property to get.</param>
            <param name="comparisonType">Type property name string comparison.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.IReferenceResolver">
            <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
            <summary>
            Resolves a reference to its object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference to resolve.</param>
            <returns>The object that</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
            <summary>
            Gets the reference for the sepecified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to get a reference for.</param>
            <returns>The reference to the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
            <summary>
            Determines whether the specified object is referenced.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to test for a reference.</param>
            <returns>
                <c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
            <summary>
            Adds a reference to the specified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference.</param>
            <param name="value">The object to reference.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonObjectContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization">
            <summary>
            Gets or sets the object member serialization.
            </summary>
            <value>The member object serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ConstructorParameters">
            <summary>
            Gets the constructor parameters required for any non-default constructor
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters">
            <summary>
            Gets a collection of <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> instances that define the parameters used with <see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideConstructor">
            <summary>
            Gets or sets the override constructor used to create the object.
            This is set when a constructor is marked up using the
            JsonConstructor attribute.
            </summary>
            <value>The override constructor.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ParametrizedConstructor">
            <summary>
            Gets or sets the parametrized constructor used to create the object.
            </summary>
            <value>The parametrized constructor.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator" />.
            This function is called with a collection of arguments which are defined by the <see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters" /> collection.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataSetter">
            <summary>
            Gets or sets the extension data setter.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataGetter">
            <summary>
            Gets or sets the extension data getter.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataValueType">
            <summary>
            Gets or sets the extension data value type.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.JsonStringContract">
            <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonStringContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.JsonTypeReflector.CreateJsonConverterInstance(System.Type,System.Object[])">
            <summary>
            Lookup and create an instance of the JsonConverter type described by the argument.
            </summary>
            <param name="converterType">The JsonConverter type to create.</param>
            <param name="converterArgs">Optional arguments to pass to an initializing constructor of the JsonConverter.
            If null, the default constructor is used.</param>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ReflectionValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using reflection.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ReflectionValueProvider" /> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.OnErrorAttribute">
            <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.ObjectConstructor`1">
            <summary>
            Represents a method that constructs an object.
            </summary>
            <typeparam name="T">The object type to create.</typeparam>
        </member>
        <member name="T:Newtonsoft.Json.StringEscapeHandling">
            <summary>
            Specifies how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.StringEscapeHandling.Default">
            <summary>
            Only control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeNonAscii">
            <summary>
            All non-ASCII and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeHtml">
            <summary>
            HTML (&lt;, &gt;, &amp;, ', ") and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
            <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="targetType">The type to convert or cast the value to.</param>
            <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1">
            <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
            <returns />
        </member>
        <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1(System.Type)">
            <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
            <param name="enumType">The enum type to get names and values for.</param>
            <returns />
        </member>
        <member name="T:Newtonsoft.Json.Utilities.StringBuffer">
            <summary>
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the collection is null or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
                <c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the specified generic IList.
            </summary>
            <param name="initial">The list to add to.</param>
            <param name="collection">The collection of elements to add.</param>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
            <summary>
            Gets the type of the typed collection's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed collection's items.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>
            Gets the member's underlying type.
            </summary>
            <param name="member">The member.</param>
            <returns>The underlying type of the member.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the member is an indexed property.
            </summary>
            <param name="member">The member.</param>
            <returns>
                <c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
                <c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the member's value on the object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target object.</param>
            <returns>The member's value on the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the member's value on the target object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
            <param name="member">The MemberInfo to determine whether can be read.</param>
            /// <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param><returns><c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns></member>
        <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
            <param name="member">The MemberInfo to determine whether can be set.</param>
            <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
            <param name="canSetReadOnly">if set to <c>true</c> then allow the member to be set if read-only.</param>
            <returns>
                <c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
            <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
            <param name="s">The string to test whether it is all white space.</param>
            <returns>
                <c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Required">
            <summary>
            Indicating whether a property is required.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.Default">
            <summary>
            The property is not required. The default state.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.AllowNull">
            <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.Always">
            <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Required.DisallowNull">
            <summary>
            The property is not required but it cannot be a null value.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.PreserveReferencesHandling">
            <summary>
            Specifies reference handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            Note that references cannot be preserved when a value is set via a non-default constructor such as types that implement ISerializable.
            </summary>
            <example>
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References" />
            </example>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.None">
            <summary>
            Do not preserve references when serializing types.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Objects">
            <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Arrays">
            <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.PreserveReferencesHandling.All">
            <summary>
            Preserve references when serializing.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.IJsonLineInfo">
            <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
                <c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.IJsonLineInfo.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>The current line number or 0 if no line information is available (for example, HasLineInfo returns false).</value>
        </member>
        <member name="P:Newtonsoft.Json.IJsonLineInfo.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>The current line position or 0 if no line information is available (for example, HasLineInfo returns false).</value>
        </member>
        <member name="T:Newtonsoft.Json.JsonArrayAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonArrayAttribute.AllowNullItems">
            <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
            <value>
                <c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with a flag indicating whether the array can contain null items
            </summary>
            <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonContainerAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterType">
            <summary>
            Gets or sets the collection's items converter.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.JsonConverter" /> described by ItemConverterType.
            If null, the default constructor is used.
            When non-null, there must be a constructor defined in the <see cref="T:Newtonsoft.Json.JsonConverter" /> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            [JsonContainer(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            </example>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.NamingStrategyType">
            <summary>
            Gets or sets the <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" />.
            </summary>
            <value>The <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" />.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.NamingStrategyParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" /> described by NamingStrategyType.  
            If null, the default constructor is used.
            When non-null, there must be a constructor defined in the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" /> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            [JsonContainer(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, "Four" })]
            </example>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.IsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve object references.
            </summary>
            <value>
                <c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemIsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve collection's items references.
            </summary>
            <value>
                <c>true</c> to keep collection's items object references; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the collection's items.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the collection's items.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Newtonsoft.Json.DefaultValueHandling">
            <summary>
            Specifies default value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
            <example>
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class" />
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example" />
            </example>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.Include">
            <summary>
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.Ignore">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that is is not written to JSON.
            This option will ignore all default values (e.g. <c>null</c> for objects and nullable types; <c>0</c> for integers,
            decimals and floating point numbers; and <c>false</c> for booleans). The default value ignored can be changed by
            placing the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> on the property.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.Populate">
            <summary>
            Members with a default value but no JSON will be set to their default value when deserializing.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.DefaultValueHandling.IgnoreAndPopulate">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            and sets members to their default value when deserializing.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverterAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified <see cref="T:Newtonsoft.Json.JsonConverter" /> when serializing the member or class.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterType">
            <summary>
            Gets the <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <value>The <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.JsonConverter" />.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.JsonConverter" /> described by ConverterType.  
            If null, the default constructor is used.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonConverterAttribute" /> class.
            </summary>
            <param name="converterType">Type of the <see cref="T:Newtonsoft.Json.JsonConverter" />.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonConverterAttribute" /> class.
            </summary>
            <param name="converterType">Type of the <see cref="T:Newtonsoft.Json.JsonConverter" />.</param>
            <param name="converterParameters">Parameter list to use when constructing the <see cref="T:Newtonsoft.Json.JsonConverter" />. Can be null.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonObjectAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonObjectAttribute.MemberSerialization">
            <summary>
            Gets or sets the member serialization.
            </summary>
            <value>The member serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonObjectAttribute.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified member serialization.
            </summary>
            <param name="memberSerialization">The member serialization.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializerSettings">
            <summary>
            Specifies the settings on a <see cref="T:Newtonsoft.Json.JsonSerializer" /> object.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling">
            <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            </summary>
            <value>Reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling">
            <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
            <value>Missing member handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.NullValueHandling">
            <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            </summary>
            <value>Null value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling">
            <summary>
            Gets or sets how null default are handled during serialization and deserialization.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Converters">
            <summary>
            Gets or sets a <see cref="T:Newtonsoft.Json.JsonConverter" /> collection that will be used during serialization.
            </summary>
            <value>The converters.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
            <value>The preserve references handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
            <remarks>
                <see cref="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling" /> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="T:System.Runtime.Serialization.SerializationBinder" />
            when deserializing with a value other than <c>TypeNameHandling.None</c>.
            </remarks>
            <value>The type name handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.MetadataPropertyHandling">
            <summary>
            Gets or sets how metadata properties are used during deserialization.
            </summary>
            <value>The metadata properties handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.EqualityComparer">
            <summary>
            Gets or sets the equality comparer used by the serializer when comparing references.
            </summary>
            <value>The equality comparer.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
            <value>The reference resolver.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolverProvider">
            <summary>
            Gets or sets a function that creates the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
            <value>A function that creates the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter" /> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Binder">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Error">
            <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
            <value>The error handler called during serialization and deserialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatString">
            <summary>
            Get or set how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatted when writing JSON text, and the expected date format when reading JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatHandling">
            <summary>
            Get or set how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatFormatHandling">
            <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written as JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatParseHandling">
            <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.StringEscapeHandling">
            <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializerSettings.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional content after deserializing an object.
            </summary>
            <value>
                <c>true</c> if there will be a check for additional content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializerSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> class.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonValidatingReader">
            <summary>
                <para>
            Represents a reader that provides <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> validation.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler">
            <summary>
            Sets an event handler for receiving schema validation errors.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
            <value />
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
            <value />
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.TokenType">
            <summary>
            Gets the type of the current JSON token.
            </summary>
            <value />
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.ValueType">
            <summary>
            Gets the Common Language Runtime (CLR) type for the current JSON token.
            </summary>
            <value />
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.#ctor(Newtonsoft.Json.JsonReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonValidatingReader" /> class that
            validates the content returned from the given <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from while validating.</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Schema">
            <summary>
            Gets or sets the schema.
            </summary>
            <value>The schema.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonValidatingReader.Reader">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.JsonReader" /> used to construct this <see cref="T:Newtonsoft.Json.JsonValidatingReader" />.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.JsonReader" /> specified in the constructor.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Byte" />[].
            </summary>
            <returns>
            A <see cref="T:System.Byte" />[] or a null reference if the next JSON token is null.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDouble">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBoolean">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
            <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonValidatingReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
                <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.MemberSerialization">
            <summary>
            Specifies the member serialization options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MemberSerialization.OptOut">
            <summary>
            All public members are serialized by default. Members can be excluded using <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" /> or <see cref="T:System.NonSerializedAttribute" />.
            This is the default member serialization mode.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MemberSerialization.OptIn">
            <summary>
            Only members marked with <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> or <see cref="T:System.Runtime.Serialization.DataMemberAttribute" /> are serialized.
            This member serialization mode can also be set by marking the class with <see cref="T:System.Runtime.Serialization.DataContractAttribute" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MemberSerialization.Fields">
            <summary>
            All public and private fields are serialized. Members can be excluded using <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" /> or <see cref="T:System.NonSerializedAttribute" />.
            This member serialization mode can also be set by marking the class with <see cref="T:System.SerializableAttribute" />
            and setting IgnoreSerializableAttribute on <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> to false.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.ObjectCreationHandling">
            <summary>
            Specifies how object creation is handled by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ObjectCreationHandling.Auto">
            <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ObjectCreationHandling.Reuse">
            <summary>
            Only reuse existing objects.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ObjectCreationHandling.Replace">
            <summary>
            Always create new objects.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonTextReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to JSON text data.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </summary>
            <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextReader.ArrayPool">
            <summary>
            Gets or sets the reader's character buffer pool.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
                <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
            <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Byte" />[].
            </summary>
            <returns>A <see cref="T:System.Byte" />[] or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBoolean">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDouble">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.Close">
            <summary>
            Changes the state to closed. 
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextReader.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
                <c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextReader.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>
            The current line number or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextReader.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>
            The current line position or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
        </member>
        <member name="T:Newtonsoft.Json.JsonPropertyAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to always serialize the member with the specified name.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.JsonConverter" /> used when serializing the property's collection items.
            </summary>
            <value>The collection's items <see cref="T:Newtonsoft.Json.JsonConverter" />.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.JsonConverter" /> described by ItemConverterType.
            If null, the default constructor is used.
            When non-null, there must be a constructor defined in the <see cref="T:Newtonsoft.Json.JsonConverter" /> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            [JsonProperty(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            </example>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyType">
            <summary>
            Gets or sets the <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" />.
            </summary>
            <value>The <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" />.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" /> described by NamingStrategyType.  
            If null, the default constructor is used.
            When non-null, there must be a constructor defined in the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" /> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            [JsonProperty(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, "Four" })]
            </example>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling">
            <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling">
            <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling">
            <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.TypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.IsReference">
            <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
            <value>Whether this property's value is serialized as a reference.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Order">
            <summary>
            Gets or sets the order of serialization of a member.
            </summary>
            <value>The numeric order of serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Required">
            <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
            <value>
            	A value indicating whether this property is required.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonIgnoreAttribute">
            <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> not to serialize the public field or public read/write property value.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonTextWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.ArrayPool">
            <summary>
            Gets or sets the writer's character array pool.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.Indentation">
            <summary>
            Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="T:Newtonsoft.Json.Formatting" /> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteChar">
            <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.IndentChar">
            <summary>
            Gets or sets which character to use for indenting when <see cref="T:Newtonsoft.Json.Formatting" /> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteName">
            <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
            <param name="textWriter">The <c>TextWriter</c> to write to.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
            <param name="value">The <see cref="T:System.String" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Single" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Double" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Char" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte" />[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" />[] value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriterException">
            <summary>
            The exception thrown when an error occurs while reading JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriterException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Newtonsoft.Json.JsonReaderException">
            <summary>
            The exception thrown when an error occurs while reading JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReaderException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverter">
            <summary>
            Converts an object to and from JSON.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
                <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConverter.GetSchema">
            <summary>
                <para>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of the JSON produced by the JsonConverter.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of the JSON produced by the JsonConverter.</returns>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverter.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.
            </summary>
            <value>
                <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
            <value>
                <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Newtonsoft.Json.JsonConverterCollection">
            <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonReader.State">
            <summary>
            Specifies the state of the reader.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Start">
            <summary>
            The Read method has not been called.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Complete">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Property">
            <summary>
            Reader is at a property.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.ObjectStart">
            <summary>
            Reader is at the start of an object.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Object">
            <summary>
            Reader is in an object.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.ArrayStart">
            <summary>
            Reader is at the start of an array.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Array">
            <summary>
            Reader is in an array.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Closed">
            <summary>
            The Close method has been called.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.PostValue">
            <summary>
            Reader has just read a value.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.ConstructorStart">
            <summary>
            Reader is at the start of a constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Constructor">
            <summary>
            Reader in a constructor.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Error">
            <summary>
            An error occurred that prevents the read operation from continuing.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonReader.State.Finished">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.CurrentState">
            <summary>
            Gets the current reader state.
            </summary>
            <value>The current reader state.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.CloseInput">
            <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader" /> should be closed when the reader is closed.
            </summary>
            <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader" /> when
            the reader is closed; otherwise false. The default is true.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.SupportMultipleContent">
            <summary>
            Gets or sets a value indicating whether multiple pieces of JSON content can
            be read from a continuous stream without erroring.
            </summary>
            <value>
            true to support reading multiple pieces of JSON content; otherwise false. The default is false.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling when reading JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.FloatParseHandling">
            <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.DateFormatString">
            <summary>
            Get or set how custom date formatted strings are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.TokenType">
            <summary>
            Gets the type of the current JSON token. 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.ValueType">
            <summary>
            Gets The Common Language Runtime (CLR) type for the current JSON token.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonReader.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
                <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
            <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Byte" />[].
            </summary>
            <returns>A <see cref="T:System.Byte" />[] or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDouble">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsBoolean">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
            <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Skip">
            <summary>
            Skips the children of the current token.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken)">
            <summary>
            Sets the current token.
            </summary>
            <param name="newToken">The new token.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Sets the current token and value.
            </summary>
            <param name="newToken">The new token.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent">
            <summary>
            Sets the state based on current token type.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonReader.Close">
            <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State" /> to Closed. 
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonConvert">
            <summary>
            Provides methods for converting between common language runtime types and JSON types.
            </summary>
            <example>
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" />
            </example>
        </member>
        <member name="P:Newtonsoft.Json.JsonConvert.DefaultSettings">
            <summary>
            Gets or sets a function that creates default <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            Default settings are automatically used by serialization methods on <see cref="T:Newtonsoft.Json.JsonConvert" />,
            and <see cref="M:Newtonsoft.Json.Linq.JToken.ToObject``1" /> and <see cref="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)" /> on <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            To serialize without using any default settings create a <see cref="T:Newtonsoft.Json.JsonSerializer" /> with
            <see cref="M:Newtonsoft.Json.JsonSerializer.Create" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.True">
            <summary>
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.False">
            <summary>
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.Null">
            <summary>
            Represents JavaScript's null as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.Undefined">
            <summary>
            Represents JavaScript's undefined as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.PositiveInfinity">
            <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.NegativeInfinity">
            <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonConvert.NaN">
            <summary>
            Represents JavaScript's NaN as a string. This field is read-only.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime,Newtonsoft.Json.DateFormatHandling,Newtonsoft.Json.DateTimeZoneHandling)">
            <summary>
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation using the <see cref="T:Newtonsoft.Json.DateFormatHandling" /> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <param name="timeZoneHandling">The time zone handling when the date is converted to a string.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset,Newtonsoft.Json.DateFormatHandling)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation using the <see cref="T:Newtonsoft.Json.DateFormatHandling" /> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Boolean" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Char)">
            <summary>
            Converts the <see cref="T:System.Char" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Char" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Enum)">
            <summary>
            Converts the <see cref="T:System.Enum" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Enum" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int32)">
            <summary>
            Converts the <see cref="T:System.Int32" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int32" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int16)">
            <summary>
            Converts the <see cref="T:System.Int16" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int16" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt16)">
            <summary>
            Converts the <see cref="T:System.UInt16" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt16" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt32)">
            <summary>
            Converts the <see cref="T:System.UInt32" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt32" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int64)">
            <summary>
            Converts the <see cref="T:System.Int64" />  to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int64" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt64)">
            <summary>
            Converts the <see cref="T:System.UInt64" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt64" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Single)">
            <summary>
            Converts the <see cref="T:System.Single" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Single" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Double)">
            <summary>
            Converts the <see cref="T:System.Double" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Double" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Byte)">
            <summary>
            Converts the <see cref="T:System.Byte" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Byte" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.SByte)">
            <summary>
            Converts the <see cref="T:System.SByte" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Decimal)">
            <summary>
            Converts the <see cref="T:System.Decimal" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Guid)">
            <summary>
            Converts the <see cref="T:System.Guid" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Guid" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)">
            <summary>
            Converts the <see cref="T:System.TimeSpan" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.TimeSpan" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Uri)">
            <summary>
            Converts the <see cref="T:System.Uri" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Uri" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String)">
            <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)">
            <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimiter">The string delimiter character.</param>
            <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char,Newtonsoft.Json.StringEscapeHandling)">
            <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimiter">The string delimiter character.</param>
            <param name="stringEscapeHandling">The string escape handling.</param>
            <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Object)">
            <summary>
            Converts the <see cref="T:System.Object" /> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Object" />.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)">
            <summary>
            Serializes the specified object to a JSON string.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the specified object to a JSON string using formatting.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="converters">A collection converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using formatting and a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="converters">A collection converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="T:Newtonsoft.Json.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="T:Newtonsoft.Json.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)">
            <summary>
            Deserializes the JSON to a .NET object.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to a .NET object using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The <see cref="T:System.Type" /> of object being deserialized.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the given anonymous type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize to.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)">
            <summary>
            Populates the object with values from the JSON string.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Populates the object with values from the JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
            <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode)">
            <summary>
            Serializes the XML node to a JSON string.
            </summary>
            <param name="node">The node to serialize.</param>
            <returns>A JSON string of the XmlNode.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the XML node to a JSON string using formatting.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>A JSON string of the XmlNode.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting,System.Boolean)">
            <summary>
            Serializes the XML node to a JSON string using formatting and omits the root object if <paramref name="omitRootObject" /> is <c>true</c>.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="omitRootObject">Omits writing the root object.</param>
            <returns>A JSON string of the XmlNode.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String)">
            <summary>
            Deserializes the XmlNode from a JSON string.
            </summary>
            <param name="value">The JSON string.</param>
            <returns>The deserialized XmlNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String)">
            <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName" />.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <returns>The deserialized XmlNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean)">
            <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName" />
            and writes a .NET array attribute for collections.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
            <returns>The deserialized XmlNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject)">
            <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string.
            </summary>
            <param name="node">The node to convert to JSON.</param>
            <returns>A JSON string of the XNode.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string using formatting.
            </summary>
            <param name="node">The node to convert to JSON.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>A JSON string of the XNode.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting,System.Boolean)">
            <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string using formatting and omits the root object if <paramref name="omitRootObject" /> is <c>true</c>.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="omitRootObject">Omits writing the root object.</param>
            <returns>A JSON string of the XNode.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string.
            </summary>
            <param name="value">The JSON string.</param>
            <returns>The deserialized XNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName" />.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <returns>The deserialized XNode</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String,System.Boolean)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName" />
            and writes a .NET array attribute for collections.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
            <returns>The deserialized XNode</returns>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializationException">
            <summary>
            The exception thrown when an error occurs during JSON serialization or deserialization.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Newtonsoft.Json.JsonSerializer">
            <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> enables you to control how objects are encoded into JSON.
            </summary>
        </member>
        <member name="E:Newtonsoft.Json.JsonSerializer.Error">
            <summary>
            Occurs when the <see cref="T:Newtonsoft.Json.JsonSerializer" /> errors during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Binder">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter" /> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.EqualityComparer">
            <summary>
            Gets or sets the equality comparer used by the serializer when comparing references.
            </summary>
            <value>The equality comparer.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
            <remarks>
                <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="T:System.Runtime.Serialization.SerializationBinder" />
            when deserializing with a value other than <c>TypeNameHandling.None</c>.
            </remarks>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
            <summary>
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.MissingMemberHandling">
            <summary>
            Get or set how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.NullValueHandling">
            <summary>
            Get or set how null values are handled during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DefaultValueHandling">
            <summary>
            Get or set how null default are handled during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.MetadataPropertyHandling">
            <summary>
            Gets or sets how metadata properties are used during deserialization.
            </summary>
            <value>The metadata properties handling.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Converters">
            <summary>
            Gets a collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
            </summary>
            <value>Collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatHandling">
            <summary>
            Get or set how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.FloatParseHandling">
            <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.FloatFormatHandling">
            <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written as JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.StringEscapeHandling">
            <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatString">
            <summary>
            Get or set how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatted when writing JSON text, and the expected date format when reading JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonSerializer.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional JSON content after deserializing an object.
            </summary>
            <value>
                <c>true</c> if there will be a check for additional JSON content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializer" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Create">
            <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" />.
            </summary>
            <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" />.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" />.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer" />.</param>
            <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" />.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault">
            <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" />.
            </summary>
            <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" />.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault(Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" /> as well as the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer" />.</param>
            <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" /> as well as the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader" /> that contains the JSON structure to reader values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to reader values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to deserialize.</param>
            <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:System.IO.StringReader" />
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader" /> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize``1(Newtonsoft.Json.JsonReader)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <returns>The instance of <typeparamref name="T" /> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader,System.Type)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the JSON structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the JSON structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
            <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter" /> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
            <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the JSON structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
            <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
        </member>
        <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the JSON structure
            to a <c>Stream</c> using the specified <see cref="T:Newtonsoft.Json.JsonWriter" />. 
            </summary>
            <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter" /> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
        </member>
        <member name="T:Newtonsoft.Json.Schema.Extensions">
            <summary>
                <para>
            Contains the JSON schema extension methods.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
                <para>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
            <param name="schema">The schema to test with.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,System.Collections.Generic.IList{System.String}@)">
            <summary>
                <para>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
            <param name="schema">The schema to test with.</param>
            <param name="errorMessages">When this method returns, contains any error messages generated while validating. </param>
            <returns>
                <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
                <para>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
            <param name="schema">The schema to test with.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Schema.ValidationEventHandler)">
            <summary>
                <para>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
            <param name="schema">The schema to test with.</param>
            <param name="validationEventHandler">The validation event handler.</param>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaException">
            <summary>
                <para>
            Returns detailed information about the schema exception.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaResolver">
            <summary>
                <para>
            Resolves <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from an id.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas">
            <summary>
            Gets or sets the loaded schemas.
            </summary>
            <value>The loaded schemas.</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
            <summary>
            Gets a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified reference.
            </summary>
            <param name="reference">The id.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified reference.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling">
            <summary>
                <para>
            Specifies undefined schema Id handling options for the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaGenerator" />.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None">
            <summary>
            Do not infer a schema Id.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
            <summary>
            Use the .NET type name as the schema Id.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
            <summary>
            Use the assembly qualified .NET type name as the schema Id.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.ValidationEventArgs">
            <summary>
                <para>
            Returns detailed information related to the <see cref="T:Newtonsoft.Json.Schema.ValidationEventHandler" />.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Exception">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> associated with the validation error.
            </summary>
            <value>The JsonSchemaException associated with the validation error.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Path">
            <summary>
            Gets the path of the JSON location where the validation error occurred.
            </summary>
            <value>The path of the JSON location where the validation error occurred.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Message">
            <summary>
            Gets the text description corresponding to the validation error.
            </summary>
            <value>The text description.</value>
        </member>
        <member name="T:Newtonsoft.Json.Schema.ValidationEventHandler">
            <summary>
                <para>
            Represents the callback method that will handle JSON schema validation events and the <see cref="T:Newtonsoft.Json.Schema.ValidationEventArgs" />.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchema">
            <summary>
                <para>
            An in-memory representation of a JSON Schema.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Required">
            <summary>
            Gets or sets whether the object is required.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.ReadOnly">
            <summary>
            Gets or sets whether the object is read only.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Hidden">
            <summary>
            Gets or sets whether the object is visible to users.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Transient">
            <summary>
            Gets or sets whether the object is transient.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Description">
            <summary>
            Gets or sets the description of the object.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Type">
            <summary>
            Gets or sets the types of values allowed by the object.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Pattern">
            <summary>
            Gets or sets the pattern.
            </summary>
            <value>The pattern.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumLength">
            <summary>
            Gets or sets the minimum length.
            </summary>
            <value>The minimum length.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.DivisibleBy">
            <summary>
            Gets or sets a number that the value should be divisble by.
            </summary>
            <value>A number that the value should be divisble by.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMinimum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "minimum" attribute.
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the "minimum" attribute.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMaximum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "maximum" attribute.
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the "maximum" attribute.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumItems">
            <summary>
            Gets or sets the minimum number of items.
            </summary>
            <value>The minimum number of items.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumItems">
            <summary>
            Gets or sets the maximum number of items.
            </summary>
            <value>The maximum number of items.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Items">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.PositionalItemsValidation">
            <summary>
            Gets or sets a value indicating whether items in an array are validated using the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> instance at their array position from <see cref="P:Newtonsoft.Json.Schema.JsonSchema.Items" />.
            </summary>
            <value>
                <c>true</c> if items are validated using their array position; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalItems">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional items.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional items.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalItems">
            <summary>
            Gets or sets a value indicating whether additional items are allowed.
            </summary>
            <value>
                <c>true</c> if additional items are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.UniqueItems">
            <summary>
            Gets or sets whether the array items must be unique.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Properties">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties">
            <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.
            </summary>
            <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.PatternProperties">
            <summary>
            Gets or sets the pattern properties.
            </summary>
            <value>The pattern properties.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties">
            <summary>
            Gets or sets a value indicating whether additional properties are allowed.
            </summary>
            <value>
                <c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Requires">
            <summary>
            Gets or sets the required property if this property is present.
            </summary>
            <value>The required property if this property is present.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Enum">
            <summary>
            Gets or sets the a collection of valid enum values allowed.
            </summary>
            <value>A collection of valid enum values allowed.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Disallow">
            <summary>
            Gets or sets disallowed types.
            </summary>
            <value>The disallow types.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Default">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Extends">
            <summary>
            Gets or sets the collection of <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> that this schema extends.
            </summary>
            <value>The collection of <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> that this schema extends.</value>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchema.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> class.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.</param>
            <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> to use when resolving schema references.</param>
            <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)">
            <summary>
            Load a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a string that contains schema JSON.
            </summary>
            <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Parses the specified json.
            </summary>
            <param name="json">The json.</param>
            <param name="resolver">The resolver.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" /> using the specified <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" />.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
            <param name="resolver">The resolver used.</param>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchema.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaGenerator">
            <summary>
                <para>
            Generates a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a specified <see cref="T:System.Type" />.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
            <summary>
            Gets or sets how undefined schemas are handled by the serializer.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver">
            <summary>
            Gets or sets the contract resolver.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
            <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
            <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
            <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
            <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)">
            <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
            <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.</param>
            <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
        </member>
        <member name="T:Newtonsoft.Json.Schema.JsonSchemaType">
            <summary>
                <para>
            The value types allowed by the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" />.
            </para>
                <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.None">
            <summary>
            No type specified.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.String">
            <summary>
            String type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Float">
            <summary>
            Float type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Integer">
            <summary>
            Integer type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
            <summary>
            Boolean type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Object">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Array">
            <summary>
            Array type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Null">
            <summary>
            Null type.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Any">
            <summary>
            Any type.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.MissingMemberHandling">
            <summary>
            Specifies missing member handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MissingMemberHandling.Ignore">
            <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.MissingMemberHandling.Error">
            <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a missing member is encountered during deserialization.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.NullValueHandling">
            <summary>
            Specifies null value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
            <example>
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class" />
                <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example" />
            </example>
        </member>
        <member name="F:Newtonsoft.Json.NullValueHandling.Include">
            <summary>
            Include null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.NullValueHandling.Ignore">
            <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.ReferenceLoopHandling">
            <summary>
            Specifies reference loop handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Error">
            <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a loop is encountered.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Ignore">
            <summary>
            Ignore loop references and do not serialize.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Serialize">
            <summary>
            Serialize loop references.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.TypeNameHandling">
            <summary>
            Specifies type name handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
            <remarks>
                <see cref="T:Newtonsoft.Json.TypeNameHandling" /> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="T:System.Runtime.Serialization.SerializationBinder" />
            when deserializing with a value other than <c>TypeNameHandling.None</c>.
            </remarks>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.None">
            <summary>
            Do not include the .NET type name when serializing types.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.Objects">
            <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.Arrays">
            <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.All">
            <summary>
            Always include the .NET type name when serializing.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.TypeNameHandling.Auto">
            <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonToken">
            <summary>
            Specifies the type of JSON token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.None">
            <summary>
            This is returned by the <see cref="T:Newtonsoft.Json.JsonReader" /> if a <see cref="M:Newtonsoft.Json.JsonReader.Read" /> method has not been called. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartObject">
            <summary>
            An object start token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartArray">
            <summary>
            An array start token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.StartConstructor">
            <summary>
            A constructor start token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.PropertyName">
            <summary>
            An object property name.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Raw">
            <summary>
            Raw JSON.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Integer">
            <summary>
            An integer.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Float">
            <summary>
            A float.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Boolean">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Null">
            <summary>
            A null token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Undefined">
            <summary>
            An undefined token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndObject">
            <summary>
            An object end token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndArray">
            <summary>
            An array end token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.EndConstructor">
            <summary>
            A constructor end token.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Date">
            <summary>
            A Date.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.JsonToken.Bytes">
            <summary>
            Byte data.
            </summary>
        </member>
        <member name="T:Newtonsoft.Json.JsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.CloseOutput">
            <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader" /> should be closed when the writer is closed.
            </summary>
            <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader" /> when
            the writer is closed; otherwise false. The default is true.
            </value>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Top">
            <summary>
            Gets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.WriteState">
            <summary>
            Gets the state of the writer.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Path">
            <summary>
            Gets the path of the writer. 
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.DateFormatHandling">
            <summary>
            Get or set how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling when writing JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.StringEscapeHandling">
            <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.FloatFormatHandling">
            <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written to JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.DateFormatString">
            <summary>
            Get or set how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatting when writing JSON text.
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.JsonWriter.Culture">
            <summary>
            Gets or sets the culture used when writing JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.#ctor">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class. 
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObject">
            <summary>
            Writes the end of a JSON object.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArray">
            <summary>
            Writes the end of an array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEndConstructor">
            <summary>
            Writes the end constructor.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd">
            <summary>
            Writes the end of the current JSON object or array.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader)">
            <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token and its children.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader,System.Boolean)">
            <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
            <param name="writeChildren">A flag indicating whether the current token's children should be written.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Writes the <see cref="T:Newtonsoft.Json.JsonToken" /> token and its value.
            </summary>
            <param name="token">The <see cref="T:Newtonsoft.Json.JsonToken" /> to write.</param>
            <param name="value">
            The value to write.
            A value is only required for tokens that have an associated value, e.g. the <see cref="T:System.String" /> property name for <see cref="F:Newtonsoft.Json.JsonToken.PropertyName" />.
            A null value can be passed to the method for token's that don't have a value, e.g. <see cref="F:Newtonsoft.Json.JsonToken.StartObject" />.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the <see cref="T:Newtonsoft.Json.JsonToken" /> token.
            </summary>
            <param name="token">The <see cref="T:Newtonsoft.Json.JsonToken" /> to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
            <param name="value">The <see cref="T:System.String" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Single" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Double" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Char" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
            <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte" />[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte" />[] value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object" /> value to write.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Newtonsoft.Json.JsonWriter.SetWriteState(Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Sets the state of the JsonWriter,
            </summary>
            <param name="token">The JsonToken being written.</param>
            <param name="value">The value being written.</param>
        </member>
        <member name="T:Newtonsoft.Json.WriteState">
            <summary>
            Specifies the state of the <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Error">
            <summary>
            An exception has been thrown, which has left the <see cref="T:Newtonsoft.Json.JsonWriter" /> in an invalid state.
            You may call the <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method to put the <see cref="T:Newtonsoft.Json.JsonWriter" /> in the <c>Closed</c> state.
            Any other <see cref="T:Newtonsoft.Json.JsonWriter" /> method calls results in an <see cref="T:System.InvalidOperationException" /> being thrown. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Closed">
            <summary>
            The <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method has been called. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Object">
            <summary>
            An object is being written. 
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Array">
            <summary>
            A array is being written.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Constructor">
            <summary>
            A constructor is being written.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Property">
            <summary>
            A property is being written.
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.WriteState.Start">
            <summary>
            A write method has not been called.
            </summary>
        </member>
        <member name="T:DeepClone.ClonerHelpers">
            <summary>Contains helper methods for the cloners</summary>
        </member>
        <member name="M:DeepClone.ClonerHelpers.GetFieldInfosIncludingBaseClasses(System.Type,System.Reflection.BindingFlags)">
            <summary>
              Returns all the fields of a type, working around a weird reflection issue
              where explicitly declared fields in base classes are returned, but not
              automatic property backing fields.
            </summary>
            <param name="type">Type whose fields will be returned</param>
            <param name="bindingFlags">Binding flags to use when querying the fields</param>
            <returns>All of the type's fields, including its base types</returns>
        </member>
        <member name="T:DeepClone.ReflectionCloner">
            <summary>Clones objects using reflection</summary>
            <remarks>
                <para>
                This type of cloning is a lot faster than cloning by serialization and
                incurs no set-up cost, but requires cloned types to provide a default
                constructor in order to work.
              </para>
            </remarks>
        </member>
        <member name="M:DeepClone.ReflectionCloner.ShallowFieldClone``1(``0)">
            <summary>
              Creates a shallow clone of the specified object, reusing any referenced objects
            </summary>
            <typeparam name="TCloned">Type of the object that will be cloned</typeparam>
            <param name="objectToClone">Object that will be cloned</param>
            <returns>A shallow clone of the provided object</returns>
        </member>
        <member name="M:DeepClone.ReflectionCloner.DeepFieldClone``1(``0)">
            <summary>
              Creates a deep clone of the specified object, also creating clones of all
              child objects being referenced
            </summary>
            <typeparam name="TCloned">Type of the object that will be cloned</typeparam>
            <param name="objectToClone">Object that will be cloned</param>
            <returns>A deep clone of the provided object</returns>
        </member>
        <member name="M:DeepClone.ReflectionCloner.shallowCloneComplexFieldBased(System.Object)">
            <summary>Clones a complex type using field-based value transfer</summary>
            <param name="original">Original instance that will be cloned</param>
            <returns>A clone of the original instance</returns>
        </member>
        <member name="M:DeepClone.ReflectionCloner.shallowCloneArray(System.Object)">
            <summary>Clones an array using field-based value transfer</summary>
            <param name="original">Original array that will be cloned</param>
            <returns>A clone of the original array</returns>
        </member>
        <member name="M:DeepClone.ReflectionCloner.deepCloneSingleFieldBased(System.Object)">
            <summary>Copies a single object using field-based value transfer</summary>
            <param name="original">Original object that will be cloned</param>
            <returns>A clone of the original object</returns>
        </member>
        <member name="M:DeepClone.ReflectionCloner.deepCloneComplexFieldBased(System.Object)">
            <summary>Clones a complex type using field-based value transfer</summary>
            <param name="original">Original instance that will be cloned</param>
            <returns>A clone of the original instance</returns>
        </member>
        <member name="M:DeepClone.ReflectionCloner.deepCloneArrayFieldBased(System.Array,System.Type)">
            <summary>Clones an array using field-based value transfer</summary>
            <param name="original">Original array that will be cloned</param>
            <param name="elementType">Type of elements the original array contains</param>
            <returns>A clone of the original array</returns>
        </member>
        <member name="T:DeepClone.ReflectionClonerByRef">
            <summary>Clones objects using reflection</summary>
            <remarks>
                <para>
                This type of cloning is a lot faster than cloning by serialization and
                incurs no set-up cost, but requires cloned types to provide a default
                constructor in order to work.
              </para>
            </remarks>
        </member>
        <member name="M:DeepClone.ReflectionClonerByRef.DeepFieldClone``1(System.Object@,System.Object)">
            <summary>
              Creates a deep clone of the specified object, also creating clones of all
              child objects being referenced By Reference. It will create the object if it's null.
            </summary>
            <param name="target" />
            <typeparam name="TCloned">Type of the object that will be cloned</typeparam>
            <param name="objectToClone">Object that will be cloned</param>
            <returns>A deep clone of the provided object</returns>
        </member>
        <member name="M:DeepClone.ReflectionClonerByRef.deepCloneSingleFieldBased(System.Object@,System.Object)">
            <summary>Copies a single object using field-based value transfer</summary>
            <param name="target" />
            <param name="original">Original object that will be cloned</param>
            <returns>A clone of the original object</returns>
        </member>
        <member name="M:DeepClone.ReflectionClonerByRef.deepCloneComplexFieldBased(System.Object@,System.Object)">
            <summary>Clones a complex type using field-based value transfer</summary>
            <param name="target" />
            <param name="original">Original instance that will be cloned</param>
            <returns>A clone of the original instance</returns>
        </member>
        <member name="M:DeepClone.ReflectionClonerByRef.deepCloneArrayFieldBased(System.Object@,System.Array,System.Type)">
            <summary>Clones an array using field-based value transfer</summary>
            <param name="target" />
            <param name="original">Original array that will be cloned</param>
            <param name="elementType">Type of elements the original array contains</param>
            <returns>A clone of the original array</returns>
        </member>
    </members>
</doc>